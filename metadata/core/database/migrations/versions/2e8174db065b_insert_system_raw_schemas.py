"""Insert system raw schemas

Revision ID: 2e8174db065b
Revises: 87a03c3a240d
Create Date: 2024-01-11 08:04:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2e8174db065b'
down_revision = '87a03c3a240d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.manifest/locked_payload/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for payload added by processing manifest to records denoting failure due race condition",
	"self": {
		"vendor": "com.snowplowanalytics.manifest",
		"name": "locked_payload",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"recordId": {
			"description": "ID of a record which caused a race condition",
			"type": "string",
			"format": "uuid"
		}
	},
	"required": ["recordId"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Meta-schema for self-describing JSON schema",
	"self": {
		"vendor": "com.snowplowanalytics.self-desc",
		"name": "schema",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"allOf": [
		{
			"properties": {
				"self": {
					"type": "object",
					"properties": {
						"vendor": {
							"type": "string",
							"pattern": "^[a-zA-Z0-9-_.]+$"
						},
						"name": {
							"type": "string",
							"pattern": "^[a-zA-Z0-9-_]+$"
						},
						"format": {
							"type": "string",
							"pattern": "^[a-zA-Z0-9-_]+$"
						},
						"version": {
							"type": "string",
							"pattern": "^[0-9]+-[0-9]+-[0-9]+$"
						}
					},
					"required": ["vendor", "name", "format", "version"],
					"additionalProperties": false
				}
			},
			"required": ["self"]
		},

		{
			"$ref": "http://json-schema.org/draft-04/schema#"
		}
	]

}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.self-desc/instance/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Top-level schema for the validation process",
	"self": {
		"vendor": "com.snowplowanalytics.self-desc",
		"name": "instance",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"properties": {

		"schema": {
			"type": "string",
			"anyOf": [
				{
					"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[0-9]+-[0-9]+-[0-9]+$"
				},
				{
					"format": "strict-uri"
				}
			]
		},

		"data": {}
	},

	"required": ["schema", "data"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))

    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/currency_change/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked whenever player earns or spends an amount of in game currency",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "currency_change",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "group_id": {
            "type": "string",
            "description": "Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id"
        },
        "currency": {
            "type": "string",
            "description": "Name of in game currency (depends on the game, boosters, gems, tokens, ...)"
        },
        "amount_change": {
            "type": "number",
            "description": "Negative if spent, positive if earned (-10 means player spent 10 currency)"
        },
        "stash_updated": {
            "type": "number",
            "description": "Amount of currency player will have after this currency change (Player had 10 currency, got 5, stash_updated will be 15)"
        },
        "currency_limit": {
            "type": "number",
            "description": "Some currencies have top limits (for example, energy could have a max of 100 for this player)"
        },
        "amount_wasted": {
            "type": "number",
            "description": "If currency_limit exists, lets say its 100, played had 90 currency and got 20. 10 currency will be wasted as its above the limit."
        },
        "reason": {
            "type": "string",
            "description": "Descriptive context of the change. (DailyGift, Chest.Gold, Chest.Silver, Quest.WeeklyQuest.Grind)"
        },
        "game_mode": {
            "type": "string",
            "description": "Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)"
        },
        "screen": {
            "type": "string",
            "description": "Name of the screen, if applicable (LoginScreen, BattleScreen, ...)"
        }

    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/login/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when player starts a new session",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "login",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "launch_mode": {
            "type": "string",
            "description": "FromBackground: App was resumed from background. ColdStart: started by clicking game icon. SessionTimeout: Session was inactive, reconnected. Reconnect: Recovered from network/backend error. PushNotification: clicked on push notification",
            "enum": [ "FromBackground", "ColdStart", "SessionTimeout", "Reconnect", "PushNotification" ]
        },
        "previous_session_id": {
            "type": "string",
            "description": "Id of previous session, if applicable"
        }
    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/ad_watched/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when video ad is finished.",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "ad_watched",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "group_id": {
            "type": "string",
            "description": "Unique value (GUID/UUID works very well) used to track source of the change. For example, if player got some currency as a reward after ad, currency_change event will be tracked with same group_id"
        },
        "ad_placement": {
            "type": "string",
            "description": "Description of where ad appears"
        },
        "ad_placement_group": {
            "type": "string",
            "description": "If ad_placemenets are organized hierarchially in groups."
        },
        "ad_provider": {
            "type": "string",
            "description": "Name of ad provider (google_ads, facebook_ads, ...)"
        },
        "ad_type": {
            "type": "string",
            "description": "Type of video ad (interstitial, rewarded)",
            "enum": ["insterstitial", "rewarded"]
        },
        "reward_claimed": {
            "type": "boolean",
            "description": "False if ad can be skipped without collecting rewards and player skipped it."
        },
        "limit": {
            "type": "integer",
            "description": "If there is a limit for this player on how many ads it can watch"
        },
        "limit_counter": {
            "type": "integer",
            "description": "If limit exists, this represents how many ads player already watched, including this one."
        },
        "duration_seconds": {
            "type": "number",
            "description": "Duration in seconds of this ad"
        },
        "seconds_watched": {
            "type": "number",
            "description": "How many seconds user actually watched the ad"
        },
        "crosspromo": {
            "type": "string",
            "description": "Name of the cross promoted game"
        }

    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/first_open/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when GameTuner Tracker sees installation_id for the first time",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "first_open",
        "format": "jsonschema",
        "version": "1-0-0"
    },
     "type": "null",
     "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/first_open/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when GameTuner Tracker sees installation_id for the first time",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "first_open",
        "format": "jsonschema",
        "version": "1-0-1"
    },
     "type": "object",
     "properties": {},
     "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/purchase_initiated/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when players pay for stuff inside the game using real world money, but before sending the request to payment provider",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "purchase_initiated",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "payment_provider": {
            "type": "string",
            "description": "Payment provider of payment providers (google_pay, apple_pay, paypal, ...)"
        },
        "package_name": {
            "type": "string",
            "description": "Unique id of in game package that is bought"
        },
        "package_contents": {
            "type": "string",
            "description": "String serialized as json for every item given"
        },
        "premium_currency": {
            "type": "number",
            "description": "Some currencies have top limits (for example, energy could have a max of 100 for this player)"
        },
        "price": {
            "type": "number",
            "description": "Price of the package as configured on payment provider."
        },
        "price_currency": {
            "type": "string",
            "description": "Currency code of price using ISO 4217 standard (USD, EUR, ...)"
        },
        "price_usd": {
            "type": "number",
            "description": "price in USD using a custom exchange rate or leave empty for automatic conversion using today's rate"
        },
        "game_mode": {
            "type": "string",
            "description": "Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)"
        },
        "shop_placement": {
            "type": "string",
            "description": "Shop location (MainShop, EndOfLevelPopup, ...)"
        },
        "screen": {
            "type": "string",
            "description": "Name of the screen, if applicable (LoginScreen, BattleScreen, ...)"
        },
        "group_id": {
            "type": "string",
            "description": "Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id"
        }

    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/purchase_initiated/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when players pay for stuff inside the game using real world money, but before sending the request to payment provider",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "purchase_initiated",
        "format": "jsonschema",
        "version": "1-0-1"
    },
    "type": "object",
    "properties": {
        "payment_provider": {
            "type": "string",
            "description": "Payment provider of payment providers (google_pay, apple_pay, paypal, ...)"
        },
        "package_name": {
            "type": "string",
            "description": "Unique id of in game package that is bought"
        },
        "package_contents": {
            "type": "string",
            "description": "String serialized as json for every item given"
        },
        "premium_currency": {
            "type": "number",
            "description": "Some currencies have top limits (for example, energy could have a max of 100 for this player)"
        },
        "price": {
            "type": "number",
            "description": "Price of the package as configured on payment provider."
        },
        "price_currency": {
            "type": "string",
            "description": "Currency code of price using ISO 4217 standard (USD, EUR, ...)"
        },
        "price_usd": {
            "type": "number",
            "description": "price in USD using a custom exchange rate or leave empty for automatic conversion using today's rate"
        },
        "game_mode": {
            "type": "string",
            "description": "Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)"
        },
        "shop_placement": {
            "type": "string",
            "description": "Shop location (MainShop, EndOfLevelPopup, ...)"
        },
        "screen": {
            "type": "string",
            "description": "Name of the screen, if applicable (LoginScreen, BattleScreen, ...)"
        },
        "group_id": {
            "type": "string",
            "description": "Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id"
        },
        "package_items": {
            "type": "array",
            "description": "Items of purchased package",
            "items": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "integer"
                    }
                },
                "required": [
                    "key",
                    "value"
                ],
                "additionalProperties": false
            }
        }
    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/ad_started/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when video ad is finished.",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "ad_started",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "group_id": {
            "type": "string",
            "description": "Unique value (GUID/UUID works very well) used to track source of the change. For example, if player got some currency as a reward after ad, currency_change event will be tracked with same group_id"
        },
        "ad_placement": {
            "type": "string",
            "description": "Description of where ad appears"
        },
        "ad_placement_group": {
            "type": "string",
            "description": "If ad_placemenets are organized hierarchially in groups."
        },
        "ad_provider": {
            "type": "string",
            "description": "Name of ad provider (google_ads, facebook_ads, ...)"
        },
        "ad_type": {
            "type": "string",
            "description": "Type of video ad (interstitial, rewarded)",
            "enum": ["insterstitial", "rewarded"]
        },
        "limit": {
            "type": "integer",
            "description": "If there is a limit for this player on how many ads it can watch"
        },
        "limit_counter": {
            "type": "integer",
            "description": "If limit exists, this represents how many ads player already watched, including this one."
        },
        "duration_seconds": {
            "type": "number",
            "description": "Duration in seconds of this ad"
        },
        "crosspromo": {
            "type": "string",
            "description": "Name of the cross promoted game"
        }
    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/purchase/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when players pay for stuff inside the game using real world money",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "purchase",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "transaction_id": {
            "type": "string",
            "description": "Unique id of the transaction, as provided by payment provider"
        },
        "payload": {
            "type": "string",
            "description": "Token used for validating transaction. Provider by payment provider"
        },
        "payment_provider": {
            "type": "string",
            "description": "Payment provider of payment providers (google_pay, apple_pay, paypal, ...)"
        },
        "package_name": {
            "type": "string",
            "description": "Unique id of in game package that is bought"
        },
        "package_contents": {
            "type": "string",
            "description": "String serialized as json for every item given"
        },
        "premium_currency": {
            "type": "number",
            "description": "Some currencies have top limits (for example, energy could have a max of 100 for this player)"
        },
        "price": {
            "type": "number",
            "description": "Price of the package as configured on payment provider."
        },
        "price_currency": {
            "type": "string",
            "description": "Currency code of price using ISO 4217 standard (USD, EUR, ...)"
        },
        "price_usd": {
            "type": "number",
            "description": "price in USD using a custom exchange rate or leave empty for automatic conversion using today's rate"
        },
        "paid_amount": {
            "type": "number",
            "description": "Amount of money played actually paid."
        },
        "paid_currency": {
            "type": "string",
            "description": "Currency code of paid_amount using ISO 4217 standard (USD, EUR, ...)"
        },
        "paid_usd": {
            "type": "number",
            "description": "paid_amount in USD using a custom exchange rate or leave empty for automatic conversion using today's rate"
        },
        "transaction_country_code": {
            "type": "string",
            "description": "Transaction country code using Alpha-2 code ISO 3166 standard, if applicable. For example, players may be location in Japan but paying through USA store, so transaction_country_code should be US. Some providers provide this information."
        },
        "game_mode": {
            "type": "string",
            "description": "Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)"
        },
        "shop_placement": {
            "type": "string",
            "description": "Shop location (MainShop, EndOfLevelPopup, ...)"
        },
        "screen": {
            "type": "string",
            "description": "Name of the screen, if applicable (LoginScreen, BattleScreen, ...)"
        },
        "group_id": {
            "type": "string",
            "description": "Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id"
        }

    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/purchase/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when players pay for stuff inside the game using real world money",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "purchase",
        "format": "jsonschema",
        "version": "1-0-1"
    },
    "type": "object",
    "properties": {
        "transaction_id": {
            "type": "string",
            "description": "Unique id of the transaction, as provided by payment provider"
        },
        "payload": {
            "type": "string",
            "description": "Token used for validating transaction. Provider by payment provider"
        },
        "payment_provider": {
            "type": "string",
            "description": "Payment provider of payment providers (google_pay, apple_pay, paypal, ...)"
        },
        "package_name": {
            "type": "string",
            "description": "Unique id of in game package that is bought"
        },
        "package_contents": {
            "type": "string",
            "description": "String serialized as json for every item given"
        },
        "premium_currency": {
            "type": "number",
            "description": "Some currencies have top limits (for example, energy could have a max of 100 for this player)"
        },
        "price": {
            "type": "number",
            "description": "Price of the package as configured on payment provider."
        },
        "price_currency": {
            "type": "string",
            "description": "Currency code of price using ISO 4217 standard (USD, EUR, ...)"
        },
        "price_usd": {
            "type": "number",
            "description": "price in USD using a custom exchange rate or leave empty for automatic conversion using today's rate"
        },
        "paid_amount": {
            "type": "number",
            "description": "Amount of money played actually paid."
        },
        "paid_currency": {
            "type": "string",
            "description": "Currency code of paid_amount using ISO 4217 standard (USD, EUR, ...)"
        },
        "paid_usd": {
            "type": "number",
            "description": "paid_amount in USD using a custom exchange rate or leave empty for automatic conversion using today's rate"
        },
        "transaction_country_code": {
            "type": "string",
            "description": "Transaction country code using Alpha-2 code ISO 3166 standard, if applicable. For example, players may be location in Japan but paying through USA store, so transaction_country_code should be US. Some providers provide this information."
        },
        "game_mode": {
            "type": "string",
            "description": "Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)"
        },
        "shop_placement": {
            "type": "string",
            "description": "Shop location (MainShop, EndOfLevelPopup, ...)"
        },
        "screen": {
            "type": "string",
            "description": "Name of the screen, if applicable (LoginScreen, BattleScreen, ...)"
        },
        "group_id": {
            "type": "string",
            "description": "Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id"
        },
        "package_items": {
            "type": "array",
            "description": "Items of purchased package",
            "items": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "integer"
                    }
                },
                "required": [
                    "key",
                    "value"
                ],
                "additionalProperties": false
            }
        }

    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/new_user/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when GameTuner sees an user and assigns it an unique id for the first time",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "new_user",
        "format": "jsonschema",
        "version": "1-0-0"
    },
     "type": "null",
     "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.event/new_user/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Tracked when GameTuner sees an user and assigns it an unique id for the first time",
    "self": {
        "vendor": "com.algebraai.gametuner.event",
        "name": "new_user",
        "format": "jsonschema",
        "version": "1-0-1"
    },
     "type": "object",
     "properties": {},
     "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))



    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('nl.basjes/yauaa_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a context generated by the YAUAA enrichment after parsing the user agent",
    "self": {
        "vendor": "nl.basjes",
        "name": "yauaa_context",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "deviceClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Anonymized", "Unknown", "UNKNOWN", "Mobile", "Tablet", "Phone", "Watch", "Virtual Reality", "eReader", "Set-top box", "TV", "Game Console", "Handheld Game Console", "Voice", "Robot", "Robot Mobile", "Spy", "Hacker"]
        },
        "deviceName": {
            "description": "Example: Google Nexus 6",
            "type": "string",
            "maxLength": 100
        },
        "deviceBrand": {
            "description": "Example: Google",
            "type": "string",
            "maxLength": 50
        },
        "deviceCpu": {
            "type": "string",
            "maxLength": 50
        },
        "deviceCpuBits": {
            "type": "string",
            "maxLength": 20
        },
        "deviceFirmwareVersion": {
            "type": "string",
            "maxLength": 100
        },
        "deviceVersion": {
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Mobile", "Cloud", "Embedded", "Game Console", "Hacker", "Anonymized", "Unknown"]
        },
        "operatingSystemName": {
            "description": "Examples: Linux, Android.",
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemVersion": {
            "type": "string",
            "maxLength": 50
        },
        "operatingSystemNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "operatingSystemVersionBuild": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Mobile App", "Hacker", "Robot", "Unknown"]
        },
        "layoutEngineName": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineVersion": {
            "type": "string",
            "maxLength": 50
        },
        "layoutEngineVersionMajor": {
            "type": "string",
            "maxLength": 20
        },
        "layoutEngineNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "layoutEngineNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "layoutEngineBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Browser Webview", "Mobile App", "Robot", "Robot Mobile", "Cloud Application", "Email Client", "Voice", "Special", "Testclient", "Hacker", "Unknown"]
        },
        "agentName": {
            "description": "Example: Chrome.",
            "type": "string",
            "maxLength": 100
        },
        "agentVersion": {
            "type": "string",
            "maxLength": 100
        },
        "agentVersionMajor": {
            "type": "string",
            "maxLength": 20
        },
        "agentNameVersion": {
            "type": "string",
            "maxLength": 200
        },
        "agentNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "agentBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentLanguage": {
            "type": "string",
            "maxLength": 50
        },
        "agentLanguageCode": {
            "type": "string",
            "maxLength": 20
        },
        "agentInformationEmail": {
            "type": "string",
            "format": "email"
        },
        "agentInformationUrl": {
            "type": "string"
        },
        "agentSecurity": {
            "type": "string",
            "enum": ["Weak security", "Strong security", "Unknown", "Hacker"]
        },
        "agentUuid": {
            "type": "string"
        },
        "webviewAppName": {
            "type": "string"
        },
        "webviewAppVersion": {
            "type": "string"
        },
        "webviewAppVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "webviewAppNameVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "facebookCarrier": {
            "type": "string"
        },
        "facebookDeviceClass": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceName": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceVersion": {
            "type": "string"
        },
        "facebookFBOP": {
            "type": "string"
        },
        "facebookFBSS": {
            "type": "string"
        },
        "facebookOperatingSystemName": {
            "type": "string"
        },
        "facebookOperatingSystemVersion": {
            "type": "string"
        },
        "anonymized": {
            "type": "string"
        },
        "hackerAttackVector": {
            "type": "string"
        },
        "hackerToolkit": {
            "type": "string"
        },
        "koboAffiliate": {
            "type": "string"
        },
        "koboPlatformId": {
            "type": "string"
        },
        "iECompatibilityVersion": {
            "type": "string",
            "maxLength": 100
        },
        "iECompatibilityVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersion": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersionMajor": {
            "type": "string",
            "maxLength": 70
        },
        "carrier": {
            "type": "string"
        },
        "gSAInstallationID": {
            "type": "string"
        },
        "networkType": {
            "type": "string"
        }
    },
    "required": ["deviceClass"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('nl.basjes/yauaa_context/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a context generated by the YAUAA enrichment after parsing the user agent",
    "self": {
        "vendor": "nl.basjes",
        "name": "yauaa_context",
        "format": "jsonschema",
        "version": "1-0-1"
    },
    "type": "object",
    "properties": {
        "deviceClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Anonymized", "Unknown", "UNKNOWN", "Mobile", "Tablet", "Phone", "Watch", "Virtual Reality", "eReader", "Set-top box", "TV", "Game Console", "Handheld Game Console", "Voice", "Robot", "Robot Mobile", "Spy", "Hacker"]
        },
        "deviceName": {
            "description": "Example: Google Nexus 6",
            "type": "string",
            "maxLength": 100
        },
        "deviceBrand": {
            "description": "Example: Google",
            "type": "string",
            "maxLength": 50
        },
        "deviceCpu": {
            "type": "string",
            "maxLength": 50
        },
        "deviceCpuBits": {
            "type": "string",
            "maxLength": 20
        },
        "deviceFirmwareVersion": {
            "type": "string",
            "maxLength": 100
        },
        "deviceVersion": {
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Mobile", "Cloud", "Embedded", "Game Console", "Hacker", "Anonymized", "Unknown"]
        },
        "operatingSystemName": {
            "description": "Examples: Linux, Android.",
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemVersion": {
            "type": "string",
            "maxLength": 50
        },
        "operatingSystemNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "operatingSystemVersionBuild": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Mobile App", "Hacker", "Robot", "Unknown"]
        },
        "layoutEngineName": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineVersion": {
            "type": "string",
            "maxLength": 50
        },
        "layoutEngineVersionMajor": {
            "type": "string",
            "maxLength": 20
        },
        "layoutEngineNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "layoutEngineNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "layoutEngineBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Browser Webview", "Mobile App", "Robot", "Robot Mobile", "Cloud Application", "Email Client", "Voice", "Special", "Testclient", "Hacker", "Unknown"]
        },
        "agentName": {
            "description": "Example: Chrome.",
            "type": "string",
            "maxLength": 100
        },
        "agentVersion": {
            "type": "string",
            "maxLength": 100
        },
        "agentVersionMajor": {
            "type": "string",
            "maxLength": 20
        },
        "agentNameVersion": {
            "type": "string",
            "maxLength": 200
        },
        "agentNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "agentBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentLanguage": {
            "type": "string",
            "maxLength": 50
        },
        "agentLanguageCode": {
            "type": "string",
            "maxLength": 20
        },
        "agentInformationEmail": {
            "type": "string",
            "format": "email"
        },
        "agentInformationUrl": {
            "type": "string"
        },
        "agentSecurity": {
            "type": "string",
            "enum": ["Weak security", "Strong security", "Unknown", "Hacker"]
        },
        "agentUuid": {
            "type": "string"
        },
        "webviewAppName": {
            "type": "string"
        },
        "webviewAppVersion": {
            "type": "string"
        },
        "webviewAppVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "webviewAppNameVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "facebookCarrier": {
            "type": "string"
        },
        "facebookDeviceClass": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceName": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceVersion": {
            "type": "string"
        },
        "facebookFBOP": {
            "type": "string"
        },
        "facebookFBSS": {
            "type": "string"
        },
        "facebookOperatingSystemName": {
            "type": "string"
        },
        "facebookOperatingSystemVersion": {
            "type": "string"
        },
        "anonymized": {
            "type": "string"
        },
        "hackerAttackVector": {
            "type": "string"
        },
        "hackerToolkit": {
            "type": "string"
        },
        "koboAffiliate": {
            "type": "string"
        },
        "koboPlatformId": {
            "type": "string"
        },
        "iECompatibilityVersion": {
            "type": "string",
            "maxLength": 100
        },
        "iECompatibilityVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersion": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersionMajor": {
            "type": "string",
            "maxLength": 70
        },
        "carrier": {
            "type": "string"
        },
        "gSAInstallationID": {
            "type": "string"
        },
        "networkType": {
            "type": "string"
        },
        "operatingSystemNameVersionMajor": {
            "type": "string"
        },
        "operatingSystemVersionMajor": {
            "type": "string"
        }
    },
    "required": ["deviceClass"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('nl.basjes/yauaa_context/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a context generated by the YAUAA enrichment after parsing the user agent",
    "self": {
        "vendor": "nl.basjes",
        "name": "yauaa_context",
        "format": "jsonschema",
        "version": "1-0-2"
    },
    "type": "object",
    "properties": {
        "deviceClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Anonymized", "Unknown", "UNKNOWN", "Mobile", "Tablet", "Phone", "Watch", "Virtual Reality", "eReader", "Set-top box", "TV", "Game Console", "Handheld Game Console", "Voice", "Robot", "Robot Mobile", "Spy", "Hacker", "Augmented Reality", "Robot Imitator"]
        },
        "deviceName": {
            "description": "Example: Google Nexus 6",
            "type": "string",
            "maxLength": 100
        },
        "deviceBrand": {
            "description": "Example: Google",
            "type": "string",
            "maxLength": 50
        },
        "deviceCpu": {
            "type": "string",
            "maxLength": 50
        },
        "deviceCpuBits": {
            "type": "string",
            "maxLength": 20
        },
        "deviceFirmwareVersion": {
            "type": "string",
            "maxLength": 100
        },
        "deviceVersion": {
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Mobile", "Cloud", "Embedded", "Game Console", "Hacker", "Anonymized", "Unknown"]
        },
        "operatingSystemName": {
            "description": "Examples: Linux, Android.",
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemVersion": {
            "type": "string",
            "maxLength": 50
        },
        "operatingSystemNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "operatingSystemVersionBuild": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Mobile App", "Hacker", "Robot", "Unknown", "Special", "Cloud", "eReader"]
        },
        "layoutEngineName": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineVersion": {
            "type": "string",
            "maxLength": 50
        },
        "layoutEngineVersionMajor": {
            "type": "string",
            "maxLength": 20
        },
        "layoutEngineNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "layoutEngineNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "layoutEngineBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Browser Webview", "Mobile App", "Robot", "Robot Mobile", "Cloud Application", "Email Client", "Voice", "Special", "Testclient", "Hacker", "Unknown", "Desktop App", "eReader"]
        },
        "agentName": {
            "description": "Example: Chrome.",
            "type": "string",
            "maxLength": 100
        },
        "agentVersion": {
            "type": "string",
            "maxLength": 100
        },
        "agentVersionMajor": {
            "type": "string",
            "maxLength": 20
        },
        "agentNameVersion": {
            "type": "string",
            "maxLength": 200
        },
        "agentNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "agentBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentLanguage": {
            "type": "string",
            "maxLength": 50
        },
        "agentLanguageCode": {
            "type": "string",
            "maxLength": 20
        },
        "agentInformationEmail": {
            "type": "string",
            "format": "email"
        },
        "agentInformationUrl": {
            "type": "string"
        },
        "agentSecurity": {
            "type": "string",
            "enum": ["Weak security", "Strong security", "Unknown", "Hacker", "No security"]
        },
        "agentUuid": {
            "type": "string"
        },
        "webviewAppName": {
            "type": "string"
        },
        "webviewAppVersion": {
            "type": "string"
        },
        "webviewAppVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "webviewAppNameVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "facebookCarrier": {
            "type": "string"
        },
        "facebookDeviceClass": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceName": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceVersion": {
            "type": "string"
        },
        "facebookFBOP": {
            "type": "string"
        },
        "facebookFBSS": {
            "type": "string"
        },
        "facebookOperatingSystemName": {
            "type": "string"
        },
        "facebookOperatingSystemVersion": {
            "type": "string"
        },
        "anonymized": {
            "type": "string"
        },
        "hackerAttackVector": {
            "type": "string"
        },
        "hackerToolkit": {
            "type": "string"
        },
        "koboAffiliate": {
            "type": "string"
        },
        "koboPlatformId": {
            "type": "string"
        },
        "iECompatibilityVersion": {
            "type": "string",
            "maxLength": 100
        },
        "iECompatibilityVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersion": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersionMajor": {
            "type": "string",
            "maxLength": 70
        },
        "carrier": {
            "type": "string"
        },
        "gSAInstallationID": {
            "type": "string"
        },
        "networkType": {
            "type": "string"
        },
        "operatingSystemNameVersionMajor": {
            "type": "string"
        },
        "operatingSystemVersionMajor": {
            "type": "string"
        }
    },
    "required": ["deviceClass"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('nl.basjes/yauaa_context/jsonschema/1-0-3', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a context generated by the YAUAA enrichment after parsing the user agent",
    "self": {
        "vendor": "nl.basjes",
        "name": "yauaa_context",
        "format": "jsonschema",
        "version": "1-0-3"
    },
    "type": "object",
    "properties": {
        "deviceClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Anonymized", "Unknown", "UNKNOWN", "Mobile", "Tablet", "Phone", "Watch", "Virtual Reality", "eReader", "Set-top box", "TV", "Game Console", "Handheld Game Console", "Voice", "Robot", "Robot Mobile", "Spy", "Hacker", "Augmented Reality", "Robot Imitator"]
        },
        "deviceName": {
            "description": "Example: Google Nexus 6",
            "type": "string",
            "maxLength": 100
        },
        "deviceBrand": {
            "description": "Example: Google",
            "type": "string",
            "maxLength": 50
        },
        "deviceCpu": {
            "type": "string",
            "maxLength": 50
        },
        "deviceCpuBits": {
            "type": "string",
            "maxLength": 20
        },
        "deviceFirmwareVersion": {
            "type": "string",
            "maxLength": 100
        },
        "deviceVersion": {
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Desktop", "Mobile", "Cloud", "Embedded", "Game Console", "Hacker", "Anonymized", "Unknown"]
        },
        "operatingSystemName": {
            "description": "Examples: Linux, Android.",
            "type": "string",
            "maxLength": 100
        },
        "operatingSystemVersion": {
            "type": "string",
            "maxLength": 50
        },
        "operatingSystemNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "operatingSystemVersionBuild": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Mobile App", "Hacker", "Robot", "Unknown", "Special", "Cloud", "eReader"]
        },
        "layoutEngineName": {
            "type": "string",
            "maxLength": 100
        },
        "layoutEngineVersion": {
            "type": "string",
            "maxLength": 50
        },
        "layoutEngineVersionMajor": {
            "type": "string",
            "maxLength": 20
        },
        "layoutEngineNameVersion": {
            "type": "string",
            "maxLength": 150
        },
        "layoutEngineNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "layoutEngineBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentClass": {
            "description": "See https://yauaa.basjes.nl/README-Output.html",
            "enum": ["Browser", "Browser Webview", "Mobile App", "Robot", "Robot Mobile", "Cloud Application", "Email Client", "Voice", "Special", "Testclient", "Hacker", "Unknown", "Desktop App", "eReader"]
        },
        "agentName": {
            "description": "Example: Chrome.",
            "type": "string",
            "maxLength": 100
        },
        "agentVersion": {
            "type": "string",
            "maxLength": 100
        },
        "agentVersionMajor": {
            "type": "string",
            "maxLength": 100
        },
        "agentNameVersion": {
            "type": "string",
            "maxLength": 200
        },
        "agentNameVersionMajor": {
            "type": "string",
            "maxLength": 120
        },
        "agentBuild": {
            "type": "string",
            "maxLength": 100
        },
        "agentLanguage": {
            "type": "string",
            "maxLength": 50
        },
        "agentLanguageCode": {
            "type": "string",
            "maxLength": 20
        },
        "agentInformationEmail": {
            "type": "string",
            "format": "email"
        },
        "agentInformationUrl": {
            "type": "string"
        },
        "agentSecurity": {
            "type": "string",
            "enum": ["Weak security", "Strong security", "Unknown", "Hacker", "No security"]
        },
        "agentUuid": {
            "type": "string"
        },
        "webviewAppName": {
            "type": "string"
        },
        "webviewAppVersion": {
            "type": "string"
        },
        "webviewAppVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "webviewAppNameVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "facebookCarrier": {
            "type": "string"
        },
        "facebookDeviceClass": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceName": {
            "type": "string",
            "maxLength": 1024
        },
        "facebookDeviceVersion": {
            "type": "string"
        },
        "facebookFBOP": {
            "type": "string"
        },
        "facebookFBSS": {
            "type": "string"
        },
        "facebookOperatingSystemName": {
            "type": "string"
        },
        "facebookOperatingSystemVersion": {
            "type": "string"
        },
        "anonymized": {
            "type": "string"
        },
        "hackerAttackVector": {
            "type": "string"
        },
        "hackerToolkit": {
            "type": "string"
        },
        "koboAffiliate": {
            "type": "string"
        },
        "koboPlatformId": {
            "type": "string"
        },
        "iECompatibilityVersion": {
            "type": "string",
            "maxLength": 100
        },
        "iECompatibilityVersionMajor": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersion": {
            "type": "string",
            "maxLength": 50
        },
        "iECompatibilityNameVersionMajor": {
            "type": "string",
            "maxLength": 70
        },
        "carrier": {
            "type": "string"
        },
        "gSAInstallationID": {
            "type": "string"
        },
        "networkType": {
            "type": "string"
        },
        "operatingSystemNameVersionMajor": {
            "type": "string"
        },
        "operatingSystemVersionMajor": {
            "type": "string"
        }
    },
    "required": ["deviceClass"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4/user_engagement/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4",
                "name": "user_engagement",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A user_engagement GA4 event.",
        "type": "object",
        "properties": {
                "engagement_time_msec": {
                        "description": "The time in milliseconds that the user is engaged.",
                        "type": ["integer", "null"],
                        "minimum": 0
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4/session_start/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4",
                "name": "session_start",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A session_start GA4 event.",
        "type": "object",
        "properties": {},
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4/first_visit/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4",
                "name": "first_visit",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A first_visit GA4 event.",
        "type": "object",
        "properties": {},
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.marketo/event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Marketo description",
  "self": {
    "vendor": "com.marketo",
    "name": "event",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "maxLength": 128
    },
    "description": {
      "type": ["string", "null"],
      "maxLength": 255
    },
    "step": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 32767
    },
    "campaign": {
      "type": ["object", "null"],
      "properties": {
        "id": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": ["string", "null"],
          "maxLength": 255
        }
      },
      "required": ["id", "name"]
    },
    "company": {
      "type": ["object", "null"],
      "properties": {
        "account_owner_email_address": {
          "type": "string",
          "format": "email"
        },
        "account_owner_first_name": {
          "type": "string",
          "maxLength": 255
          },
        "account_owner_last_name": {
          "type": "string",
          "maxLength": 255
        },
        "annual_revenue": {
          "type": "number",
          "minimum": 0,
          "maximum": 2147483647
        },
        "billing_address": {
          "type": "string",
          "maxLength": 255
        },
        "billing_city": {
          "type": "string",
          "maxLength": 255
        },
        "billing_country": {
          "type": "string",
          "maxLength": 255
        },
        "billing_postal_code": {
          "type": "string",
          "maxLength": 255
        },
        "billing_state": {
          "type": "string",
          "maxLength": 255
        },
        "name": {
          "type": "string",
          "maxLength": 255
          },
        "notes": {
          "type": "string",
          "maxLength": 255
        },
        "industry": {
          "type": "string",
          "maxLength": 255
        },
        "main_phone": {
          "type": "string",
          "maxLength": 255
        },
        "num_employees": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "parent_company_name": {
          "type": "string",
          "maxLength": 255
        },
        "sic_code": {
          "type": "string",
          "maxLength": 40
        },
        "site": {
          "type": "string",
          "maxLength": 255
        },
        "website": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "lead": {
      "type": ["object", "null"],
      "properties": {
        "acquisition_date": {
          "type": "string",
          "format": "date-time"
        },
        "acquisition_program_name": {
          "type": "string",
          "maxLength": 255
        },
        "acquisition_program": {
          "type": "string",
          "maxLength": 255
          },
        "address": {
          "type": "string",
          "maxLength": 255
          },
        "anonymous_ip": {
          "type": "string",
          "maxLength": 45
        },
        "black_listed": {
          "type": "boolean"
        },
        "city": {
          "type": "string",
          "maxLength": 255
          },
        "country": {
          "type": "string",
          "maxLength": 255
          },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "date_of_birth": {
          "type": "string",
          "format": "date"
        },
        "department": {
          "type": "string",
          "maxLength": 255
        },
        "do_not_call_reason": {
          "type": "string",
          "maxLength": 512
        },
        "do_not_call": {
          "type": "boolean"
        },
        "email_address": {
          "type": "string",
          "format": "email"
          },
        "email_invalid_cause": {
          "type": "string",
          "maxLength": 255
          },
        "email_invalid": {
          "type": "boolean"
        },
        "email_suspended_at": {
          "type": "string",
          "format": "date-time"
        },
        "email_suspended_cause": {
          "type": "string",
          "maxLength": 2000
        },
        "email_suspended": {
          "type": "boolean"
        },
        "fax_number": {
          "type": "string",
          "maxLength": 255
        },
        "first_name": {
          "type": "string",
          "maxLength": 255
        },
        "full_name": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_city": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_company": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_country": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_metropolitan_area": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_phone_area_code": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_postal_code": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_state_region": {
          "type": "string",
          "maxLength": 255
        },
        "is_customer": {
          "type": "boolean"
        },
        "is_partner": {
          "type": "boolean"
        },
        "job_title": {
          "type": "string",
          "maxLength": 255
        },
        "last_interesting_moment_date": {
          "type": "string",
          "format": "date"
        },
        "last_interesting_moment_description": {
          "type": "string",
          "maxLength": 255
        },
        "last_interesting_moment_source": {
          "type": "string",
          "maxLength": 255
        },
        "last_interesting_moment_type": {
          "type": "string",
          "maxLength": 255
        },
        "last_name": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_email_address": {
          "type": "string",
          "format": "email"
        },
        "lead_owner_first_name": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_job_title": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_last_name": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_phone_number": {
          "type": "string",
          "maxLength": 255
        },
        "lead_rating": {
          "type": "string",
          "maxLength": 255
        },
        "lead_score": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "lead_source": {
          "type": "string",
          "maxLength": 255
        },
        "lead_status": {
          "type": "string",
          "maxLength": 255
        },
        "lead_marketing_suspended": {
          "type": "boolean"
        },
        "facebook_display_name": {
          "type": "string",
          "maxLength": 255
        },
        "facebook_id": {
          "type": "string",
          "maxLength": 512
        },
        "facebook_photo_url": {
          "type": "string",
          "maxLength": 255
        },
        "facebook_profile_url": {
          "type": "string",
          "maxLength": 255
        },
        "facebook_reach": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "facebook_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "facebook_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "gender": {
          "type": "string",
          "maxLength": 6
        },
        "last_referred_enrollment": {
          "type": "string",
          "format": "date-time"
        },
        "last_referred_visit": {
          "type": "string",
          "format": "date-time"
        },
        "linkedin_display_name": {
          "type": "string",
          "maxLength": 255
        },
        "linkedin_id": {
          "type": "string",
          "maxLength": 512
        },
        "linkedin_photo_url": {
          "type": "string",
          "maxLength": 512
        },
        "linkedin_profile_url": {
          "type": "string",
          "maxLength": 512
        },
        "linkedin_reach": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "linkedin_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "linkedin_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "syndication_id": {
          "type": "string",
          "maxLength": 512
        },
        "total_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "total_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "twitter_display_name": {
          "type": "string",
          "maxLength": 255
        },
        "twitter_id": {
          "type": "string",
          "maxLength": 512
        },
        "twitter_photo_url": {
          "type": "string",
          "maxLength": 512
        },
        "twitter_profile_url": {
          "type": "string",
          "maxLength": 512
        },
        "twitter_reach": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "twitter_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "twitter_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "middle_name": {
          "type": "string",
          "maxLength": 255
        },
        "mobile_phone_number": {
          "type": "string",
          "maxLength": 255
        },
        "number_of_optys": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "original_referrer": {
          "type": "string",
          "maxLength": 255
        },
        "original_search_engine": {
          "type": "string",
          "maxLength": 255
        },
        "original_search_phrase": {
          "type": "string",
          "maxLength": 255
        },
        "original_source_info": {
          "type": "string",
          "maxLength": 255
        },
        "original_source_type": {
          "type": "string",
          "maxLength": 255
        },
        "person_notes": {
          "type": "string",
          "maxLength": 512
        },
        "person_timezone": {
          "type": "string",
          "maxLength": 255
        },
        "phone_number": {
          "type": "string",
          "maxLength": 255
        },
        "postal_code": {
          "type": "string",
          "maxLength": 255
        },
        "priority": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "registration_source_info": {
          "type": "string",
          "maxLength": 2000
        },
        "registration_source_type": {
          "type": "string",
          "maxLength": 255
        },
        "relative_score": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5
        },
        "relative_urgency": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5
        },
        "role": {
          "type": "string",
          "maxLength": 50
        },
        "salutation": {
          "type": "string",
          "maxLength": 255
        },
        "state": {
          "type": "string",
          "maxLength": 255
        },
        "total_opty_amount": {
          "type": "number",
          "minimum": 0,
          "maximum": 2147483647
        },
        "total_opty_expected_revenue": {
          "type": "number",
          "minimum": 0,
          "maximum": 2147483647
        },
        "unsubscribed_reason": {
          "type": "string",
          "maxLength": 512
        },
        "unsubscribed": {
          "type": "boolean"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "urgency": {
          "type": "integer",
          "minimum": 0,
          "maximum": 32767
        }
      }
    },
    "program": {
      "type": ["object", "null"],
      "properties": {
        "id": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "maxLength": 2000
        }
      }
    },
    "social": {
      "type": ["object", "null"],
      "properties": {
        "promo_code": {
          "type": "string",
          "maxLength": 255
        },
        "share_url": {
          "type": "string",
          "maxLength": 2000
        },
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "datetime": {
      "type": ["string", "null"],
      "format": "date-time"
    },
    "forward_to_friend_link": {
      "type": ["string", "null"],
      "maxLength": 255
    },
    "munchkinId": {
      "type": ["string", "null"],
      "maxLength": 255
    },
    "unsubscribe_link": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "view_as_webpage_link": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "sp_send_alert_info": {
      "type": ["string", "null"],
      "maxLength": 2000
    }
  },
  "additionalProperties": true,
  "required": ["name"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.marketo/event/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Marketo description",
  "self": {
    "vendor": "com.marketo",
    "name": "event",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "maxLength": 128
    },
    "description": {
      "type": ["string", "null"],
      "maxLength": 255
    },
    "step": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 32767
    },
    "campaign": {
      "type": ["object", "null"],
      "properties": {
        "id": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": ["string", "null"],
          "maxLength": 255
        }
      },
      "required": ["id", "name"]
    },
    "company": {
      "type": ["object", "null"],
      "properties": {
        "account_owner_email_address": {
          "type": "string",
          "format": "email"
        },
        "account_owner_first_name": {
          "type": "string",
          "maxLength": 255
          },
        "account_owner_last_name": {
          "type": "string",
          "maxLength": 255
        },
        "annual_revenue": {
          "type": "number",
          "minimum": 0,
          "maximum": 2147483647
        },
        "billing_address": {
          "type": "string",
          "maxLength": 255
        },
        "billing_city": {
          "type": "string",
          "maxLength": 255
        },
        "billing_country": {
          "type": "string",
          "maxLength": 255
        },
        "billing_postal_code": {
          "type": "string",
          "maxLength": 255
        },
        "billing_state": {
          "type": "string",
          "maxLength": 255
        },
        "name": {
          "type": "string",
          "maxLength": 255
          },
        "notes": {
          "type": "string",
          "maxLength": 255
        },
        "industry": {
          "type": "string",
          "maxLength": 255
        },
        "main_phone": {
          "type": "string",
          "maxLength": 255
        },
        "num_employees": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "parent_company_name": {
          "type": "string",
          "maxLength": 255
        },
        "sic_code": {
          "type": "string",
          "maxLength": 40
        },
        "site": {
          "type": "string",
          "maxLength": 255
        },
        "website": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "lead": {
      "type": ["object", "null"],
      "properties": {
        "acquisition_date": {
          "type": "string",
          "format": "date-time"
        },
        "acquisition_program_name": {
          "type": "string",
          "maxLength": 255
        },
        "acquisition_program": {
          "type": "string",
          "maxLength": 255
          },
        "address": {
          "type": "string",
          "maxLength": 255
          },
        "anonymous_ip": {
          "type": "string",
          "maxLength": 45
        },
        "black_listed": {
          "type": "boolean"
        },
        "city": {
          "type": "string",
          "maxLength": 255
          },
        "country": {
          "type": "string",
          "maxLength": 255
          },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "date_of_birth": {
          "type": "string",
          "format": "date"
        },
        "department": {
          "type": "string",
          "maxLength": 255
        },
        "do_not_call_reason": {
          "type": "string",
          "maxLength": 512
        },
        "do_not_call": {
          "type": "boolean"
        },
        "email_address": {
          "type": "string",
          "format": "email"
          },
        "email_invalid_cause": {
          "type": "string",
          "maxLength": 255
          },
        "email_invalid": {
          "type": "boolean"
        },
        "email_suspended_at": {
          "type": "string",
          "format": "date-time"
        },
        "email_suspended_cause": {
          "type": "string",
          "maxLength": 2000
        },
        "email_suspended": {
          "type": "boolean"
        },
        "fax_number": {
          "type": "string",
          "maxLength": 255
        },
        "first_name": {
          "type": "string",
          "maxLength": 255
        },
        "full_name": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_city": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_company": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_country": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_metropolitan_area": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_phone_area_code": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_postal_code": {
          "type": "string",
          "maxLength": 255
        },
        "inferred_state_region": {
          "type": "string",
          "maxLength": 255
        },
        "is_customer": {
          "type": "boolean"
        },
        "is_partner": {
          "type": "boolean"
        },
        "job_title": {
          "type": "string",
          "maxLength": 255
        },
        "last_interesting_moment_date": {
          "type": "string",
          "format": "date-time"
        },
        "last_interesting_moment_description": {
          "type": "string",
          "maxLength": 255
        },
        "last_interesting_moment_source": {
          "type": "string",
          "maxLength": 255
        },
        "last_interesting_moment_type": {
          "type": "string",
          "maxLength": 255
        },
        "last_name": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_email_address": {
          "type": "string",
          "format": "email"
        },
        "lead_owner_first_name": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_job_title": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_last_name": {
          "type": "string",
          "maxLength": 255
        },
        "lead_owner_phone_number": {
          "type": "string",
          "maxLength": 255
        },
        "lead_rating": {
          "type": "string",
          "maxLength": 255
        },
        "lead_score": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "lead_source": {
          "type": "string",
          "maxLength": 255
        },
        "lead_status": {
          "type": "string",
          "maxLength": 255
        },
        "lead_marketing_suspended": {
          "type": "boolean"
        },
        "facebook_display_name": {
          "type": "string",
          "maxLength": 255
        },
        "facebook_id": {
          "type": "string",
          "maxLength": 512
        },
        "facebook_photo_url": {
          "type": "string",
          "maxLength": 255
        },
        "facebook_profile_url": {
          "type": "string",
          "maxLength": 255
        },
        "facebook_reach": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "facebook_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "facebook_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "gender": {
          "type": "string",
          "maxLength": 6
        },
        "last_referred_enrollment": {
          "type": "string",
          "format": "date-time"
        },
        "last_referred_visit": {
          "type": "string",
          "format": "date-time"
        },
        "linkedin_display_name": {
          "type": "string",
          "maxLength": 255
        },
        "linkedin_id": {
          "type": "string",
          "maxLength": 512
        },
        "linkedin_photo_url": {
          "type": "string",
          "maxLength": 512
        },
        "linkedin_profile_url": {
          "type": "string",
          "maxLength": 512
        },
        "linkedin_reach": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "linkedin_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "linkedin_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "syndication_id": {
          "type": "string",
          "maxLength": 512
        },
        "total_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "total_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "twitter_display_name": {
          "type": "string",
          "maxLength": 255
        },
        "twitter_id": {
          "type": "string",
          "maxLength": 512
        },
        "twitter_photo_url": {
          "type": "string",
          "maxLength": 512
        },
        "twitter_profile_url": {
          "type": "string",
          "maxLength": 512
        },
        "twitter_reach": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "twitter_referred_enrollments": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "twitter_referred_visits": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "middle_name": {
          "type": "string",
          "maxLength": 255
        },
        "mobile_phone_number": {
          "type": "string",
          "maxLength": 255
        },
        "number_of_optys": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "original_referrer": {
          "type": "string",
          "maxLength": 255
        },
        "original_search_engine": {
          "type": "string",
          "maxLength": 255
        },
        "original_search_phrase": {
          "type": "string",
          "maxLength": 255
        },
        "original_source_info": {
          "type": "string",
          "maxLength": 255
        },
        "original_source_type": {
          "type": "string",
          "maxLength": 255
        },
        "person_notes": {
          "type": "string",
          "maxLength": 512
        },
        "person_timezone": {
          "type": "string",
          "maxLength": 255
        },
        "phone_number": {
          "type": "string",
          "maxLength": 255
        },
        "postal_code": {
          "type": "string",
          "maxLength": 255
        },
        "priority": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "registration_source_info": {
          "type": "string",
          "maxLength": 2000
        },
        "registration_source_type": {
          "type": "string",
          "maxLength": 255
        },
        "relative_score": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5
        },
        "relative_urgency": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5
        },
        "role": {
          "type": "string",
          "maxLength": 50
        },
        "salutation": {
          "type": "string",
          "maxLength": 255
        },
        "state": {
          "type": "string",
          "maxLength": 255
        },
        "total_opty_amount": {
          "type": "number",
          "minimum": 0,
          "maximum": 2147483647
        },
        "total_opty_expected_revenue": {
          "type": "number",
          "minimum": 0,
          "maximum": 2147483647
        },
        "unsubscribed_reason": {
          "type": "string",
          "maxLength": 512
        },
        "unsubscribed": {
          "type": "boolean"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "urgency": {
          "type": "integer",
          "minimum": 0,
          "maximum": 32767
        }
      }
    },
    "program": {
      "type": ["object", "null"],
      "properties": {
        "id": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2147483647
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "maxLength": 2000
        }
      }
    },
    "social": {
      "type": ["object", "null"],
      "properties": {
        "promo_code": {
          "type": "string",
          "maxLength": 255
        },
        "share_url": {
          "type": "string",
          "maxLength": 2000
        },
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "datetime": {
      "type": ["string", "null"],
      "format": "date-time"
    },
    "forward_to_friend_link": {
      "type": ["string", "null"],
      "maxLength": 255
    },
    "munchkinId": {
      "type": ["string", "null"],
      "maxLength": 255
    },
    "unsubscribe_link": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "view_as_webpage_link": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "sp_send_alert_info": {
      "type": ["string", "null"],
      "maxLength": 2000
    }
  },
  "additionalProperties": true,
  "required": ["name"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.lambda/java_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema":"http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description":"Schema for an AWS Lambda Java context object, http://docs.aws.amazon.com/lambda/latest/dg/java-context-object.html",
	"self":{
		"vendor":"com.amazon.aws.lambda",
		"name":"java_context",
		"version":"1-0-0",
		"format":"jsonschema"
	},
	"type":"object",
	"properties":{
		"functionName":{
			"type":"string"
		},
		"logStreamName":{
			"type":"string"
		},
		"awsRequestId":{
			"type":"string"
		},
		"remainingTimeMillis":{
			"type":"integer",
			"minimum":0
		},
		"logGroupName":{
			"type":"string"
		},
		"memoryLimitInMB":{
			"type":"integer",
			"minimum":0
		},
		"clientContext":{
			"type":"object",
			"properties":{
				"client":{
					"type":"object",
					"properties":{
						"appTitle":{
							"type":"string"
						},
						"appVersionName":{
							"type":"string"
						},
						"appVersionCode":{
							"type":"string"
						},
						"appPackageName":{
							"type":"string"
						}
					},
					"additionalProperties":false
				},
				"custom":{
					"type":"object",
					"patternProperties":{
						".*":{
							"type":"string"
						}
					}
				},
				"environment":{
					"type":"object",
					"patternProperties":{
						".*":{
							"type":"string"
						}
					}
				}
			},
			"additionalProperties":false
		},
		"identity":{
			"type":"object",
			"properties":{
				"identityId":{
					"type":"string"
				},
				"identityPoolId":{
					"type":"string"
				}
			},
			"additionalProperties":false
		}
	},
	"additionalProperties":false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.lambda/s3_notification_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"self": {
		"vendor": "com.amazon.aws.lambda",
		"name": "s3_notification_event",
		"version": "1-0-0",
		"format": "jsonschema"
	},
	"type": "object",
	"properties": {
		"eventName": {
			"type": "string"
		},
		"requestParameters": {
			"type": "object",
			"properties": {
				"sourceIPAddress": {
					"type": "string",
					"format": "ipv4"
				}
			},
			"additionalProperties": false
		},
		"s3": {
			"type": "object",
			"properties": {
				"configurationId": {
					"type": "string"
				},
				"bucket": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"ownerIdentity": {
							"type": "object",
							"properties": {
								"principalId": {
									"type": "string"
								}
							},
							"additionalProperties": false
						},
						"arn": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"object": {
					"type": "object",
					"properties": {
						"key": {
							"type": "string"
						},
						"size": {
							"type": [
								"integer",
								"null"
							],
							"minimum": 0
						},
						"eTag": {
							"type": [
								"string",
								"null"
							]
						},
						"versionId": {
							"type": "null"
						}
					},
					"additionalProperties": false
				},
				"s3SchemaVersion": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"eventSource": {
			"type": "string"
		},
		"userIdentity": {
			"type": "object",
			"properties": {
				"principalId": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"eventVersion": {
			"type": "string"
		},
		"responseElements": {
			"type": "object",
			"properties": {
				"x-amz-id-2": {
					"type": "string"
				},
				"x-amz-request-id": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"awsRegion": {
			"type": "string"
		},
		"eventTime": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4.enhanced-measurement/click/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4.enhanced-measurement",
                "name": "click",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A click GA4 enhanced-measurement event.",
        "type": "object",
        "properties": {
                "link_classes": {
                        "description": "The classes of the link element.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "link_domain": {
                        "description": "The link domain.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "link_id": {
                        "description": "The link ID.",
                        "type": ["string", "null"],
                        "maxLength": 500
                },
                "link_url": {
                        "description": "The link url.",
                        "type": ["string", "null"],
                        "format": "uri",
                        "maxLength": 4096
                },
                "outbound": {
                        "description": "Whether the link is outbound.",
                        "type": ["boolean", "null"]
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4.enhanced-measurement/file_download/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4.enhanced-measurement",
                "name": "file_download",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A file_download GA4 enhanced-measurement event.",
        "type": "object",
        "properties": {
                "file_extention": {
                        "description": "The extention of the file downloaded.",
                        "type": ["string", "null"],
                        "maxLength": 16
                },
                "file_name": {
                        "description": "The file name.",
                        "type": ["string", "null"],
                        "maxLength": 500
                },
                "link_classes": {
                        "description": "The classes of the file element.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "link_domain": {
                        "description": "The link domain.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "link_id": {
                        "description": "The link ID.",
                        "type": ["string", "null"],
                        "maxLength": 500
                },
                "link_text": {
                        "description": "The link text.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "link_url": {
                        "description": "The link url.",
                        "type": ["string", "null"],
                        "format": "uri",
                        "maxLength": 4096
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4.enhanced-measurement/view_search_results/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4.enhanced-measurement",
                "name": "view_search_results",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A view_search_results GA4 enhanced-measurement event.",
        "type": "object",
        "properties": {
                "search_term": {
                        "description": "The term that was searched for.",
                        "type": "string",
                        "maxLength": 4096
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4.enhanced-measurement/video_start/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4.enhanced-measurement",
                "name": "video_start",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A video_start GA4 enhanced-measurement event.",
        "type": "object",
        "properties": {
                "video_current_time": {
                        "description": "The current time of the video in seconds.",
                        "type": ["integer", "null"],
                        "minimum": 0
                },
                "video_duration": {
                        "description": "The video duration in seconds.",
                        "type": ["integer", "null"],
                        "minimum": 0
                },
                "video_percent": {
                        "description": "The percentage of video watched.",
                        "type": ["number", "null"],
                        "minimum": 0,
                        "maximum": 100
                },
                "video_provider": {
                        "description": "The video provider.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "video_title": {
                        "description": "The video title.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "video_url": {
                        "description": "The video url.",
                        "type": ["string", "null"],
                        "format": "uri",
                        "maxLength": 4096
                },
                "visible": {
                        "description": "Whether the video is visible or not.",
                        "type": ["boolean", "null"]
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4.enhanced-measurement/scroll/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4.enhanced-measurement",
                "name": "scroll",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A scroll GA4 enhanced-measurement event.",
        "type": "object",
        "properties": {},
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4.enhanced-measurement/video_progress/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4.enhanced-measurement",
                "name": "video_progress",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A video_progress GA4 enhanced-measurement event.",
        "type": "object",
        "properties": {
                "video_current_time": {
                        "description": "The current time of the video in seconds.",
                        "type": ["integer", "null"],
                        "minimum": 0
                },
                "video_duration": {
                        "description": "The video duration in seconds.",
                        "type": ["integer", "null"],
                        "minimum": 0
                },
                "video_percent": {
                        "description": "The percentage of video watched.",
                        "type": ["number", "null"],
                        "minimum": 0,
                        "maximum": 100
                },
                "video_provider": {
                        "description": "The video provider.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "video_title": {
                        "description": "The video title.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "video_url": {
                        "description": "The video url.",
                        "type": ["string", "null"],
                        "format": "uri",
                        "maxLength": 4096
                },
                "visible": {
                        "description": "Whether the video is visible or not.",
                        "type": ["boolean", "null"]
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.ga4.enhanced-measurement/video_complete/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.ga4.enhanced-measurement",
                "name": "video_complete",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A video_complete GA4 enhanced-measurement event.",
        "type": "object",
        "properties": {
                "video_current_time": {
                        "description": "The current time of the video in seconds.",
                        "type": ["integer", "null"],
                        "minimum": 0
                },
                "video_duration": {
                        "description": "The video duration in seconds.",
                        "type": ["integer", "null"],
                        "minimum": 0
                },
                "video_percent": {
                        "description": "The percentage of video watched.",
                        "type": ["number", "null"],
                        "minimum": 0,
                        "maximum": 100
                },
                "video_provider": {
                        "description": "The video provider.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "video_title": {
                        "description": "The video title.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "video_url": {
                        "description": "The video url.",
                        "type": ["string", "null"],
                        "format": "uri",
                        "maxLength": 4096
                },
                "visible": {
                        "description": "Whether the video is visible or not.",
                        "type": ["boolean", "null"]
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.w3/PerformanceTiming/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for page performance, based on the window.performance.timing object (see https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html)",
	"self": {
		"vendor": "org.w3",
		"name": "PerformanceTiming",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"navigationStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"redirectStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"redirectEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"fetchStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"domainLookupStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"domainLookupEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"connectStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"secureConnectionStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"connectEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"requestStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"responseStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"responseEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"unloadEventStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"unloadEventEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"domLoading": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"domInteractive": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"domContentLoadedEventStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"domContentLoadedEventEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"domComplete": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"loadEventStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"loadEventEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"msFirstPaint": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"chromeFirstPaint": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"requestEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"proxyStart": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"proxyEnd": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.ecommerce/item/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Google Analytics Ecommerce transaction item",
	"self": {
		"vendor": "com.google.analytics.ecommerce",
		"name": "item",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"name": {
			"type": "string",
			"maxLength": 500
		},
		"price": {
			"type": "number",
			"multipleOf": 0.01
		},
		"quantity": {
			"type": "integer"
		},
		"code": {
			"type": "string",
			"maxLength": 500
		},
		"category": {
			"type": "string",
			"maxLength": 500
		},
		"currency": {
			"type": "string",
			"maxLength": 3,
			"minLength": 3
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.ecommerce/transaction/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Google Analytics Ecommerce transaction",
	"self": {
		"vendor": "com.google.analytics.ecommerce",
		"name": "transaction",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"id": {
			"type": "string",
			"maxLength": 500
		},
		"affiliation": {
			"type": "string",
			"maxLength": 500
		},
		"revenue": {
			"type": "number",
			"multipleOf": 0.01
		},
		"shipping": {
			"type": "number",
			"multipleOf": 0.01
		},
		"tax": {
			"type": "number",
			"multipleOf": 0.01
		},
		"currency": {
			"type": "string",
			"maxLength": 3,
			"minLength": 3
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.zendesk.snowplow/ticket_updated/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a ticket status flow",
	"self": {
		"vendor": "com.zendesk.snowplow",
		"name": "ticket_updated",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"account": {
			"type": "string"
		},
		"brand": {
			"type": "string"
		},
		"ccNames": {
			"type": "string"
		},
		"createdAt": {
			"type": "string"
		},
		"updatedAt": {
			"type": "string",
			"format": "date-time"
		},
		"dueDate": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"groupAssigned": {
			"type": ["string", "null"]
		},
		"ticketId": {
			"type": "integer"
		},
		"externalId": {
			"type": ["string", "null"]
		},
		"inBusinessHours": {
			"type": "boolean"
		},
		"organizationName": {
			"type": ["string", "null"]
		},
		"organizationId": {
			"type": ["integer", "null"]
		},
		"priority": {
			"type": ["string", "null"],
			"enum": ["Low", "Normal", "High", "Urgent", null]
		},
		"status": {
			"enum": ["New", "Open", "NOT_READY", "On-hold", "Solved", "Closed"]
		},
		"tags": {
			"type": ["string", "null"]
		},
		"ticketType": {
			"type": ["string", "null"],
			"enum": ["Question", "Incident", "Problem", "Task", "Ticket", null]
		},
		"ticketTitle": {
			"type": "string"
		},
		"url": {
			"type": "string"
		},
		"via": {
			"type": "string"
		},
		"latestCommentAuthorName": {
			"type": "string"
		},
		"latestComment": {
			"type": "string"
		},
		"latestCommentIsPublic": {
			"type": "boolean"
		}
	},

	"required": [
		"ticketId",
		"updatedAt",
		"account",
		"brand",
		"ccNames",
		"createdAt",
		"dueDate",
		"externalId",
		"groupAssigned",
		"inBusinessHours",
		"latestComment",
		"latestCommentAuthorName",
		"latestCommentIsPublic",
		"organizationId",
		"organizationName",
		"priority",
		"status",
		"tags",
		"ticketTitle",
		"ticketType",
		"url",
		"via"
	],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.zendesk.snowplow/user/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Zendesk users",
	"self": {
		"vendor": "com.zendesk.snowplow",
		"name": "user",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"ticketId": {
			"type": "integer"
		},
		"updatedAt": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string"
		},
		"firstName": {
			"type": ["string", "null"]
		},
		"lastName": {
			"type": ["string", "null"]
		},
		"email": {
			"type": ["string", "null"]
		},
		"language": {
			"type": ["string", "null"]
		},
		"phone": {
			"type": ["string", "null"]
		},
		"externalId": {
			"type": ["string", "null"]
		},
		"details": {
			"type": ["string", "null"]
		},
		"notes": {
			"type": ["string", "null"]
		},
		"timeZone": {
			"type": ["string", "null"]
		},
		"role": {
			"type": ["string", "null"]
		},
		"extendedRole": {
			"type": ["string", "null"]
		},
		"userId": {
			"type": ["integer", "null"]
		},
		"locale": {
			"type": ["string", "null"]
		},
		"signature": {
			"type": ["string", "null"]
		},
		"organization": {
			"type": ["string", "null"]
		},
		"tags": {
			"type": ["string", "null"]
		}
	},

	"required": [
		"ticketId",
		"type",
		"updatedAt",
		"details",
		"email",
		"extendedRole",
		"externalId",
		"firstName",
		"language",
		"lastName",
		"locale",
		"notes",
		"organization",
		"phone",
		"role",
		"signature",
		"tags",
		"timeZone",
		"userId"
	],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.enricher/unique_id_resolver/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for configuration of unique id resolver enrichment",
	"self": {
		"vendor": "com.algebraai.gametuner.enricher",
		"name": "unique_id_resolver",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"username": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"database": {
                    "type": "string"
                },
                "connectionName": {
                    "type": "string"
                },
                "maximumElementsInCache": {
                    "type": "integer"
                },
                "expireCacheAfterMinutes": {
                    "type": "integer"
                }
			},
			"required": ["username", "password", "database", "connectionName", "maximumElementsInCache", "expireCacheAfterMinutes"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.segment/page/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Segment page entity (via webhook), https://segment.com/docs/spec/page/#properties",
	"self": {
		"vendor": "com.segment",
		"name": "page",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"name": {
			"type": "string"
		},
		"path": {
			"type": "string",
			"maxLength": 8192
		},
		"referrer": {
			"type": "string"
		},
		"search": {
			"type": "string"
		},
		"title": {
			"type": "string"
		},
		"url": {
			"type": "string",
			"format": "uri",
			"maxLength": 8192
		}
	},
	"additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.segment/alias/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Segment alias event (via webhook), https://segment.com/docs/integrations/webhooks/#alias",
	"self": {
		"vendor": "com.segment",
		"name": "alias",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"from": {
				"type": "string"
		},
		"to": {
				"type": "string"
		}
	},
	"additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.segment/event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "description": "Schema for Segment's common event fields, https://segment.com/docs/spec/common/",
        "self": {
                "vendor": "com.segment",
                "name": "event",
                "format": "jsonschema",
                "version": "1-0-0"
        },
        "type": "object",
        "properties": {
                "type": {
                        "type": "string",
                        "maxLength": 512
                },
                "version": {
                        "type": "string",
                        "maxLength": 128
                },
                "userId": {
                        "type": "string",
                        "maxLength": 36
                },
                "anonymousId": {
                        "type": "string",
                        "format": "uuid"
                },
                "channel": {
                        "enum": [ "server", "browser", "mobile" ]
                },
                "messageId": {
                        "type": "string",
                        "maxLength": 36
                },
                "projectId": {
                        "type": "string",
                        "maxLength": 36
                },
                "originalTimestamp": {
                        "type": "string",
                        "format": "date-time"
                },
                "receivedAt": {
                        "type": "string",
                        "format": "date-time"
                },
                "sentAt": {
                        "type": "string",
                        "format": "date-time"
                },
                "timestamp": {
                        "type": "string",
                        "format": "date-time"
                }
        },
        "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.segment/screen/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Segment screen entity (via webhook), https://segment.com/docs/spec/screen/#properties",
	"self": {
		"vendor": "com.segment",
		"name": "screen",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"name": {
			"type": "string"
		}
	},
	"additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.segment/traits/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Segment traits (via webhook), https://segment.com/docs/spec/identify/#traits",
	"self": {
		"vendor": "com.segment",
		"name": "traits",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"address": {
			"type": "object",
			"properties": {
				"city": {
					"type": "string",
					"maxLength": 512
				},
				"country": {
					"type": "string"
				},
				"postalCode": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"street": {
					"type": "string"
				}
			},
			"additionalProperties": true
		},
		"age": {
			"type": "integer"
		},
		"avatar": {
			"type": "string",
			"format": "uri",
			"maxLength": 8192
		},
		"birthday": {
			"type": "string",
			"format": "date-time"
		},
		"createdAt": {
			"type": "string",
			"format": "date-time"
		},
		"description": {
			"type": "string"
		},
		"email": {
			"type": "string",
			"format": "email",
			"maxLength": 512
		},
		"firstName": {
			"type": "string"
		},
		"id": {
			"type": "string"
		},
		"lastName": {
			"type": "string"
		},
		"phone": {
			"type": "string",
			"maxLength": 128
		},
		"title": {
			"type": "string"
		},
		"username": {
			"type": "string"
		},
		"website": {
			"type": "string",
			"format": "uri",
			"maxLength": 8192
		}
	},
	"additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.segment/group/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Segment group event (via webhook), https://segment.com/docs/integrations/webhooks/#group",
	"self": {
		"vendor": "com.segment",
		"name": "group",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"groupId": {
			"type": "string",
			"maxLength": 512
		}
	},
	"additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.segment/context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Segment's context fields, https://segment.com/docs/spec/common/#context",
	"self": {
		"vendor": "com.segment",
		"name": "context",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"ip": {
			"type": "string",
			"format": "ipv4"
		},
		"app": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"maxLength": 512
				},
				"version": {
					"type": "string",
					"maxLength": 1024
				},
				"build": {
					"type": "string",
					"maxLength": 1024
				}
			},
			"additionalProperties": true
		},
		"campaign": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"maxLength": 1024
				},
				"source": {
					"type": "string",
					"maxLength": 512
				},
				"medium": {
					"type": "string",
					"maxLength": 512
				},
				"term": {
					"type": "string",
					"maxLength": 4096
				},
				"content": {
					"type": "string",
					"maxLength": 8192
				}
			},
			"additionalProperties": true
		},
		"location": {
			"type": "object",
			"properties": {
				"city": {
					"type": "string",
					"maxLength": 512
				},
				"country": {
					"type": "string",
					"maxLength": 512
				},
				"latitude": {
					"type": "number"
				},
				"longitude": {
					"type": "number"
				},
				"speed": {
					"type": "integer",
					"maximum": 9223372036854775807,
					"minimum": 0
				}
			},
			"additionalProperties": true
		},
		"device": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"format": "uuid"
				},
				"advertisingId": {
					"type": "string",
					"format": "uuid"
				},
				"adTrackingEnabled": {
					"type": "boolean"
				},
				"manufacturer": {
					"type": "string",
					"maxLength": 512
				},
				"model": {
					"type": "string",
					"maxLength": 512
				},
				"name": {
					"type": "string",
					"maxLength": 1024
				},
				"type": {
					"type": "string",
					"maxLength": 128
				},
				"token": {
					"type": "string",
					"maxLength": 128
				}
			},
			"additionalProperties": true
		},
		"library": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"maxLength": 512
				},
				"version": {
					"type": "string",
					"maxLength": 512
				}
			},
			"additionalProperties": true
		},
		"referrer": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"maxLength": 512
				},
				"id": {
					"type": "string",
					"maxLength": 1024
				},
				"name": {
					"type": "string",
					"maxLength": 1024
				},
				"url": {
					"type": "string",
					"format": "uri",
					"maxLength": 8192
				},
				"link": {
					"type": "string",
					"format": "uri",
					"maxLength": 8192
				}
			},
			"additionalProperties": true
		},
		"network": {
			"type": "object",
			"properties": {
				"bluetooth": {
					"type": "boolean"
				},
				"cellular": {
					"type": "boolean"
				},
				"wifi": {
					"type": "boolean"
				},
				"carrier": {
					"type": "string",
					"maxLength": 1024
				}
			},
			"additionalProperties": true
		},
		"os": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"maxLength": 512
				},
				"version": {
					"type": "string",
					"maxLength": 1024
				}
			},
			"additionalProperties": true
		},
		"screen": {
			"type": "object",
			"properties": {
				"density": {
					"type": "integer",
					"maximum": 2147483647,
					"minimum": 0
				},
				"height": {
					"type": "integer",
					"maximum": 9223372036854775807,
					"minimum": 0
				},
				"width": {
					"type": "integer",
					"maximum": 9223372036854775807,
					"minimum": 0
				}
			},
			"additionalProperties": true
		},
		"userAgent": {
			"type": "string",
			"maxLength": 4096
		},
		"locale": {
			"type": "string",
			"maxLength": 512
		},
		"timezone": {
			"type": "string",
			"maxLength": 128
		}
	},
	"additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/delivered/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero email delivered",
	"self": {
		"vendor": "com.getvero",
		"name": "delivered",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"delivered_at": {
			"type": "string",
			"format": "date-time"
		},
		"sender_ip": {
			"type": ["string", "null"],
			"maxLength": 45
		},
		"message_id": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"type": {
			"type": "string",
			"maxLength": 255
		},
		"event": {
			"type": "object",
			"properties": {
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"triggered_at": {
					"type": ["string", "null"],
					"format": "date-time"
				},
				"data": {
					"type": ["object", "null"],
					"additionalProperties": true
				}
			}
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		},
		"campaign": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"type": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"subject": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"trigger-event": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"permalink": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"variation": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"tags": {
					"type": ["string", "null"],
					"maxLength": 255
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/unsubscribed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero email unsubscribed",
	"self": {
		"vendor": "com.getvero",
		"name": "unsubscribed",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"unsubscribed_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string",
			"maxLength": 255
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/clicked/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero email clicked",
	"self": {
		"vendor": "com.getvero",
		"name": "clicked",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"clicked_at": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"user_agent": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"message_id": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"type": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"event": {
			"type": "object",
			"properties": {
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"triggered_at": {
					"type": ["string", "null"],
					"format": "date-time"
				},
				"data": {
					"type": ["object", "null"],
					"additionalProperties": true
				}
			}
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		},
		"campaign": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"type": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"subject": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"trigger-event": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"permalink": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"variation": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"tags": {
					"type": ["string", "null"],
					"maxLength": 255
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/created/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero user created",
	"self": {
		"vendor": "com.getvero",
		"name": "created",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"firstname": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"company": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"role": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"type": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/updated/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero user updated",
	"self": {
		"vendor": "com.getvero",
		"name": "updated",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"maxLength": 255
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		},
		"changes": {
			"type": "object",
			"properties": {
				"tags": {
					"type": "object",
					"properties": {
						"add": {
							"type": ["array", "null"],
							"items": [
								{
									"type": "string",
									"maxLength": 255
								}
							]
						},
						"remove": {
							"type": ["array", "null"],
							"items": [
								{
									"type": "string",
									"maxLength": 255
								}
							]
						}
					}
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/opened/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero email opened",
	"self": {
		"vendor": "com.getvero",
		"name": "opened",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"opened_at": {
			"type": "string",
			"format": "date-time"
		},
		"user_agent": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"message_id": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"type": {
			"type": "string",
			"maxLength": 255
		},
		"event": {
			"type": "object",
			"properties": {
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"triggered_at": {
					"type": ["string", "null"],
					"format": "date-time"
				},
				"data": {
					"type": ["object", "null"],
					"additionalProperties": true
				}
			}
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		},
		"campaign": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"type": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"subject": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"trigger-event": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"permalink": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"variation": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"tags": {
					"type": ["string", "null"],
					"maxLength": 255
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/sent/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero email sent",
	"self": {
		"vendor": "com.getvero",
		"name": "sent",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"sent_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string",
			"maxLength": 255
		},
		"event": {
			"type": "object",
			"properties": {
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"triggered_at": {
					"type": ["string", "null"],
					"format": "date-time"
				},
				"data": {
					"type": ["object", "null"],
					"additionalProperties": true
				}
			}
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		},
		"campaign": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"type": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"subject": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"trigger-event": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"permalink": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"variation": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"tags": {
					"type": ["string", "null"],
					"maxLength": 255
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.getvero/bounced/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Vero email bounced",
	"self": {
		"vendor": "com.getvero",
		"name": "bounced",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"bounced_at": {
			"type": "string",
			"format": "date-time"
		},
		"bounce_type": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"bounce_code": {
			"type": ["string", "null"],
			"maxLength": 64
		},
		"bounce_message": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"message_id": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"type": {
			"type": "string",
			"maxLength": 255
		},
		"event": {
			"type": "object",
			"properties": {
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"triggered_at": {
					"type": ["string", "null"],
					"format": "date-time"
				},
				"data": {
					"type": ["object", "null"],
					"additionalProperties": true
				}
			}
		},
		"user": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"email": {
					"type": ["string", "null"],
					"format": "email"
				}
			}
		},
		"campaign": {
			"type": "object",
			"properties": {
				"id": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"type": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"name": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"subject": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"trigger-event": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"permalink": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"variation": {
					"type": ["string", "null"],
					"maxLength": 255
				},
				"tags": {
					"type": ["string", "null"],
					"maxLength": 255
				}
			}
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.commands/command/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a Sauna command",
    "self": {
        "vendor": "com.snowplowanalytics.sauna.commands",
        "name": "command",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "envelope": {
            "$ref": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/instance-iglu-only/jsonschema/1-0-0#"
        },
        "command": {
            "$ref": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/instance-iglu-only/jsonschema/1-0-0#"
        }
    },
    "required": [
        "envelope",
        "command"
    ],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.commands/envelope/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a Sauna command's envelope",
    "self": {
        "vendor": "com.snowplowanalytics.sauna.commands",
        "name": "envelope",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "commandId": {
            "type": "string",
            "format": "uuid"
        },
        "whenCreated": {
            "type": "string",
            "format": "date-time"
        },
        "execution": {
            "type": "object",
            "properties": {
                "semantics": {
                    "enum": [
                        "AT_LEAST_ONCE"
                    ]
                },
                "timeToLive": {
                    "type": [
                        "integer",
                        "null"
                    ]
                }
            },
            "required": [
                "semantics",
                "timeToLive"
            ],
            "additionalProperties": false
        },
        "tags": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        }
    },
    "required": [
        "commandId",
        "whenCreated",
        "execution",
        "tags"
    ],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely.snowplow/optimizely_summary/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "com.optimizely.snowplow",
    "name" : "optimizely_summary",
    "format" : "jsonschema",
    "version" : "1-0-0"
  },

  "type": "object",
  "properties": {
    "activeExperimentId": {
      "type": "string",
      "maxLength": 12
    },
    "variation": {
      "type": "string",
      "maxLength": 12
    },
    "conditional": {
      "type": "boolean"
    },
    "manual": {
      "type": "boolean"
    },
    "name": {
      "type": "string",
      "maxLength": 256

    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/consent_withdrawn/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for consent withdrawn",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "consent_withdrawn",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"all": {
			"type": "boolean"
		}
	},
	"required": ["all"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/diagnostic_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a tracker error",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "diagnostic_error",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "message": {
      "description": "Message of the error.",
      "type": "string",
      "minLength": 0,
      "maxLength": 2048
    },
    "className": {
      "description": "ClassName where the error appeared.",
      "type": ["string", "null"],
      "minLength": 0,
      "maxLength": 1024
    },
    "stackTrace": {
      "description": "StackTrace of the error.",
      "type": ["string", "null"],
      "minLength": 0,
      "maxLength": 8192
    },
    "exceptionName": {
      "description": "Exception name involved in the error.",
      "type": ["string", "null"],
      "minLength": 0,
      "maxLength": 1024
    }
  },
  "required": ["message"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/shredded_type/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "New self-describing schema appeared in enriched event stream",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "shredded_type",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"schema": {
			"description": "Iglu URI",
			"type": "string",
			"pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
		},
		"location": {
			"description": "Enriched event property where schema appeared",
			"enum": ["UNSTRUCT_EVENT", "CONTEXTS", "DERIVED_CONTEXTS"]
		}
	},
	"required": ["schema", "location"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/geolocation_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "description": "Schema for client geolocation contexts",
        "self": {
                "vendor": "com.snowplowanalytics.snowplow",
                "name": "geolocation_context",
                "format": "jsonschema",
                "version": "1-0-0"
        },

        "type": "object",
        "properties": {
                "latitude": {
                        "type": "number",
                        "minimum": -90,
                        "maximum": 90
                },
                "longitude": {
                        "type": "number",
                        "minimum": -180,
                        "maximum": 180
                },
		"latitudeLongitudeAccuracy": {
			"type": "number"
		},
		"altitude": {
			"type": "number"
		},
		"altitudeAccuracy": {
			"type": "number"
		},
		"bearing": {
			"type": "number"
		},
		"speed": {
			"type": "number"
		}
        },
        "required": ["latitude", "longitude"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/geolocation_context/jsonschema/1-1-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for client geolocation contexts",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "geolocation_context",
		"format": "jsonschema",
		"version": "1-1-0"
	},

	"type": "object",
	"properties": {
		"latitude": {
			"type": "number",
			"minimum": -90,
			"maximum": 90
		},
		"longitude": {
			"type": "number",
			"minimum": -180,
			"maximum": 180
		},
		"latitudeLongitudeAccuracy": {
			"type": ["number", "null"]
		},
		"altitude": {
			"type": ["number", "null"]
		},
		"altitudeAccuracy": {
			"type": ["number", "null"]
		},
		"bearing": {
			"type": ["number", "null"]
		},
		"speed": {
			"type": ["number", "null"]
		},
		"timestamp": {
			"type": ["integer", "null"]
		}
	},
	"required": ["latitude", "longitude"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/screen_view/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a screen view event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "screen_view",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"name": {
			"type": "string"
		},
		"id": {
			"type": "string"
		}
	},
	"minProperties": 1,
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/add_to_cart/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an add-to-cart event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "add_to_cart",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"sku": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"category": {
			"type": "string"
		},
		"unitPrice": {
			"type": "number"
		},
		"quantity": {
			"type": "number"
		},
		"currency": {
			"type": "string"
		}
	},
	"required": ["sku", "quantity"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for custom contexts",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "contexts",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "array",

	"items": {

		"type": "object",

		"properties": {

			"schema": {
				"type": "string",
				"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[0-9]+-[0-9]+-[0-9]+$"
			},

			"data": {}
		},

		"required": ["schema", "data"],
		"additionalProperties": false
	},

	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for custom contexts",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "contexts",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "array",

	"items": {

		"type": "object",

		"properties": {

			"schema": {
				"type": "string",
				"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[0-9]+-[0-9]+-[0-9]+$"
			},

			"data": {}
		},

		"required": ["schema", "data"],
		"additionalProperties": false
	}
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/referer_parser/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for referer-parser customization enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "referer_parser",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"internalDomains": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": ["internalDomains"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/referer_parser/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for referer-parser customization enrichment",
    "self": {
      "vendor": "com.snowplowanalytics.snowplow",
      "name": "referer_parser",
      "format": "jsonschema",
      "version": "2-0-0"
    },
    "type": "object",
    "properties": {
      "vendor": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "enabled": {
        "type": "boolean"
      },
      "parameters": {
        "type": "object",
        "properties": {
          "internalDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "database": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": ["internalDomains", "database", "uri"],
        "additionalProperties": false
      }
    },
    "required": ["name", "vendor", "enabled", "parameters"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/cookie_extractor_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for cookie extractor enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "cookie_extractor_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"cookies": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": ["cookies"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/identify/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.snowplowanalytics.snowplow",
                "name": "identify",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A Snowplow identify event.",
        "type": "object",
        "properties": {
                "id": {
                        "description": "The user identifier.",
                        "type": ["string", "null"],
                        "maxLength": 256
                },
                "email": {
                        "description": "The user email address.",
                        "type": ["string", "null"],
                        "maxLength": 256
                }

        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/elasticsearch_enriched_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an event which has been NOT_READYfully enriched and stored in Elasticsearch",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "elasticsearch_enriched_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"app_id": {
			"type": "string"
		},
		"platform": {
			"type": "string"
		},
		"etl_tstamp": {
			"type": "string"
		},
		"collector_tstamp": {
			"type": "string"
		},
		"dvce_tstamp": {
			"type": "string"
		},
		"event": {
			"type": "string"
		},
		"event_id": {
			"type": "string"
		},
		"txn_id": {
			"type": "integer"
		},
		"name_tracker": {
			"type": "string"
		},
		"v_tracker": {
			"type": "string"
		},
		"v_collector": {
			"type": "string"
		},
		"v_etl": {
			"type": "string"
		},
		"user_id": {
			"type": "string"
		},
		"user_ipaddress": {
			"type": "string"
		},
		"user_fingerprint": {
			"type": "string"
		},
		"domain_userid": {
			"type": "string"
		},
		"domain_sessionidx": {
			"type": "integer"
		},
		"network_userid": {
			"type": "string"
		},
		"geo_country": {
			"type": "string"
		},
		"geo_region": {
			"type": "string"
		},
		"geo_city": {
			"type": "string"
		},
		"geo_zipcode": {
			"type": "string"
		},
		"geo_latitude": {
			"type": "number"
		},
		"geo_longitude": {
			"type": "number"
		},
		"geo_region_name": {
			"type": "string"
		},
		"geo_location": {
			"type": "string",
			"pattern": "-?[0-9]+(?:\\.[0-9+])?,-?[0-9]+(?:\\.[0-9+])?"
		},
		"ip_isp": {
			"type": "string"
		},
		"ip_org": {
			"type": "string"
		},
		"ip_domain": {
			"type": "string"
		},
		"ip_netspeed": {
			"type": "string"
		},
		"page_url": {
			"type": "string"
		},
		"page_title": {
			"type": "string"
		},
		"page_referrer": {
			"type": "string"
		},
		"page_urlscheme": {
			"type": "string"
		},
		"page_urlhost": {
			"type": "string"
		},
		"page_urlport": {
			"type": "integer"
		},
		"page_urlpath": {
			"type": "string"
		},
		"page_urlquery": {
			"type": "string"
		},
		"page_urlfragment": {
			"type": "string"
		},
		"refr_urlscheme": {
			"type": "string"
		},
		"refr_urlhost": {
			"type": "string"
		},
		"refr_urlport": {
			"type": "integer"
		},
		"refr_urlpath": {
			"type": "string"
		},
		"refr_urlquery": {
			"type": "string"
		},
		"refr_urlfragment": {
			"type": "string"
		},
		"refr_medium": {
			"type": "string"
		},
		"refr_source": {
			"type": "string"
		},
		"refr_term": {
			"type": "string"
		},
		"mkt_medium": {
			"type": "string"
		},
		"mkt_source": {
			"type": "string"
		},
		"mkt_term": {
			"type": "string"
		},
		"mkt_content": {
			"type": "string"
		},
		"mkt_campaign": {
			"type": "string"
		},
		"se_category": {
			"type": "string"
		},
		"se_action": {
			"type": "string"
		},
		"se_label": {
			"type": "string"
		},
		"se_property": {
			"type": "string"
		},
		"se_value": {
			"type": "string"
		},
		"tr_orderid": {
			"type": "string"
		},
		"tr_affiliation": {
			"type": "string"
		},
		"tr_total": {
			"type": "number"
		},
		"tr_tax": {
			"type": "number"
		},
		"tr_shipping": {
			"type": "number"
		},
		"tr_city": {
			"type": "string"
		},
		"tr_state": {
			"type": "string"
		},
		"tr_country": {
			"type": "string"
		},
		"ti_orderid": {
			"type": "string"
		},
		"ti_sku": {
			"type": "string"
		},
		"ti_name": {
			"type": "string"
		},
		"ti_category": {
			"type": "string"
		},
		"ti_price": {
			"type": "number"
		},
		"ti_quantity": {
			"type": "integer"
		},
		"pp_xoffset_min": {
			"type": "integer"
		},
		"pp_xoffset_max": {
			"type": "integer"
		},
		"pp_yoffset_min": {
			"type": "integer"
		},
		"pp_yoffset_max": {
			"type": "integer"
		},
		"useragent": {
			"type": "string"
		},
		"br_name": {
			"type": "string"
		},
		"br_family": {
			"type": "string"
		},
		"br_version": {
			"type": "string"
		},
		"br_type": {
			"type": "string"
		},
		"br_renderengine": {
			"type": "string"
		},
		"br_lang": {
			"type": "string"
		},
		"br_features_pdf": {
			"type": "boolean"
		},
		"br_features_flash": {
			"type": "boolean"
		},
		"br_features_java": {
			"type": "boolean"
		},
		"br_features_director": {
			"type": "boolean"
		},
		"br_features_quicktime": {
			"type": "boolean"
		},
		"br_features_realplayer": {
			"type": "boolean"
		},
		"br_features_windowsmedia": {
			"type": "boolean"
		},
		"br_features_gears": {
			"type": "boolean"
		},
		"br_features_silverlight": {
			"type": "boolean"
		},
		"br_cookies": {
			"type": "boolean"
		},
		"br_colordepth": {
			"type": "string"
		},
		"br_viewwidth": {
			"type": "integer"
		},
		"br_viewheight": {
			"type": "integer"
		},
		"os_name": {
			"type": "string"
		},
		"os_family": {
			"type": "string"
		},
		"os_manufacturer": {
			"type": "string"
		},
		"os_timezone": {
			"type": "string"
		},
		"dvce_type": {
			"type": "string"
		},
		"dvce_ismobile": {
			"type": "boolean"
		},
		"dvce_screenwidth": {
			"type": "integer"
		},
		"dvce_screenheight": {
			"type": "integer"
		},
		"doc_charset": {
			"type": "string"
		},
		"doc_width": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		}
	},
	"patternProperties": {
		"^contexts_.*": {
			"type": "array"
		},
		"^unstruct_event_.*": {}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/elasticsearch_enriched_event/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an event which has been NOT_READYfully enriched and stored in Elasticsearch",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "elasticsearch_enriched_event",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"app_id": {
			"type": "string"
		},
		"platform": {
			"type": "string"
		},
		"etl_tstamp": {
			"type": "string"
		},
		"collector_tstamp": {
			"type": "string"
		},
		"dvce_tstamp": {
			"type": "string"
		},
		"event": {
			"type": "string"
		},
		"event_id": {
			"type": "string"
		},
		"txn_id": {
			"type": "integer"
		},
		"name_tracker": {
			"type": "string"
		},
		"v_tracker": {
			"type": "string"
		},
		"v_collector": {
			"type": "string"
		},
		"v_etl": {
			"type": "string"
		},
		"user_id": {
			"type": "string"
		},
		"user_ipaddress": {
			"type": "string"
		},
		"user_fingerprint": {
			"type": "string"
		},
		"domain_userid": {
			"type": "string"
		},
		"domain_sessionidx": {
			"type": "integer"
		},
		"network_userid": {
			"type": "string"
		},
		"geo_country": {
			"type": "string"
		},
		"geo_region": {
			"type": "string"
		},
		"geo_city": {
			"type": "string"
		},
		"geo_zipcode": {
			"type": "string"
		},
		"geo_latitude": {
			"type": "number"
		},
		"geo_longitude": {
			"type": "number"
		},
		"geo_region_name": {
			"type": "string"
		},
		"geo_location": {
			"type": "string",
			"pattern": "-?[0-9]+(?:\\.[0-9+])?,-?[0-9]+(?:\\.[0-9+])?"
		},
		"ip_isp": {
			"type": "string"
		},
		"ip_org": {
			"type": "string"
		},
		"ip_domain": {
			"type": "string"
		},
		"ip_netspeed": {
			"type": "string"
		},
		"page_url": {
			"type": "string"
		},
		"page_title": {
			"type": "string"
		},
		"page_referrer": {
			"type": "string"
		},
		"page_urlscheme": {
			"type": "string"
		},
		"page_urlhost": {
			"type": "string"
		},
		"page_urlport": {
			"type": "integer"
		},
		"page_urlpath": {
			"type": "string"
		},
		"page_urlquery": {
			"type": "string"
		},
		"page_urlfragment": {
			"type": "string"
		},
		"refr_urlscheme": {
			"type": "string"
		},
		"refr_urlhost": {
			"type": "string"
		},
		"refr_urlport": {
			"type": "integer"
		},
		"refr_urlpath": {
			"type": "string"
		},
		"refr_urlquery": {
			"type": "string"
		},
		"refr_urlfragment": {
			"type": "string"
		},
		"refr_medium": {
			"type": "string"
		},
		"refr_source": {
			"type": "string"
		},
		"refr_term": {
			"type": "string"
		},
		"mkt_medium": {
			"type": "string"
		},
		"mkt_source": {
			"type": "string"
		},
		"mkt_term": {
			"type": "string"
		},
		"mkt_content": {
			"type": "string"
		},
		"mkt_campaign": {
			"type": "string"
		},
		"se_category": {
			"type": "string"
		},
		"se_action": {
			"type": "string"
		},
		"se_label": {
			"type": "string"
		},
		"se_property": {
			"type": "string"
		},
		"se_value": {
			"type": "string"
		},
		"tr_orderid": {
			"type": "string"
		},
		"tr_affiliation": {
			"type": "string"
		},
		"tr_total": {
			"type": "number"
		},
		"tr_tax": {
			"type": "number"
		},
		"tr_shipping": {
			"type": "number"
		},
		"tr_city": {
			"type": "string"
		},
		"tr_state": {
			"type": "string"
		},
		"tr_country": {
			"type": "string"
		},
		"ti_orderid": {
			"type": "string"
		},
		"ti_sku": {
			"type": "string"
		},
		"ti_name": {
			"type": "string"
		},
		"ti_category": {
			"type": "string"
		},
		"ti_price": {
			"type": "number"
		},
		"ti_quantity": {
			"type": "integer"
		},
		"pp_xoffset_min": {
			"type": "integer"
		},
		"pp_xoffset_max": {
			"type": "integer"
		},
		"pp_yoffset_min": {
			"type": "integer"
		},
		"pp_yoffset_max": {
			"type": "integer"
		},
		"useragent": {
			"type": "string"
		},
		"br_name": {
			"type": "string"
		},
		"br_family": {
			"type": "string"
		},
		"br_version": {
			"type": "string"
		},
		"br_type": {
			"type": "string"
		},
		"br_renderengine": {
			"type": "string"
		},
		"br_lang": {
			"type": "string"
		},
		"br_features_pdf": {
			"type": "boolean"
		},
		"br_features_flash": {
			"type": "boolean"
		},
		"br_features_java": {
			"type": "boolean"
		},
		"br_features_director": {
			"type": "boolean"
		},
		"br_features_quicktime": {
			"type": "boolean"
		},
		"br_features_realplayer": {
			"type": "boolean"
		},
		"br_features_windowsmedia": {
			"type": "boolean"
		},
		"br_features_gears": {
			"type": "boolean"
		},
		"br_features_silverlight": {
			"type": "boolean"
		},
		"br_cookies": {
			"type": "boolean"
		},
		"br_colordepth": {
			"type": "string"
		},
		"br_viewwidth": {
			"type": "integer"
		},
		"br_viewheight": {
			"type": "integer"
		},
		"os_name": {
			"type": "string"
		},
		"os_family": {
			"type": "string"
		},
		"os_manufacturer": {
			"type": "string"
		},
		"os_timezone": {
			"type": "string"
		},
		"dvce_type": {
			"type": "string"
		},
		"dvce_ismobile": {
			"type": "boolean"
		},
		"dvce_screenwidth": {
			"type": "integer"
		},
		"dvce_screenheight": {
			"type": "integer"
		},
		"doc_charset": {
			"type": "string"
		},
		"doc_width": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"tr_currency": {
			"type": "string"
		},
		"tr_total_base": {
			"type": "number"
		},
		"tr_tax_base": {
			"type": "number"
		},
		"tr_shipping_base": {
			"type": "number"
		},
		"ti_currency": {
			"type": "string"
		},
		"ti_price_base": {
			"type": "number"
		},
		"base_currency": {
			"type": "string"
		},
		"geo_timezone": {
			"type": "string"
		},
		"mkt_clickid": {
			"type": "string"
		},
		"mkt_network": {
			"type": "string"
		},
		"etl_tags": {
			"type": "string"
		},
		"dvce_sent_tstamp": {
			"type": "string"
		},
		"refr_domain_userid": {
			"type": "string"
		},
		"refr_dvce_tstamp": {
			"type": "string"
		},
		"session_id": {
			"type": "string"
		}
	},
	"patternProperties": {
		"^contexts_.*": {
			"type": "array"
		},
		"^unstruct_event_.*": {}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/elasticsearch_enriched_event/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an event which has been NOT_READYfully enriched and stored in Elasticsearch",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "elasticsearch_enriched_event",
		"format": "jsonschema",
		"version": "2-0-0"
	},

	"type": "object",
	"properties": {
		"app_id": {
			"type": "string"
		},
		"platform": {
			"type": "string"
		},
		"etl_tstamp": {
			"type": "string",
			"pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}\\.[0-9]{3}$"
		},
		"collector_tstamp": {
			"type": "string",
			"pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}\\.[0-9]{3}$"
		},
		"dvce_tstamp": {
			"type": "string",
			"pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}\\.[0-9]{3}$"
		},
		"event": {
			"type": "string"
		},
		"event_id": {
			"type": "string"
		},
		"txn_id": {
			"type": "integer"
		},
		"name_tracker": {
			"type": "string"
		},
		"v_tracker": {
			"type": "string"
		},
		"v_collector": {
			"type": "string"
		},
		"v_etl": {
			"type": "string"
		},
		"user_id": {
			"type": "string"
		},
		"user_ipaddress": {
			"type": "string"
		},
		"user_fingerprint": {
			"type": "string"
		},
		"domain_userid": {
			"type": "string"
		},
		"domain_sessionidx": {
			"type": "integer"
		},
		"network_userid": {
			"type": "string"
		},
		"geo_country": {
			"type": "string"
		},
		"geo_region": {
			"type": "string"
		},
		"geo_city": {
			"type": "string"
		},
		"geo_zipcode": {
			"type": "string"
		},
		"geo_latitude": {
			"type": "number"
		},
		"geo_longitude": {
			"type": "number"
		},
		"geo_region_name": {
			"type": "string"
		},
		"geo_location": {
			"type": "string",
			"pattern": "-?[0-9]+(?:\\.[0-9+])?,-?[0-9]+(?:\\.[0-9+])?"
		},
		"ip_isp": {
			"type": "string"
		},
		"ip_org": {
			"type": "string"
		},
		"ip_domain": {
			"type": "string"
		},
		"ip_netspeed": {
			"type": "string"
		},
		"page_url": {
			"type": "string"
		},
		"page_title": {
			"type": "string"
		},
		"page_referrer": {
			"type": "string"
		},
		"page_urlscheme": {
			"type": "string"
		},
		"page_urlhost": {
			"type": "string"
		},
		"page_urlport": {
			"type": "integer"
		},
		"page_urlpath": {
			"type": "string"
		},
		"page_urlquery": {
			"type": "string"
		},
		"page_urlfragment": {
			"type": "string"
		},
		"refr_urlscheme": {
			"type": "string"
		},
		"refr_urlhost": {
			"type": "string"
		},
		"refr_urlport": {
			"type": "integer"
		},
		"refr_urlpath": {
			"type": "string"
		},
		"refr_urlquery": {
			"type": "string"
		},
		"refr_urlfragment": {
			"type": "string"
		},
		"refr_medium": {
			"type": "string"
		},
		"refr_source": {
			"type": "string"
		},
		"refr_term": {
			"type": "string"
		},
		"mkt_medium": {
			"type": "string"
		},
		"mkt_source": {
			"type": "string"
		},
		"mkt_term": {
			"type": "string"
		},
		"mkt_content": {
			"type": "string"
		},
		"mkt_campaign": {
			"type": "string"
		},
		"se_category": {
			"type": "string"
		},
		"se_action": {
			"type": "string"
		},
		"se_label": {
			"type": "string"
		},
		"se_property": {
			"type": "string"
		},
		"se_value": {
			"type": "string"
		},
		"tr_orderid": {
			"type": "string"
		},
		"tr_affiliation": {
			"type": "string"
		},
		"tr_total": {
			"type": "number"
		},
		"tr_tax": {
			"type": "number"
		},
		"tr_shipping": {
			"type": "number"
		},
		"tr_city": {
			"type": "string"
		},
		"tr_state": {
			"type": "string"
		},
		"tr_country": {
			"type": "string"
		},
		"ti_orderid": {
			"type": "string"
		},
		"ti_sku": {
			"type": "string"
		},
		"ti_name": {
			"type": "string"
		},
		"ti_category": {
			"type": "string"
		},
		"ti_price": {
			"type": "number"
		},
		"ti_quantity": {
			"type": "integer"
		},
		"pp_xoffset_min": {
			"type": "integer"
		},
		"pp_xoffset_max": {
			"type": "integer"
		},
		"pp_yoffset_min": {
			"type": "integer"
		},
		"pp_yoffset_max": {
			"type": "integer"
		},
		"useragent": {
			"type": "string"
		},
		"br_name": {
			"type": "string"
		},
		"br_family": {
			"type": "string"
		},
		"br_version": {
			"type": "string"
		},
		"br_type": {
			"type": "string"
		},
		"br_renderengine": {
			"type": "string"
		},
		"br_lang": {
			"type": "string"
		},
		"br_features_pdf": {
			"type": "boolean"
		},
		"br_features_flash": {
			"type": "boolean"
		},
		"br_features_java": {
			"type": "boolean"
		},
		"br_features_director": {
			"type": "boolean"
		},
		"br_features_quicktime": {
			"type": "boolean"
		},
		"br_features_realplayer": {
			"type": "boolean"
		},
		"br_features_windowsmedia": {
			"type": "boolean"
		},
		"br_features_gears": {
			"type": "boolean"
		},
		"br_features_silverlight": {
			"type": "boolean"
		},
		"br_cookies": {
			"type": "boolean"
		},
		"br_colordepth": {
			"type": "string"
		},
		"br_viewwidth": {
			"type": "integer"
		},
		"br_viewheight": {
			"type": "integer"
		},
		"os_name": {
			"type": "string"
		},
		"os_family": {
			"type": "string"
		},
		"os_manufacturer": {
			"type": "string"
		},
		"os_timezone": {
			"type": "string"
		},
		"dvce_type": {
			"type": "string"
		},
		"dvce_ismobile": {
			"type": "boolean"
		},
		"dvce_screenwidth": {
			"type": "integer"
		},
		"dvce_screenheight": {
			"type": "integer"
		},
		"doc_charset": {
			"type": "string"
		},
		"doc_width": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"doc_height": {
			"type": "integer"
		},
		"tr_currency": {
			"type": "string"
		},
		"tr_total_base": {
			"type": "number"
		},
		"tr_tax_base": {
			"type": "number"
		},
		"tr_shipping_base": {
			"type": "number"
		},
		"ti_currency": {
			"type": "string"
		},
		"ti_price_base": {
			"type": "number"
		},
		"base_currency": {
			"type": "string"
		},
		"geo_timezone": {
			"type": "string"
		},
		"mkt_clickid": {
			"type": "string"
		},
		"mkt_network": {
			"type": "string"
		},
		"etl_tags": {
			"type": "string"
		},
		"dvce_sent_tstamp": {
			"type": "string"
		},
		"refr_domain_userid": {
			"type": "string"
		},
		"refr_dvce_tstamp": {
			"type": "string"
		},
		"session_id": {
			"type": "string"
		}
	},
	"patternProperties": {
		"^contexts_.*": {
			"type": "array"
		},
		"^unstruct_event_.*": {}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ua_parser_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for useragent context generated by ua-parser enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "ua_parser_context",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"useragentFamily": {
			"type": "string"
		},
		"useragentMajor": {
			"type": ["string", "null"]
		},
		"useragentMinor": {
			"type": ["string", "null"]
		},
		"useragentPatch": {
			"type": ["string", "null"]
		},
		"useragentVersion": {
			"type": "string"
		},
		"osFamily": {
			"type": "string"
		},
		"osMajor": {
			"type": ["string", "null"]
		},
		"osMinor": {
			"type": ["string", "null"]
		},
		"osPatch": {
			"type": ["string", "null"]
		},
		"osPatchMinor": {
			"type": ["string", "null"]
		},
		"osVersion": {
			"type": "string"
		},
		"deviceFamily": {
			"type": "string"
		}
	},
	"required": ["useragentFamily", "useragentMajor", "useragentMinor", "osFamily", "deviceFamily"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/desktop_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for context related to a desktop computer",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "desktop_context",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"osType": {
			"type": "string"
		},
		"osVersion": {
			"type": "string"
		},
		"osServicePack": {
			"type": "string"
		},
		"osIs64Bit": {
			"type": "boolean"
		},
		"deviceManufacturer": {
			"type": "string"
		},
		"deviceModel": {
			"type": "string"
		},
		"deviceProcessorCount": {
			"type": "number"
		}
	},
	"required": ["osType", "osVersion"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/uri_redirect/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a URI redirect through a Snowplow event collector",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "uri_redirect",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"uri": {
			"type": "string",
			"format": "uri",
			"maxLength": 8192
		}
	},
	"required": ["uri"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/gdpr/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a web page context",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow",
        "name": "gdpr",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "basisForProcessing": {
          "type": "string",
          "enum": ["consent", "contract", "legal_obligation", "vital_interests", "public_task", "legitimate_interests"],
          "description": "GDPR basis for data collection & processing"
        },
        "documentId": {
          "type": ["string", "null"],
          "maxLength": 255,
          "description": "ID for document detailing basis for processing"
        },
        "documentVersion": {
          "type": ["string", "null"],
          "maxLength": 16,
          "description": "Version of document detailing basis for processing"
        },
        "documentDescription": {
          "type": ["string", "null"],
          "maxLength": 4096,
          "description": "Description of document detailing basis for processing"
        }
    },
    "required": ["basisForProcessing"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/payload_data/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			}
		},
		"required": ["tv", "p", "e"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/payload_data/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			}
		},
		"required": ["tv", "p", "e"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/payload_data/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-2"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			}
		},
		"required": ["tv", "p", "e"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/payload_data/jsonschema/1-0-3', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-3"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			},
			"stm": {
				"type": "string"
			},
			"sid": {
				"type": "string"
			}
		},
		"required": ["tv", "p", "e"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/payload_data/jsonschema/1-0-4', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-4"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			},
			"stm": {
				"type": "string"
			},
			"sid": {
				"type": "string"
			},
			"ttm": {
				"type": "string"
			}
		},
		"required": ["tv", "p", "e"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/payload_data/jsonschema/1-0-5', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-5"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"ak": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"unqid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			},
			"stm": {
				"type": "string"
			},
			"ttm": {
				"type": "string"
			}
		},
		"required": ["tv", "p", "e"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/payload_data/jsonschema/1-0-6', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-6"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			},
			"stm": {
				"type": "string"
			},
			"sid": {
				"type": "string"
			},
			"ttm": {
				"type": "string"
			},"ak": {
				"type": "string"
			}
		},
		"required": ["tv", "p", "e"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/social_interaction/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a social interaction event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "social_interaction",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"action": {
			"type": "string"
		},
		"network": {
			"type": "string"
		},
		"target": {
			"type": "string"
		}
	},
	"required": ["action", "network"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/duplicate/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Context containing first duplicated event id",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow",
        "name": "duplicate",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "originalEventId": {
            "type": "string",
            "format": "uuid"
        }
    },
    "required": ["originalEventId"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/media_player_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a media event",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "media_player_event",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "type": {
      "type": "string",
      "description": "The event fired by the media player",
      "maxLength": 255
    },
    "label": {
      "type": [
        "string",
        "null"
      ],
      "description": "A custom identifier",
      "maxLength": 4096
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/atomic/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an atomic canonical Snowplow event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "atomic",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"app_id": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"platform": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"etl_tstamp": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"collector_tstamp": {
			"type": "string",
			"format": "date-time"
		},
		"dvce_created_tstamp": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"event": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"event_id": {
			"type": "string",
			"maxLength": 36
		},
		"txn_id": {
			"type": ["integer", "null"]
		},
		"name_tracker": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"v_tracker": {
			"type": ["string", "null"],
			"maxLength": 100
		},
		"v_collector": {
			"type": "string",
			"maxLength": 100
		},
		"v_etl": {
			"type": "string",
			"maxLength": 100
		},
		"user_id": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"user_ipaddress": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"user_fingerprint": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"domain_userid": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"domain_sessionidx": {
			"type": ["integer", "null"]
		},
		"network_userid": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"geo_country": {
			"type": ["string", "null"],
			"maxLength": 2
		},
		"geo_region": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"geo_city": {
			"type": ["string", "null"],
			"maxLength": 75
		},
		"geo_zipcode": {
			"type": ["string", "null"],
			"maxLength": 15
		},
		"geo_latitude": {
			"type": ["number", "null"]
		},
		"geo_longitude": {
			"type": ["number", "null"]
		},
		"geo_region_name": {
			"type": ["string", "null"],
			"maxLength": 100
		},
		"ip_isp": {
			"type": ["string", "null"],
			"maxLength": 100
		},
		"ip_organization": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"ip_domain": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"ip_netspeed": {
			"type": ["string", "null"],
			"maxLength": 100
		},
		"page_url": {
			"type": ["string", "null"],
			"maxLength": 4096
		},
		"page_title": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"page_referrer": {
			"type": ["string", "null"],
			"maxLength": 4096
		},
		"page_urlscheme": {
			"type": ["string", "null"],
			"maxLength": 16
		},
		"page_urlhost": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"page_urlport": {
			"type": ["integer", "null"]
		},
		"page_urlpath": {
			"type": ["string", "null"],
			"maxLength": 3000
		},
		"page_urlquery": {
			"type": ["string", "null"],
			"maxLength": 6000
		},
		"page_urlfragment": {
			"type": ["string", "null"],
			"maxLength": 3000
		},
		"refr_urlscheme": {
			"type": ["string", "null"],
			"maxLength": 16
		},
		"refr_urlhost": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"refr_urlport": {
			"type": ["integer", "null"]
		},
		"refr_urlpath": {
			"type": ["string", "null"],
			"maxLength": 6000
		},
		"refr_urlquery": {
			"type": ["string", "null"],
			"maxLength": 6000
		},
		"refr_urlfragment": {
			"type": ["string", "null"],
			"maxLength": 3000
		},
		"refr_medium": {
			"type": ["string", "null"],
			"maxLength": 25
		},
		"refr_source": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"refr_term": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"mkt_medium": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"mkt_source": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"mkt_term": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"mkt_content": {
			"type": ["string", "null"],
			"maxLength": 500
		},
		"mkt_campaign": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"se_category": {
			"type": ["string", "null"],
			"maxLength": 1000
		},
		"se_action": {
			"type": ["string", "null"],
			"maxLength": 1000
		},
		"se_label": {
			"type": ["string", "null"],
			"maxLength": 4096
		},
		"se_property": {
			"type": ["string", "null"],
			"maxLength": 1000
		},
		"se_value": {
			"type": ["number", "null"]
		},
		"tr_orderid": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"tr_affiliation": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"tr_total": {
			"type": ["number", "null"]
		},
		"tr_tax": {
			"type": ["number", "null"]
		},
		"tr_shipping": {
			"type": ["number", "null"]
		},
		"tr_city": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"tr_state": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"tr_country": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"ti_orderid": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"ti_sku": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"ti_name": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"ti_category": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"ti_price": {
			"type": ["number", "null"]
		},
		"ti_quantity": {
			"type": ["integer", "null"]
		},
		"pp_xoffset_min": {
			"type": ["integer", "null"]
		},
		"pp_xoffset_max": {
			"type": ["integer", "null"]
		},
		"pp_yoffset_min": {
			"type": ["integer", "null"]
		},
		"pp_yoffset_max": {
			"type": ["integer", "null"]
		},
		"useragent": {
			"type": ["string", "null"],
			"maxLength": 1000
		},
		"br_name": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"br_family": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"br_version": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"br_type": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"br_renderengine": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"br_lang": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"br_features_pdf": {
			"type": ["boolean", "null"]
		},
		"br_features_flash": {
			"type": ["boolean", "null"]
		},
		"br_features_java": {
			"type": ["boolean", "null"]
		},
		"br_features_director": {
			"type": ["boolean", "null"]
		},
		"br_features_quicktime": {
			"type": ["boolean", "null"]
		},
		"br_features_realplayer": {
			"type": ["boolean", "null"]
		},
		"br_features_windowsmedia": {
			"type": ["boolean", "null"]
		},
		"br_features_gears": {
			"type": ["boolean", "null"]
		},
		"br_features_silverlight": {
			"type": ["boolean", "null"]
		},
		"br_cookies": {
			"type": ["boolean", "null"]
		},
		"br_colordepth": {
			"type": ["string", "null"],
			"maxLength": 12
		},
		"br_viewwidth": {
			"type": ["integer", "null"]
		},
		"br_viewheight": {
			"type": ["integer", "null"]
		},
		"os_name": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"os_family": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"os_manufacturer": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"os_timezone": {
			"type": ["string", "null"],
			"maxLength": 255
		},
		"dvce_type": {
			"type": ["string", "null"],
			"maxLength": 50
		},
		"dvce_ismobile": {
			"type": ["boolean", "null"]
		},
		"dvce_screenwidth": {
			"type": ["integer", "null"]
		},
		"dvce_screenheight": {
			"type": ["integer", "null"]
		},
		"doc_charset": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"doc_width": {
			"type": ["integer", "null"]
		},
		"doc_height": {
			"type": ["integer", "null"]
		},
		"tr_currency": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"tr_total_base": {
			"type": ["number", "null"]
		},
		"tr_tax_base": {
			"type": ["number", "null"]
		},
		"tr_shipping_base": {
			"type": ["number", "null"]
		},
		"ti_currency": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"ti_price_base": {
			"type": ["number", "null"]
		},
		"base_currency": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"geo_timezone": {
			"type": ["string", "null"],
			"maxLength": 64
		},
		"mkt_clickid": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"mkt_network": {
			"type": ["string", "null"],
			"maxLength": 64
		},
		"etl_tags": {
			"type": ["string", "null"],
			"maxLength": 500
		},
		"dvce_sent_tstamp": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"refr_domain_userid": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"refr_dvce_tstamp": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"domain_sessionid": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"derived_tstamp": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"event_vendor": {
			"type": ["string", "null"],
			"maxLength": 1000
		},
		"event_name": {
			"type": ["string", "null"],
			"maxLength": 1000
		},
		"event_format": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"event_version": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"event_fingerprint": {
			"type": ["string", "null"],
			"maxLength": 128
		},
		"true_tstamp": {
			"type": ["string", "null"],
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/submit_form/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a form submission event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "submit_form",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"formId": {
			"description": "The id of the form",
			"type": "string",
			"minLength": 0,
			"maxLength": 4096
		},
		"formClasses": {
			"description": "An array of the classes on the form",
			"type": "array",
			"items": {
				"description": "A class on the form",
				"type": "string",
				"minLength": 0,
				"maxLength": 4096
			}
		},
		"elements": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"description": "The name of the element within the form",
						"type": "string",
						"minLength": 0,
						"maxLength": 65535
					},
					"value": {
						"description": "The value of the element when submitted",
						"type": ["string", "null"],
						"minLength": 0,
						"maxLength": 65535
					},
					"nodeName": {
						"description": "The node type of the element",
						"type": "string",
						"enum": ["INPUT", "TEXTAREA", "SELECT"]
					},
					"type": {
						"description": "The type of input element",
						"type": ["string", "null"],
						"enum": ["button", "checkbox", "color", "date", "datetime", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]
					}
				},
				"required": ["name", "value", "nodeName"],
				"additionalProperties": false
			}
		}
	},
	"required": ["formId"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ua_parser_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for configuration of ua-parser enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "ua_parser_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"maxProperties": 0
		}
	},
	"required": ["name", "vendor", "enabled"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ua_parser_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for configuration of ua-parser enrichment",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow",
        "name": "ua_parser_config",
        "format": "jsonschema",
        "version": "1-0-1"
    },

    "type": "object",
    "properties": {
        "vendor": {
            "type": "string"
        },
        "name": {
            "type": "string"
        },
        "enabled": {
            "type": "boolean"
        },
        "parameters": {
            "type": "object",
            "properties": {
                "database": {
                    "type": "string"
                },
                "uri": {
                    "type": "string",
                    "format": "uri"
                }
            },
            "additionalProperties": false
        }
    },
    "required": ["name", "vendor", "enabled"],
    "additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/parent_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Context containing ID of parent event (useful for annotating events derived from other events)",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow",
        "name": "parent_event",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "parentEventId": {
            "type": "string",
            "format": "uuid"
        }
    },
    "required": ["parentEventId"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/client_session/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a client-generated user session",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "client_session",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"userId": {
			"type": "string",
			"pattern": "^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$|^[0-9a-f]{16}$"
		},
		"sessionId": {
			"type": "string",
			"format": "uuid"
		},
		"sessionIndex": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647
		},
		"previousSessionId": {
			"type": [
				"null",
				"string"
			],
			"format": "uuid"
		},
		"storageMechanism": {
			"enum": [ "SQLITE", "COOKIE_1", "COOKIE_3", "LOCAL_STORAGE", "FLASH_LSO" ]
		}
	},
	"required": [ "userId", "sessionId", "sessionIndex", "previousSessionId", "storageMechanism" ],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/client_session/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a client-generated user session",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "client_session",
		"format": "jsonschema",
		"version": "1-0-1"
	},
	"type": "object",
	"properties": {
		"userId": {
			"type": "string",
			"pattern": "^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$|^[0-9a-f]{16}$",
			"maxLength": 36,
			"description": "An identifier for the user of the session"
		},
		"sessionId": {
			"type": "string",
			"format": "uuid",
			"description": "An identifier for the session"
		},
		"sessionIndex": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647,
			"description": "The index of the current session for this user"
		},
		"previousSessionId": {
			"type": [
				"null",
				"string"
			],
			"format": "uuid",
			"description": "The previous session identifier for this user"
		},
		"storageMechanism": {
			"type": "string",
			"enum": [ "SQLITE", "COOKIE_1", "COOKIE_3", "LOCAL_STORAGE", "FLASH_LSO" ],
			"description": "The mechanism that the session information has been stored on the device"
		},
		"firstEventId": {
			"type": [
				"null",
				"string"
			],
			"format": "uuid",
			"description": "The optional identifier of the first event id for this session"
		}
	},
	"required": [ "userId", "sessionId", "sessionIndex", "previousSessionId", "storageMechanism" ],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/client_session/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a client-generated user session",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "client_session",
		"format": "jsonschema",
		"version": "1-0-2"
	},
	"type": "object",
	"properties": {
		"userId": {
			"type": "string",
			"pattern": "^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$|^[0-9a-f]{16}$",
			"maxLength": 36,
			"description": "An identifier for the user of the session"
		},
		"sessionId": {
			"type": "string",
			"format": "uuid",
			"description": "An identifier for the session"
		},
		"sessionIndex": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647,
			"description": "The index of the current session for this user"
		},
		"eventIndex": {
			"type": [
				"null",
				"integer"
			],
			"minimum": 0,
			"maximum": 2147483647,
			"description": "Optional index of the current event in the session"
		},
		"previousSessionId": {
			"type": [
				"null",
				"string"
			],
			"format": "uuid",
			"description": "The previous session identifier for this user"
		},
		"storageMechanism": {
			"type": "string",
			"enum": [
				"SQLITE",
				"COOKIE_1",
				"COOKIE_3",
				"LOCAL_STORAGE",
				"FLASH_LSO"
			],
			"description": "The mechanism that the session information has been stored on the device"
		},
		"firstEventId": {
			"type": [
				"null",
				"string"
			],
			"format": "uuid",
			"description": "The optional identifier of the first event for this session"
		},
		"firstEventTimestamp": {
			"description": "Optional date-time timestamp of when the first event in the session was tracked",
			"type": [
				"null",
				"string"
			],
			"format": "date-time"
		}
	},
	"required": [
		"userId",
		"sessionId",
		"sessionIndex",
		"previousSessionId",
		"storageMechanism"
	],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/CollectorPayload/thrift/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"description": "Schema for a Snowplow collector payload",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "CollectorPayload",
		"format": "thrift",
		"version": "1-0-0"
	},

	"idl": "namespace java com.snowplowanalytics.snowplow.CollectorPayload.thrift.model1\\nstruct CollectorPayload {\\n31337: string schema\\n10: optional string querystring\\n20: string collector\\n30: string encoding\\n40: optional string hostname\\n50: i64 timestamp\\n60: string ipAddress\\n70: optional string userAgent\\n80: optional string refererUri\\n90: optional list<string> headers\\n100: optional string networkUserId\\n110: string path\\n120: optional string contentType\\n130: optional string body\\n}\\n"
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/recoveries/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an array of recovery scenarios",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "recoveries",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "array",
  "items": {
    "type": "object",
    "description": "Recovery scenario sum type",
    "anyOf": [
      {
        "properties": {
          "name": {
            "description": "The PassThrough recovery scenario doesn't modify the payload",
            "enum": [
              "PassThrough"
            ]
          },
          "error": {
            "description": "Error filter used to discriminate the bad rows that will be affected by this recovery scenario",
            "type": "string"
          }
        },
        "required": [
          "name",
          "error"
        ],
        "additionalProperties": false
      },
      {
        "properties": {
          "name": {
            "description": "The RemoveFrom{Body,QueryString} will remove part of the payload",
            "enum": [
              "RemoveFromQueryString",
              "RemoveFromBody"
            ]
          },
          "error": {
            "description": "Error filter used to discriminate the bad rows that will be affected by this recovery scenario",
            "type": "string"
          },
          "toRemove": {
            "description": "String or regex to remove from the {body, query string}",
            "type": "string"
          }
        },
        "required": [
          "name",
          "error",
          "toRemove"
        ],
        "additionalProperties": false
      },
      {
        "properties": {
          "name": {
            "description": "The ReplaceIn{Body,QueryString} will replace part of the payload",
            "enum": [
              "ReplaceInQueryString",
              "ReplaceInBody"
            ]
          },
          "error": {
            "description": "Error filter used to discriminate the bad rows that will be affected by this recovery scenario",
            "type": "string"
          },
          "toReplace": {
            "description": "String or regex to replace in the {body, query string}",
            "type": "string"
          },
          "replacement": {
            "description": "Replacement for the {body, query string}",
            "type": "string"
          }
        },
        "required": [
          "name",
          "error",
          "toReplace",
          "replacement"
        ],
        "additionalProperties": false
      },
      {
        "properties": {
          "name": {
            "description": "The ReplaceInBase64FieldIn{Body,QueryString} will replace part of a base64-encoded field",
            "enum": [
              "ReplaceInBase64FieldInQueryString",
              "ReplaceInBase64FieldInBody"
            ]
          },
          "error": {
            "description": "Error filter used to discriminate the bad rows that will be affected by this recovery scenario",
            "type": "string"
          },
          "base64Field": {
            "description": "Name of the base64-encoded field to decoded and do a replacement in",
            "enum": [
              "ue_px",
              "cx"
            ]
          },
          "toReplace": {
            "description": "String or regex to replace in the specified base64-encoded field in the {body, query string}",
            "type": "string"
          },
          "replacement": {
            "description": "Replacement in the specified base64-encoded field in the {body, query string}",
            "type": "string"
          }
        },
        "required": [
          "name",
          "error",
          "toReplace",
          "replacement"
        ],
        "additionalProperties": false
      },
      {
        "properties": {
          "name": {
            "description": "Fallback for a custom recovery scenario",
            "type": "string"
          },
          "error": {
            "description": "Error filter used to discriminate the bad rows that will be affected by this recovery scenario",
            "type": "string"
          }
        },
        "required": [
          "name",
          "error"
        ],
        "additionalProperties": true
      }
    ]
  }
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/recoveries/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an array of recovery scenarios",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "recoveries",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "minProperties": 1,
  "patternProperties": {
    "^iglu:": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^(([a-zA-Z0-9]+)(-?))+$",
            "minLength": 1,
            "description": "A slug name for recovery flow"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "enum": [
                    "Cast",
                    "Remove",
                    "Replace",
                    "Test"
                  ],
                  "description": "Transformation operation to perform"
                },
                "path": {
                  "type": "string",
                  "pattern": "^(([a-zA-Z0-9]+)(\\.?))+$",
                  "description": "JSON Path to object"
                },
                "match": {
                  "type": "string",
                  "description": "An expression applied when replacing field’s values with new value"
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "description": "Compare against static value",
                      "properties": {
                        "value": {
                          "type": [
                            "array",
                            "number",
                            "object",
                            "string"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Compare against regular expression",
                      "properties": {
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "regex"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare size",
                      "properties": {
                        "size": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "eq": {
                                  "type": "integer"
                                }
                              }
                            },
                            {
                              "properties": {
                                "lt": {
                                  "type": "integer"
                                }
                              }
                            },
                            {
                              "properties": {
                                "gt": {
                                  "type": "integer"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "A value to match against"
                },
                "from": {
                  "type": "string",
                  "description": "Source type to cast from"
                },
                "to": {
                  "type": "string",
                  "description": "Target type to cast to"
                }
              },
              "required": [
                "op",
                "path",
                "value"
              ],
              "additionalProperties": false
            },
            "description": "Conditions required to apply steps for specific Bad Row type"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "enum": [
                    "Cast",
                    "Remove",
                    "Replace",
                    "Test"
                  ],
                  "description": "Transformation operation to perform"
                },
                "path": {
                  "type": "string",
                  "pattern": "^(([a-zA-Z0-9]+)(\\.?))+$",
                  "description": "JSON Path to object"
                },
                "match": {
                  "type": "string",
                  "description": "An expression applied when replacing field’s values with new value"
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "description": "Compare against static value",
                      "properties": {
                        "value": {
                          "type": [
                            "number",
                            "object",
                            "string"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Compare against regular expression",
                      "properties": {
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "regex"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare size",
                      "properties": {
                        "size": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "eq": {
                                  "type": "integer"
                                }
                              }
                            },
                            {
                              "properties": {
                                "lt": {
                                  "type": "integer"
                                }
                              }
                            },
                            {
                              "properties": {
                                "gt": {
                                  "type": "integer"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "A value to match against"
                },
                "from": {
                  "type": "string",
                  "description": "Source type to cast from"
                },
                "to": {
                  "type": "string",
                  "description": "Target type to cast to"
                }
              },
              "required": [
                "op",
                "path",
                "value"
              ],
              "additionalProperties": false
            },
            "description": "Steps to be applied for specific Bad Row type"
          }
        },
        "required": [
          "name",
          "conditions",
          "steps"
        ]
      }
    }
  }
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/recoveries/jsonschema/3-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an array of recovery scenarios",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "recoveries",
    "format": "jsonschema",
    "version": "3-0-0"
  },
  "type": "object",
  "minProperties": 1,
  "patternProperties": {
    "^iglu:": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^(([a-zA-Z0-9]+)(-?))+$",
            "minLength": 1,
            "description": "A slug name for recovery flow"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "enum": [
                    "Cast",
                    "Remove",
                    "Replace",
                    "Test"
                  ],
                  "description": "Transformation operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "JSON Path to object"
                },
                "match": {
                  "type": "string",
                  "description": "An expression applied when replacing field’s values with new value"
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "description": "Compare against static value",
                      "properties": {
                        "value": {
                          "type": [
                            "array",
                            "number",
                            "object",
                            "string"
                          ]
                        }
                      },
                      "required": [
                        "value"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare against regular expression",
                      "properties": {
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "regex"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare size",
                      "properties": {
                        "size": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "eq": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "eq"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "properties": {
                                "lt": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "lt"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "properties": {
                                "gt": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "gt"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "A value to match against"
                },
                "from": {
                  "type": "string",
                  "description": "Source type to cast from"
                },
                "to": {
                  "type": "string",
                  "description": "Target type to cast to"
                }
              },
              "required": [
                "op",
                "path"
              ],
              "additionalProperties": false
            },
            "description": "Conditions required to apply steps for specific Bad Row type"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "enum": [
                    "Cast",
                    "Remove",
                    "Replace",
                    "Test"
                  ],
                  "description": "Transformation operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "JSON Path to object"
                },
                "match": {
                  "type": "string",
                  "description": "An expression applied when replacing field’s values with new value"
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "description": "Compare against static value",
                      "properties": {
                        "value": {
                          "type": [
                            "array",
                            "number",
                            "object",
                            "string"
                          ]
                        }
                      },
                      "required": [
                        "value"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare against regular expression",
                      "properties": {
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "regex"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare size",
                      "properties": {
                        "size": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "eq": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "eq"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "properties": {
                                "lt": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "lt"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "properties": {
                                "gt": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "gt"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "A value to match against"
                },
                "from": {
                  "type": "string",
                  "description": "Source type to cast from"
                },
                "to": {
                  "type": "string",
                  "description": "Target type to cast to"
                }
              },
              "required": [
                "op",
                "path"
              ],
              "additionalProperties": false
            },
            "description": "Steps to be applied for specific Bad Row type"
          }
        },
        "required": [
          "name",
          "conditions",
          "steps"
        ]
      }
    }
  }
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/recoveries/jsonschema/4-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an array of recovery scenarios",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "recoveries",
    "format": "jsonschema",
    "version": "4-0-0"
  },
  "type": "object",
  "minProperties": 1,
  "patternProperties": {
    "^iglu:": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^(([a-zA-Z0-9]+)(-?))+$",
            "minLength": 1,
            "description": "A slug name for recovery flow"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "enum": [
                    "Test"
                  ],
                  "description": "Transformation operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "JSON Path to object"
                },
                "match": {
                  "type": "string",
                  "description": "An expression applied when replacing field’s values with new value"
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "description": "Compare against static value",
                      "properties": {
                        "value": {
                          "type": [
                            "array",
                            "number",
                            "object",
                            "string"
                          ]
                        }
                      },
                      "required": [
                        "value"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare against regular expression",
                      "properties": {
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "regex"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "description": "Compare size",
                      "properties": {
                        "size": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "eq": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "eq"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "properties": {
                                "lt": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "lt"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "properties": {
                                "gt": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "gt"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  ],
                  "description": "A value to match against"
                },
                "from": {
                  "type": "string",
                  "description": "Source type to cast from"
                },
                "to": {
                  "type": "string",
                  "description": "Target type to cast to"
                }
              },
              "required": [
                "op",
                "path"
              ],
              "additionalProperties": false
            },
            "description": "Conditions required to apply steps for specific Bad Row type"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "enum": [
                    "Cast",
                    "Remove",
                    "Replace"
                  ],
                  "description": "Transformation operation to perform"
                },
                "path": {
                  "type": "string",
                  "description": "JSON Path to object"
                },
                "match": {
                  "type": "string",
                  "description": "An expression applied when replacing field’s values with new value"
                },
                "value": {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ],
                  "description": "Replace static value"
                },
                "from": {
                  "type": "string",
                  "description": "Source type to cast from"
                },
                "to": {
                  "type": "string",
                  "description": "Target type to cast to"
                }
              },
              "required": [
                "op",
                "path"
              ],
              "additionalProperties": false
            },
            "description": "Steps to be applied for specific Bad Row type"
          }
        },
        "required": [
          "name",
          "conditions",
          "steps"
        ]
      }
    }
  }
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/enrichments/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an array of enrichments",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "enrichments",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "array",

	"items": {

		"type": "object",

		"properties": {

			"schema": {
				"type": "string",
				"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[0-9]+-[0-9]+-[0-9]+$"
			},

			"data": {}
		},

		"required": ["schema", "data"],
		"additionalProperties": false
	}
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/consent_document/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for consent document context",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "consent_document",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"id": {
			"type": "string",
			"maxLength": 36
		},
		"version": {
			"type": "string",
			"maxLength": 36
		},
		"name": {
			"type": "string",
			"maxLength": 60
		},
		"description": {
			"type": "string",
			"maxLength": 10000
		}
	},
	"required": ["id", "version"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/anon_ip/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an IP anonymization enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "anon_ip",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"anonOctets": {
					"type": "number",
					"minimum": 1,
					"maximum": 4
				}
			},
			"required": ["anonOctets"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/anon_ip/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an IP anonymization enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "anon_ip",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"anonOctets": {
					"description": "Number of IPv4 octets to anonymize",
					"type": "number",
					"minimum": 1,
					"maximum": 4
				},
				"anonSegments": {
					"description": "Number of IPv6 segments to anonymize",
					"type": "integer",
					"minimum": 1,
					"maximum": 8
				}
			},
			"required": ["anonOctets"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/timing/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a user timing event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "timing",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"category": {
			"type": "string"
		},
		"variable": {
			"type": "string"
		},
		"timing": {
			"type": "number"
		},
		"label": {
			"type": "string"
		}
	},
	"required": ["category", "variable", "timing"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/application_background/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an application background event",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "application_background",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "backgroundIndex": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/media_player/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Common Context Schema for a media player event",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "media_player",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "currentTime": {
      "type": "number",
      "description": "The current playback time",
      "minimum": 0,
      "maximum": 9007199254740991
    },
    "duration": {
      "type": [
        "number",
        "null"
      ],
      "description": "A double-precision floating-point value indicating the duration of the media in seconds",
      "minimum": 0,
      "maximum": 9007199254740991
    },
    "ended": {
      "type": "boolean",
      "description": "If playback of the media has ended"
    },
    "isLive": {
      "type": "boolean",
      "description": "If the media is live"
    },
    "loop": {
      "type": "boolean",
      "description": "If the video should restart after ending"
    },
    "muted": {
      "type": "boolean",
      "description": "If the media element is muted"
    },
    "paused": {
      "type": "boolean",
      "description": "If the media element is paused"
    },
    "percentProgress": {
      "type": [
        "integer",
        "null"
      ],
      "description": "The percent of the way through the media",
      "minimum": 0,
      "maximum": 100
    },
    "playbackRate": {
      "type": "number",
      "description": "Playback rate (1 is normal)",
      "minimum": -9007199254740991,
      "maximum": 9007199254740991
    },
    "volume": {
      "type": "integer",
      "description": "Volume percent",
      "minimum": 0,
      "maximum": 100
    }
  },
  "additionalProperties": false,
  "required": [
    "currentTime",
    "duration",
    "ended",
    "loop",
    "muted",
    "paused",
    "playbackRate",
    "volume"
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/consent_granted/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for consent granted",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "consent_granted",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"expiry": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/event_fingerprint_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for configuration of an event fingerprinting enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "event_fingerprint_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"hashAlgorithm": {
					"enum": ["MD5"]
				},
				"excludeParameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": ["hashAlgorithm", "excludeParameters"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/event_fingerprint_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for configuration of an event fingerprinting enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "event_fingerprint_config",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"hashAlgorithm": {
					"enum": ["MD5", "SHA1", "SHA256", "SHA384", "SHA512"]
				},
				"excludeParameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"required": ["hashAlgorithm", "excludeParameters"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/pii_transformation/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a PII enrichment original values",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "pii_transformation",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "pii": {
      "type": "object",
      "properties": {
        "pojo": {
          "description": "A scalar field replacement from the EnrichedEvent POJO (e.g. user_id)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fieldName": {
                "enum": [
                  "user_id",
                  "user_ipaddress",
                  "user_fingerprint",
                  "domain_userid",
                  "network_userid",
                  "ip_organization",
                  "ip_domain",
                  "tr_orderid",
                  "ti_orderid",
                  "mkt_term",
                  "mkt_content",
                  "se_category",
                  "se_action",
                  "se_label",
                  "se_property",
                  "mkt_clickid",
                  "refr_domain_userid",
                  "domain_sessionid"
                ],
                "description": "The name of the field"
              },
              "originalValue": {
                "type": "string",
                "description": "The original value (before the PII transform), of the field"
              },
              "modifiedValue": {
                "type": "string",
                "maxLength": 128,
                "description": "The value that this field was replaced with (e.g. the hash of the original)"
              }
            },
            "additionalProperties": false,
            "required": [
              "fieldName",
              "originalValue",
              "modifiedValue"
            ]
          }
        },
        "json": {
          "description": "A JSON field replacement from the EnrichedEvent POJO (e.g. contexts). Each entry in this array is a match of the jsonPath for that field",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fieldMapping": {
                "description": "A single replacement (there can be multiple) caused by specifying that JsonPath",
                "type": "object",
                "properties": {
                  "fieldName": {
                    "enum": [
                      "contexts",
                      "derived_contexts",
                      "unstruct_event"
                    ],
                    "description": "The name of the field"
                  },
                  "jsonPath": {
                    "type": "string",
                    "description": "The JsonPath that was specified"
                  },
                  "originalValue": {
                    "type": "string",
                    "description": "The original value of the field"
                  },
                  "modifiedValue": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The modified value (e.g. hash) of the original value"
                  },
                  "schema": {
                    "type": "string",
                    "description": "The iglu schema corresponding to this field and value",
                    "pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
                  }
                },
                "required": [
                  "fieldName",
                  "jsonPath",
                  "originalValue",
                  "modifiedValue",
                  "schema"
                ],
                "additionalProperties": false
              }
            }
          }
        }
      },
      "anyOf": [
        {
          "required": [
            "pojo"
          ]
        },
        {
          "required": [
            "json"
          ]
        }
      ],
      "additionalProperties": false
    },
    "strategy": {
      "description": "The strategy used to modify the original value",
      "type": "object",
      "properties": {
        "pseudonymize": {
          "description": "The pseudonymize strategy for modifying the original value",
          "type": "object",
          "properties": {
            "hashFunction": {
              "enum": [
                "MD2",
                "MD5",
                "SHA-1",
                "SHA-256",
                "SHA-384",
                "SHA-512"
              ],
              "description": "The function used to pseudonymize"
            }
          },
          "required": [
            "hashFunction"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "pseudonymize"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "pii",
    "strategy"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/unstruct_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Snowplow unstructured event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "unstruct_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"properties": {

		"schema": {
			"type": "string",
			"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[0-9]+-[0-9]+-[0-9]+$"
		},

		"data": {}
	},

	"required": ["schema", "data"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/flash_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Flash context",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "flash_context",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"playerType": {
			"enum": ["ActiveX", "Desktop", "External", "PlugIn", "StandAlone"]
		},
		"version": {
			"type": "string"
		},
		"stageSize": {
			"type": "object",
			"properties": {
				"width": {
					"type": "integer"
				},
				"height": {
					"type": "integer"
				}
			},
			"required": ["width", "height"],
			"additionalProperties": false
		},
		"isDebugger": {
			"type": "boolean"
		},
		"hasLocalStorage": {
			"type": "boolean"
		},
		"hasScriptAccess": {
			"type": "boolean"
		},
		"domainSessionIndex": {
			"type": "number"
		},
		"domainUserId": {
			"type": "string"
		},
		"userFingerprint": {
			"type": "string"
		}
	},
	"required": ["playerType", "version", "isDebugger", "hasLocalStorage", "hasScriptAccess"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/javascript_script_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for configuration of a JavaScript dynamic scripting enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "javascript_script_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"script": {
					"type": "string"
				}
			},
			"required": ["script"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ip_lookups/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for MaxMind IP-based lookups enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "ip_lookups",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {

				"geo": {
					"type": "object",
					"properties": {
						"database": {
							"enum": ["GeoLiteCity.dat", "GeoIPCity.dat"]
						},
						"uri": {
							"type": "string"
						}
					},
					"required": ["database", "uri"]
				},

				"isp": {
					"type": "object",
					"properties": {
						"database": {
							"enum": ["GeoIPISP.dat"]
						},
						"uri": {
							"type": "string"
						}
					},
					"required": ["database", "uri"]
				},

				"organization": {
					"type": "object",
					"properties": {
						"database": {
							"enum": ["GeoIPOrg.dat"]
						},
						"uri": {
							"type": "string"
						}
					},
					"required": ["database", "uri"]
				},

				"domain": {
					"type": "object",
					"properties": {
						"database": {
							"enum": ["GeoIPDomain.dat"]
						},
						"uri": {
							"type": "string"
						}
					},
					"required": ["database", "uri"]
				},

				"netspeed": {
					"type": "object",
					"properties": {
						"database": {
							"enum": ["GeoIPNetSpeed.dat", "GeoIPNetSpeedCell.dat"]
						},
						"uri": {
							"type": "string"
						}
					},
					"required": ["database", "uri"]
				}

			},
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ip_lookups/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "description": "Schema for MaxMind GeoIP2 ip lookups enrichment",
        "self": {
            "vendor": "com.snowplowanalytics.snowplow",
            "name": "ip_lookups",
            "format": "jsonschema",
            "version": "2-0-0"
        },

        "type": "object",
        "properties": {
            "vendor": {
                "type": "string",
                "maxLength": 256
            },
            "name": {
                "type": "string",
                "maxLength": 256
            },
            "enabled": {
                "type": "boolean"
            },
            "parameters": {
                "type": "object",
                "properties": {

                    "geo": {
                        "type": "object",
                        "properties": {
                            "database": {
                                "enum": ["GeoLite2-City.mmdb", "GeoIP2-City.mmdb"]
                            },
                            "uri": {
                                "type": "string",
                                "format": "uri"
                            }
                        },
                        "required": ["database", "uri"]
                    },

                    "isp": {
                        "type": "object",
                        "properties": {
                            "database": {
                                "enum": ["GeoIP2-ISP.mmdb"]
                            },
                            "uri": {
                                "type": "string",
                                "format": "uri"
                            }
                        },
                        "required": ["database", "uri"]
                    },

                    "domain": {
                        "type": "object",
                        "properties": {
                            "database": {
                                "enum": ["GeoIP2-Domain.mmdb"]
                            },
                            "uri": {
                                "type": "string",
                                "format": "uri"
                            }
                        },
                        "required": ["database", "uri"]
                    },

                    "connectionType": {
                        "type": "object",
                        "properties": {
                            "database": {
                                "enum": ["GeoIP2-Connection-Type.mmdb"]
                            },
                            "uri": {
                                "type": "string",
                                "format": "uri"
                            }
                        },
                        "required": ["database", "uri"]
                    }

                },
                "additionalProperties": false
            }
        },
        "required": ["name", "vendor", "enabled", "parameters"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ad_conversion/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an ad conversion event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "ad_conversion",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"conversionId": {
			"type": "string"
		},
		"campaignId": {
			"type": "string"
		},
		"advertiserId": {
			"type": "string"
		},
		"category": {
			"type": "string"
		},
		"action": {
			"type": "string"
		},
		"property": {
			"type": "string"
		},
		"costModel": {
			"enum": ["cpa", "cpc", "cpm"]
		},
		"cost": {
			"type": "number",
			"minimum": 0
		},
		"initialValue": {
			"type": "number",
			"minimum": 0
		}
	},
	"minProperties": 1,
	"dependencies": {"cost": ["costModel"]},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/focus_form/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for the focus of a form field",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "focus_form",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"formId": {
			"description": "The id of the form the element belongs to",
			"type": "string",
			"minLength": 0,
			"maxLength": 4096
		},
		"elementId": {
			"description": "The id of the element that has just received focus",
			"type": "string",
			"minLength": 0,
			"maxLength": 4096
		},
		"nodeName": {
			"description": "The node type of the element",
			"type": "string",
			"enum": ["INPUT", "TEXTAREA", "SELECT"]
		},
		"elementType": {
			"description": "The type of input element",
			"type": ["string", "null"],
			"enum": ["button", "checkbox", "color", "date", "datetime", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]
		},
		"elementClasses": {
			"description": "An array of the classes on the element",
			"type": ["array", "null"],
			"items": {
				"description": "A class on the element",
				"type": "string",
				"minLength": 0,
				"maxLength": 4096
			}
		},
		"value": {
			"description": "The value of the element when it gained focus",
			"type": ["string", "null"],
			"minLength": 0,
			"maxLength": 65535
		}
	},
	"required": ["formId", "elementId", "nodeName", "value"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/site_search/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an internal site search event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "site_search",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"terms": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"minItems": 1
		},
		"filters": {
			"type": "object",
			"additionalProperties": {
				"type": ["string", "boolean"]
			}
		},
		"totalResults": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647
		},
		"pageResults": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647
		}
	},
	"required": ["terms"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/mobile_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for mobile contexts",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "mobile_context",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"osType": {
			"type": "string"
		},
		"osVersion": {
			"type": "string"
		},
		"deviceManufacturer": {
			"type": "string"
		},
		"deviceModel": {
			"type": "string"
		},
		"carrier": {
			"type": ["string", "null"]
		},
		"openIdfa": {
			"type": "string"
		},
		"appleIdfa": {
			"type": "string"
		},
		"appleIdfv": {
			"type": "string"
		},
		"androidIdfa": {
			"type": "string"
		}
	},
	"required": ["osType", "osVersion", "deviceManufacturer", "deviceModel"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/mobile_context/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for mobile contexts",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "mobile_context",
		"format": "jsonschema",
		"version": "1-0-1"
	},
	"type": "object",
	"properties": {
		"osType": {
			"type": "string"
		},
		"osVersion": {
			"type": "string"
		},
		"deviceManufacturer": {
			"type": "string"
		},
		"deviceModel": {
			"type": "string"
		},
		"carrier": {
			"type": ["string", "null"]
		},
		"networkType": {
			"type": "string",
			"enum": [ "mobile", "wifi", "offline" ]
		},
		"networkTechnology": {
			"type": "string"
		},
		"openIdfa": {
			"type": "string"
		},
		"appleIdfa": {
			"type": "string"
		},
		"appleIdfv": {
			"type": "string"
		},
		"androidIdfa": {
			"type": "string"
		}
	},
	"required": ["osType", "osVersion", "deviceManufacturer", "deviceModel"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/mobile_context/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for mobile contexts",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "mobile_context",
		"format": "jsonschema",
		"version": "1-0-2"
	},
	"type": "object",
	"properties": {
		"osType": {
			"type": "string"
		},
		"osVersion": {
			"type": "string"
		},
		"deviceManufacturer": {
			"type": "string"
		},
		"deviceModel": {
			"type": "string"
		},
		"carrier": {
			"type": ["string", "null"]
		},
		"networkType": {
			"type": ["string", "null"],
			"enum": ["mobile", "wifi", "offline", null]
		},
		"networkTechnology": {
			"type": ["string", "null"]
		},
		"openIdfa": {
			"type": ["string", "null"]
		},
		"appleIdfa": {
			"type": ["string", "null"]
		},
		"appleIdfv": {
			"type": ["string", "null"]
		},
		"androidIdfa": {
			"type": ["string", "null"]
		},
		"physicalMemory": {
			"type": ["integer", "null"],
			"minimum": 0,
			"maximum": 9223372036854775807,
			"description": "Total physical system memory in bytes"
		},
		"systemAvailableMemory": {
			"type": ["integer", "null"],
			"minimum": 0,
			"maximum": 9223372036854775807,
			"description": "Available memory on the system in bytes (Android only)"
		},
		"appAvailableMemory": {
			"type": ["integer", "null"],
			"minimum": 0,
			"maximum": 9223372036854775807,
			"description": "Amount of memory in bytes available to the current app (iOS only)"
		},
		"batteryLevel": {
			"type": ["integer", "null"],
			"minimum": 0,
			"maximum": 100,
			"description": "Remaining battery level as an integer percentage of total battery capacity"
		},
		"batteryState": {
			"type": ["string", "null"],
			"enum": ["unplugged", "charging", "full", null],
			"maxLength": 255,
			"description": "Battery state for the device"
		},
		"lowPowerMode": {
			"type": ["boolean", "null"],
			"description": "A Boolean indicating whether Low Power Mode is enabled (iOS only)"
		},
		"availableStorage": {
			"type": ["integer", "null"],
			"minimum": 0,
			"maximum": 9223372036854775807,
			"description": "Bytes of storage remaining"
		},
		"totalStorage": {
			"type": ["integer", "null"],
			"minimum": 0,
			"maximum": 9223372036854775807,
			"description": "Total size of storage in bytes"
		}
	},
	"required": ["osType", "osVersion", "deviceManufacturer", "deviceModel"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a link click event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "link_click",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"elementId": {
			"type": "string"
		},
		"elementClasses": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"elementTarget": {
			"type": "string"
		},
		"targetUrl": {
			"type": "string",
			"minLength": 1
		}
	},
	"required": ["targetUrl"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a link click event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "link_click",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"elementId": {
			"type": "string"
		},
		"elementClasses": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"elementTarget": {
			"type": "string"
		},
		"targetUrl": {
			"type": "string",
			"minLength": 1
		},
		"elementContent": {
			"type": "string"
		}
	},
	"required": ["targetUrl"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/bad_raw_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a bad raw event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "bad_raw_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"line": {
			"type": "string"
		},
		"errors": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"minItems": 1
		}
	},
	"required": ["line", "errors"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/change_form/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a form field's value being changed",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "change_form",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"formId": {
			"description": "The id of the form the element belongs to",
			"type": "string",
			"minLength": 0,
			"maxLength": 4096
		},
		"elementId": {
			"description": "The id of the element that has just received focus",
			"type": "string",
			"minLength": 0,
			"maxLength": 4096
		},
		"nodeName": {
			"description": "The node type of the element",
			"type": "string",
			"enum": ["INPUT", "TEXTAREA", "SELECT"]
		},
		"type": {
			"description": "The type of input element",
			"type": ["string", "null"],
			"enum": ["button", "checkbox", "color", "date", "datetime", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]
		},
		"elementClasses": {
			"description": "An array of the classes on the element",
			"type": "array",
			"items": {
				"description": "A class on the element",
				"type": "string",
				"minLength": 0,
				"maxLength": 4096
			}
		},
		"value": {
			"description": "The value of the element when it gained focus",
			"type": ["string", "null"],
			"minLength": 0,
			"maxLength": 65535
		}
	},
	"required": ["formId", "elementId", "nodeName", "value"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/web_page/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a web page context",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow",
        "name": "web_page",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "id": {
            "type": "string",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
        }
    },
    "required": ["id"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/application_foreground/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an application foreground event",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "application_foreground",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "foregroundIndex": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/application_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an application error",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "application_error",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "programmingLanguage": {
      "enum": [
        "JAVA",
        "SCALA",
        "KOTLIN",
        "GROOVY",
        "RUBY",
        "GOLANG",
        "JAVASCRIPT",
        "PHP",
        "PYTHON",
        "OBJECTIVEC",
        "SWIFT",
        "C",
        "CPLUSPLUS",
        "CSHARP",
        "ACTIONSCRIPT",
        "LUA",
        "RUST",
        "HASKELL",
        "CLOJURE",
        "ERLANG",
        "ELIXIR",
        "CRYSTAL",
        "PONY",
        "NIM"
      ]
    },
    "message": {
      "type": "string",
      "maxLength": 2048
    },
    "threadName": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "threadId": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "stackTrace": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "lineNumber": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "className": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "exceptionName": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "isFatal": {
      "type": ["boolean", "null"]
    }
  },
  "required": ["programmingLanguage", "message"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/application_error/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an application error",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "application_error",
    "format": "jsonschema",
    "version": "1-0-1"
  },

  "type": "object",
  "properties": {
    "programmingLanguage": {
      "enum": [
        "JAVA",
        "SCALA",
        "KOTLIN",
        "GROOVY",
        "RUBY",
        "GOLANG",
        "JAVASCRIPT",
        "PHP",
        "PYTHON",
        "OBJECTIVEC",
        "SWIFT",
        "C",
        "CPLUSPLUS",
        "CSHARP",
        "ACTIONSCRIPT",
        "LUA",
        "RUST",
        "HASKELL",
        "CLOJURE",
        "ERLANG",
        "ELIXIR",
        "CRYSTAL",
        "PONY",
        "NIM"
      ]
    },
    "message": {
      "type": "string",
      "maxLength": 2048
    },
    "threadName": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "threadId": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "stackTrace": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "lineNumber": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "className": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "exceptionName": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "isFatal": {
      "type": ["boolean", "null"]
    },
    "lineColumn": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "fileName": {
      "type": ["string", "null"],
      "maxLength": 1024
    }
  },
  "required": ["programmingLanguage", "message"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/application_error/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an application error",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow",
    "name": "application_error",
    "format": "jsonschema",
    "version": "1-0-2"
  },

  "type": "object",
  "properties": {
    "programmingLanguage": {
      "type": "string",
      "enum": [
        "JAVA",
        "SCALA",
        "KOTLIN",
        "GROOVY",
        "RUBY",
        "GOLANG",
        "JAVASCRIPT",
        "PHP",
        "PYTHON",
        "OBJECTIVEC",
        "SWIFT",
        "C",
        "CPLUSPLUS",
        "CSHARP",
        "ACTIONSCRIPT",
        "LUA",
        "RUST",
        "HASKELL",
        "CLOJURE",
        "ERLANG",
        "ELIXIR",
        "CRYSTAL",
        "PONY",
        "NIM"
      ]
    },
    "message": {
      "type": "string",
      "maxLength": 2048
    },
    "threadName": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "threadId": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "stackTrace": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "causeStackTrace": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "lineNumber": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "className": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "exceptionName": {
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "isFatal": {
      "type": ["boolean", "null"]
    },
    "lineColumn": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 2147483647
    },
    "fileName": {
      "type": ["string", "null"],
      "maxLength": 1024
    }
  },
  "required": ["programmingLanguage", "message"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/currency_conversion_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for configuration of currency-conversion enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "currency_conversion_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"apiKey": {
					"type": "string"
				},
				"baseCurrency": {
					"type": "string"
				},
				"rateAt": {
					"enum": ["EOD_PRIOR"]
				},
				"accountType": {
					"type": "string",
					"enum": ["DEVELOPER", "ENTERPRISE", "UNLIMITED"]
				}
			},
			"required": ["apiKey", "baseCurrency", "rateAt", "accountType"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/remove_from_cart/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a remove-from-cart event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "remove_from_cart",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"sku": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"category": {
			"type": "string"
		},
		"unitPrice": {
			"type": "number"
		},
		"quantity": {
			"type": "number"
		},
		"currency": {
			"type": "string"
		}
	},
	"required": ["sku", "quantity"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ad_click/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an ad click event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "ad_click",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"clickId": {
			"type": "string"
		},
		"impressionId": {
			"type": "string"
		},
		"zoneId": {
			"type": "string"
		},
		"bannerId": {
			"type": "string"
		},
		"campaignId": {
			"type": "string"
		},
		"advertiserId": {
			"type": "string"
		},
		"targetUrl": {
			"type": "string",
			"minLength": 1
		},
		"costModel": {
			"enum": ["cpa", "cpc", "cpm"]
		},
		"cost": {
			"type": "number",
			"minimum": 0
		}
	},
	"required": ["targetUrl"],
	"dependencies": {"cost": ["costModel"]},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/user_agent_utils_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for configuration of user-agent-utils enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "user_agent_utils_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"maxProperties": 0
		}
	},
	"required": ["name", "vendor", "enabled"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/ad_impression/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an ad impression event",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "ad_impression",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"impressionId": {
			"type": "string"
		},
		"zoneId": {
			"type": "string"
		},
		"bannerId": {
			"type": "string"
		},
		"campaignId": {
			"type": "string"
		},
		"advertiserId": {
			"type": "string"
		},
		"targetUrl": {
			"type": "string",
			"minLength": 1
		},
		"costModel": {
			"enum": ["cpa", "cpc", "cpm"]
		},
		"cost": {
			"type": "number",
			"minimum": 0
		}
	},
	"minProperties":1,
	"dependencies": {"cost": ["costModel"]},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/campaign_attribution/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a campaign attribution enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "campaign_attribution",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"mapping": {
					"enum": ["static", "script"]
				},
				"fields": {
					"type": "object",
					"properties": {
						"mktMedium": {
							"$ref": "#/definitions/stringArray"
						},
						"mktSource": {
							"$ref": "#/definitions/stringArray"
						},
						"mktTerm": {
							"$ref": "#/definitions/stringArray"
						},
						"mktContent": {
							"$ref": "#/definitions/stringArray"
						},
						"mktCampaign": {
							"$ref": "#/definitions/stringArray"
						}
					},
					"required": ["mktMedium", "mktSource", "mktTerm", "mktContent", "mktCampaign"],
					"additionalProperties": false
				}
			},
			"required": ["fields"],
			"additionalProperties": false
		}
	},

	"definitions": {
		"stringArray": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	},

	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow/campaign_attribution/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a campaign attribution enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow",
		"name": "campaign_attribution",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"mapping": {
					"type": ["string", "null"],
					"enum": ["static", "script"]
				},
				"fields": {
					"type": "object",
					"properties": {
						"mktMedium": {
							"$ref": "#/definitions/stringArray"
						},
						"mktSource": {
							"$ref": "#/definitions/stringArray"
						},
						"mktTerm": {
							"$ref": "#/definitions/stringArray"
						},
						"mktContent": {
							"$ref": "#/definitions/stringArray"
						},
						"mktCampaign": {
							"$ref": "#/definitions/stringArray"
						},
						"mktClickId": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					},
					"required": ["mktMedium", "mktSource", "mktTerm", "mktContent", "mktCampaign"],
					"additionalProperties": false
				}
			},
			"required": ["fields"],
			"additionalProperties": false
		}
	},

	"definitions": {
		"stringArray": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	},

	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.twitter/SerializedBlock/protobuf/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "IDL for a Protocol Buffer array of bytes",
	"self": {
		"vendor": "com.twitter",
		"name": "SerializedBlock",
		"format": "protobuf",
		"version": "1-0-0"
	},

	"idl": 	"package com.twitter.SerializedBlock.protobuf.model1;message SerializedBlock {\\noptional int32 version = 1;\\noptional string proto_class_name = 2;\\nrepeated bytes proto_blobs = 3;\\n};"
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely.optimizelyx/summary/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Optimizely X summary context",
  "self": {
    "vendor": "com.optimizely.optimizelyx",
    "name": "summary",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "experimentId": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 9223372036854775807
    },
    "variationName": {
      "type": ["string", "null"],
      "maxLength": 255
    },
    "variation": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 9223372036854775807
    },
    "visitorId": {
      "type": ["string", "null"],
      "maxLength": 100
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('dev.amp.snowplow/amp_page_ping/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "dev.amp.snowplow",
    "name": "amp_page_ping",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "description": "Schema for amp-specific page ping events",
  "properties": {
    "scrollLeft": {
      "type": "number",
      "description": "Pixels scrolled from the left, as provided by AMP"
    },
    "scrollWidth": {
      "type": "number",
      "description": "Width of page in pixels, as provided by AMP",
      "minimum": 0
    },
    "viewportWidth": {
      "type": "number",
      "description": "Width of viewport in pixels, taking into account zoom and window size, as provided by AMP",
      "minimum": 0
    },
    "scrollTop": {
      "type": "number",
      "description": "Pixels scrolled from the top"
    },
    "scrollHeight": {
      "type": "number",
      "description": "Height of page in pixels, as provided by AMP",
      "minimum": 0
    },
    "viewportHeight": {
      "type": "number",
      "description": "Height of viewport in pixels, taking into account zoom and window size, as provided by AMP",
      "minimum": 0
    },
    "totalEngagedTime": {
      "type": "number",
      "description": "Seconds of engaged time spent on page, according to the AMP platform's measurement of engaged time",
      "minimum": 0
    }
  },
  "additionalProperties": false,
  "type": "object"
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('dev.amp.snowplow/amp_web_page/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "dev.amp.snowplow",
    "name": "amp_web_page",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "description": "Schema for AMP Web Page context",
  "properties": {
    "ampPageViewId": {
      "type": "string",
      "description": "Base64 AMP page view ID - unique to Page View",
      "maxLength": 255
    }
  },
  "additionalProperties": false,
  "required": [
    "ampPageViewId"
  ],
  "type": "object"
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('dev.amp.snowplow/amp_id/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "dev.amp.snowplow",
    "name": "amp_id",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "description": "Schema for AMP user identification",
  "properties": {
    "ampClientId": {
      "type": "string",
      "description": "AMP client ID - unique to AMP user",
      "maxLength": 128
    },
    "domainUserid": {
      "type": [
        "string",
        "null"
      ],
      "description": "Snowplow domain_userid - tracked if available",
      "maxLength": 128
    },
    "userId": {
      "type": [
        "string",
        "null"
      ],
      "description": "User-defined user_id - tracked if available",
      "maxLength": 255
    }
  },
  "additionalProperties": false,
  "type": "object",
  "required": [
    "ampClientId"
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.pagerduty/incident/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a PagerDuty incident event",
	"self": {
		"vendor": "com.pagerduty",
		"name": "incident",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"type": {
			"type": "string"
		},
		"id": {
			"type": "string"
		},
		"created_on": {
			"type": "string",
			"format": "date-time"
		},
		"data": {
			"type": "object",
			"properties": {
				"incident": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"incident_number": {
							"type": "integer"
						},
						"created_on": {
							"type": "string",
							"format": "date-time"
						},
						"status": {
							"type": "string"
						},
						"NOT_READY_actions": {
							"type": "array"
						},
						"html_url": {
							"type": "string"
						},
						"incident_key": {
							"type": [ "string", "null" ]
						},
						"service": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"html_url": {
									"type": "string"
								},
								"deleted_at": {
									"type": "null"
								}
							},
							"additionalProperties": false
						},
						"escalation_policy": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"deleted_at": {
									"type": "null"
								}
							},
							"additionalProperties": false
						},
						"assigned_to_user": {
							"type": [ "object", "null" ],
							"properties": {
								"id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"email": {
									"type": "string"
								},
								"html_url": {
									"type": "string"
								}
							},
							"additionalProperties": false
						},
						"trigger_summary_data": {
							"type": "object",
							"properties": {
								"description": {
									"type": "string"
								},
								"subject": {
									"type": "string"
								},
								"client": {
									"type": "string"
								}
							},
							"additionalProperties": false
						},
						"trigger_details_html_url": {
							"type": "string"
						},
						"trigger_type": {
							"type": "string"
						},
						"last_status_change_on": {
							"type": "string",
							"format": "date-time"
						},
						"last_status_change_by": {
							"type": [ "object", "null" ],
							"properties": {
								"id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"email": {
									"type": "string"
								},
								"html_url": {
									"type": "string"
								}
							},
							"additionalProperties": false
						},
						"number_of_escalations": {
							"type": "integer"
						},
						"assigned_to": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"at": {
										"type": "string"
									},
									"object": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"email": {
												"type": "string"
											},
											"html_url": {
												"type": "string"
											},
											"type": {
												"type": "string"
											}
										},
										"additionalProperties": false
									}
								},
								"additionalProperties": false
							}
						},
						"resolved_by_user": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"email": {
									"type": "string"
								},
								"html_url": {
									"type": "string"
								}
							},
							"additionalProperties": false
						}
					},
					"additionalProperties": false
				}
			},
			"additionalProperties": false
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/product_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a product event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "product_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"definitions": {
		"product_object": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"brand": {
					"type": "string"
				},
				"category": {
					"type": "string"
				},
				"variant": {
					"type": "string"
				},
				"position": {
					"type": "integer"
				},
				"unitPrice": {
					"type": "number"
				},
				"quantity": {
					"type": "number"
				},
				"couponCode": {
					"type": "string"
				},
				"totalProductAmount": {
					"type": "number"
				},
				"addedToCartTimestamp": {
					"type": "integer",
					"maximum": 9223372036854775807,
					"minimum": 0
				},
				"attributes": {}
			},
			"additionalProperties": false
		}
	},

	"type": "object",
	"properties": {
		"action": {
			"type": "string"
		},
		"currency": {
			"type": "string"
		},
		"checkoutStep": {
			"type": "integer"
		},
		"checkoutOptions": {
			"type": "string"
		},
		"productActionList": {
			"type": "string"
		},
		"transactionId": {
			"type": "string"
		},
		"totalAmount": {
			"type": "number"
		},
		"tax": {
			"type": "number"
		},
		"shipping": {
			"type": "number"
		},
		"couponCode": {
			"type": "string"
		},
		"products": {
			"type": "array",
			"items": [{
				"$ref": "#/definitions/product_object"
			}]
		},
		"shoppingCart": {
			"type": "array",
			"items": [{
				"$ref": "#/definitions/product_object"
			}]
		}
	},
	"required": ["action"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/pushregistration_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an push registration event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "pushregistration_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"name": {
			"type": "string"
		},
		"registrationToken": {
			"type": "string"
		},
		"attributes": {}
	},
	"required": ["name"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/promotion_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a promotion event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "promotion_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"definitions": {
		"promotion_object": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"creative": {
					"type": "string"
				},
				"position": {
					"type": "string"
				}
			},
			"additionalProperties": false
		}
	},

	"type": "object",
	"properties": {
		"action": {
			"type": "string"
		},
		"promotions": {
			"type": "array",
			"items": [{
				"$ref": "#/definitions/promotion_object"
			}]
		}
	},
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/useridentitychange_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an user identity change event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "useridentitychange_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"name": {
			"type": "string"
		},
		"newIdentity": {
			"type": "object",
			"properties": {
				"identity": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"dateFirstSet": {
					"type": "integer",
					"maximum": 9223372036854775807,
					"minimum": 0
				},
				"isFirstSeen": {
					"type": "boolean"
				}
			}
		},
		"oldIdentity": {
			"type": "object",
			"properties": {
				"identity": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"dateFirstSet": {
					"type": "integer",
					"maximum": 9223372036854775807,
					"minimum": 0
				},
				"isFirstSeen": {
					"type": "boolean"
				}
			}
		}
	},
	"required": ["name"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/pushmessage_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an push message event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "pushmessage_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"name": {
			"type": "string"
		},
		"token": {
			"type": "string"
		},
		"pushMessageType": {
			"type": "string"
		},
		"message": {
			"type": "string"
		},
		"network": {
			"type": "string"
		},
		"jsonPayload": {
			"type": "string"
		},
		"applicationStateType": {
			"type": "string"
		},
		"contentId": {
			"type": "integer"
		},
		"actionIdentifier": {
			"type": "string"
		},
		"actionName": {
			"type": "string"
		},
		"actionCategoryIdentifier": {
			"type": "string"
		},
		"attributes": {}
	},
	"required": ["name"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/appstatetransition_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an app state transition event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "appstatetransition_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"transitionType": {
			"type": "string"
		},
		"isFirstRun": {
			"type": "boolean"
		},
		"isUpgrade": {
			"type": "boolean"
		},
		"launchParams": {
			"type": "string"
		},
		"launchReferral": {
			"type": "string"
		},
		"successfullyClosed": {
			"type": "boolean"
		},
		"jsonPayload": {
			"type": "string"
		},
		"referralApplication": {
			"type": "string"
		},
		"attributes": {}
	},
	"required": ["transitionType"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/app_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "description": "Schema for an app event",
        "self": {
                "vendor": "com.mparticle.snowplow",
                "name": "app_event",
                "format": "jsonschema",
                "version": "1-0-0"
        },
        "type": "object",
        "properties": {
                "name": {
                        "type": "string"
                },
                "attributes": {}
        },
        "required": ["name"],
        "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/social_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "description": "Schema for a social event",
        "self": {
                "vendor": "com.mparticle.snowplow",
                "name": "social_event",
                "format": "jsonschema",
                "version": "1-0-0"
        },
        "type": "object",
        "properties": {
                "network": {
                        "type": "string"
                },
                "action": {
                        "type": "string"
                },
                "target": {
                        "type": "string"
                }
        },
        "required": ["network", "action"],
        "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/transaction_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "description": "Schema for a transaction event",
        "self": {
                "vendor": "com.mparticle.snowplow",
                "name": "transaction_event",
                "format": "jsonschema",
                "version": "1-0-0"
        },

        "type": "object",
        "properties": {
                "name": {
                        "type": "string"
                },
                "sku": {
                        "type": "string"
                },
                "category": {
                        "type": "string"
                },
                "affiliation": {
                        "type": "string"
                },
                "unitPrice": {
                        "type": "number",
                        "minimum": 0
                },
                "quantity": {
                        "type": "number",
                        "minimum": 0
                },
                "revenue": {
                        "type": "number",
                        "minimum": 0
                },
                "tax": {
                        "type": "number",
                        "minimum": 0
                },
                "shipping": {
                        "type": "number",
                        "minimum": 0
                },
                "currency": {
                        "type": "string"
                },
                "transactionId": {
                        "type": "string"
                }
        },
        "required": ["name", "sku"],
        "additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/userattributechange_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for user attribute change event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "userattributechange_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"name": {
			"type": "string"
		},
		"userAttributeName": {
			"type": "string"
		},
		"newValue": {
			"type": "string"
		},
		"newValues": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"oldValue": {
			"type": "string"
		},
		"oldValues": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"deleted": {
			"type": "boolean"
		},
		"isNewAttribute": {
			"type": "boolean"
		}
	},
	"required": ["name"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/session_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for session context",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "session_context",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"id": {
			"type": "string"
		}
	},
	"required": ["id"],
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mparticle.snowplow/impression_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an impression event",
	"self": {
		"vendor": "com.mparticle.snowplow",
		"name": "impression_event",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"definitions": {
		"product_object": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"brand": {
					"type": "string"
				},
				"category": {
					"type": "string"
				},
				"variant": {
					"type": "string"
				},
				"position": {
					"type": "integer"
				},
				"unitPrice": {
					"type": "number"
				},
				"quantity": {
					"type": "number"
				},
				"couponCode": {
					"type": "string"
				},
				"totalProductAmount": {
					"type": "number"
				},
				"addedToCartTimestamp": {
					"type": "integer",
					"maximum": 9223372036854775807,
					"minimum": 0
				},
				"attributes": {}
			},
			"additionalProperties": false
		}
	},

	"type": "object",
	"properties": {
		"list": {
			"type": "string"
		},
		"products": {
			"type": "array",
			"items": [{
				"$ref": "#/definitions/product_object"
			}]
		}
	},
	"additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/RICH_READ/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "RICH_READ",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "push_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/CUSTOM/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "CUSTOM",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "interaction_type": {
          "type": "string",
          "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
        },
        "customer_id": {
          "type": "string",
          "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
        },
        "interaction_id": {
          "type": "string",
          "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
        },
        "properties": {
          "type": "object",
          "properties": {
            "ltv": {
              "type": "boolean"
            },
            "date": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          },
          "additionalProperties": true
        },
        "triggering_push": {
          "type": "object",
          "properties": {
            "push_id": {
              "type": "string",
              "format": "uuid"
            }
          },
          "additionalProperties": true
        },
        "last_delivered": {
          "type": "object",
          "properties": {
            "push_id": {
              "type": "string",
              "format": "uuid"
            },
            "group_id": {
              "type": "string",
              "format": "uuid"
            },
            "time": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true
        },
        "transaction": {
          "type": "string",
          "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
        },
        "value": {
          "type": "number"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/LOCATION/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "LOCATION",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "string"
        },
        "longitude": {
          "type": "string"
        },
        "foreground": {
          "type": "boolean"
        },
        "session_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string",
      "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
    },
    "device": {
      "type": "object",
      "properties": {
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/PUSH_BODY/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "PUSH_BODY",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
        },
        "push_id": {
          "type": "string",
          "format": "uuid"
        },
        "group_id": {
          "type": "string",
          "format": "uuid"
        },
        "trimmed": {
          "type": "boolean"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/REGION/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "REGION",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
        },
        "session_id": {
          "type": "string",
          "format": "uuid"
        },
        "proximity": {
          "type": "object",
          "properties": {
            "rssi": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            },
            "id": {
              "type": "string",
              "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
            },
            "lon": {
              "type": "string"
            },
            "major": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            },
            "lat": {
              "type": "string"
            },
            "minor": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            }
          },
          "additionalProperties": true
        },
        "region_id": {
          "type": "string",
          "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
        },
        "action": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/OPEN/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "OPEN",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "triggering_push": {
          "type": "object",
          "properties": {
            "push_id": {
              "type": "string",
              "format": "uuid"
            },
            "group_id": {
              "type": "string",
              "format": "uuid"
            },
            "time": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true
        },
        "session_id": {
          "type": "string",
          "format": "uuid"
        },
        "last_delivered": {
          "type": "object",
          "properties": {
            "push_id": {
              "type": "string",
              "format": "uuid"
            },
            "group_id": {
              "type": "string",
              "format": "uuid"
            },
            "time": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string",
      "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
    },
    "device": {
      "type": "object",
      "properties": {
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/IN_APP_MESSAGE_DISPLAY/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "IN_APP_MESSAGE_DISPLAY",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "push_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/TAG_CHANGE/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "TAG_CHANGE",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "add": {
          "type": "object",
          "properties": {
            "ua_android_app_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_sdk_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "timezone": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_background_enabled": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_location_enabled": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_locale_country": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "i15729": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_locale_language": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_app_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_android_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_model": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "device": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_android_sdk_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_opt_in": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": true
        },
        "remove": {
          "type": "object",
          "properties": {
            "ua_android_app_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_sdk_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "timezone": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_background_enabled": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_location_enabled": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_locale_country": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_locale_language": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_app_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_android_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_model": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "device": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_android_sdk_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_opt_in": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": true
        },
        "current": {
          "type": "object",
          "properties": {
            "ua_android_app_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_sdk_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "timezone": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_background_enabled": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_location_enabled": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_locale_country": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "i15729": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_locale_language": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_app_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_android_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_ios_model": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "device": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_android_sdk_version": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ua_opt_in": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/IN_APP_MESSAGE_EXPIRATION/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "IN_APP_MESSAGE_EXPIRATION",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "push_id": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/SEND/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "SEND",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "push_id": {
          "type": "string",
          "format": "uuid"
        },
        "group_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string",
      "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
    },
    "device": {
      "type": "object",
      "properties": {
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/UNINSTALL/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "UNINSTALL",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/FIRST_OPEN/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "FIRST_OPEN",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/CLOSE/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "CLOSE",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "session_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/RICH_DELIVERY/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "RICH_DELIVERY",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "push_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/RICH_DELETE/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "RICH_DELETE",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "push_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.urbanairship.connect/IN_APP_MESSAGE_RESOLUTION/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.urbanairship.connect",
    "name": "IN_APP_MESSAGE_RESOLUTION",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "body": {
      "type": "object",
      "properties": {
        "push_id": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "maximum": 32767,
          "minimum": 0
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "format": "uuid"
    },
    "offset": {
      "type": "string"
    },
    "processed": {
      "type": "string",
      "format": "date-time"
    },
    "occurred": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    },
    "device": {
      "type": "object",
      "properties": {
        "ios_channel": {
          "type": "string",
          "format": "uuid"
        },
        "amazon_channel": {
          "type": "string",
          "format": "uuid"
        },
        "android_channel": {
          "type": "string",
          "format": "uuid"
        },
        "named_user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely/experiment/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Optimizely experiment context (http://developers.optimizely.com/javascript/reference/#experiments)",
  "self": {
    "vendor": "com.optimizely",
    "name": "experiment",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "id": {
      "type": ["string", "null"]
    },
    "code": {
      "type": ["string", "null"]
    },
    "manual": {
      "type": ["boolean", "null"]
    },
    "conditional": {
      "type": ["boolean", "null"]
    },
    "name": {
      "type": ["string", "null"]
    },
    "variationIds": {
      "type": "array",
      "items": {
        "type": ["string", "null"]
      }
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely/visitor_dimension/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Optimizely visitor_dimension context",
  "self": {
    "vendor": "com.optimizely",
    "name": "visitor_dimension",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "id": {
      "type": ["string", "null"]
    },
    "value": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely/visitor_audience/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Optimizely visitor_audience context",
  "self": {
    "vendor": "com.optimizely",
    "name": "visitor_audience",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "id": {
      "type": ["string", "null"]
    },
    "isMember": {
      "type": ["boolean", "null"]
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely/state/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Optimizely state context (http://developers.optimizely.com/javascript/reference/#state)",
  "self": {
    "vendor": "com.optimizely",
    "name": "state",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "experimentId": {
      "type": ["string", "null"]
    },
    "isActive": {
      "type": ["boolean", "null"]
    },
    "variationIndex": {
      "type": ["integer", "null"],
      "maximum": 32767
    },
    "variationId": {
      "type": ["string", "null"]
    },
    "variationName": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely/visitor/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Optimizely visitor context (http://developers.optimizely.com/javascript/reference/#experiments)",
  "self": {
    "vendor": "com.optimizely",
    "name": "visitor",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "browser": {
      "type": ["string", "null"]
    },
    "browserVersion": {
      "type": ["string", "null"]
    },
    "device": {
      "type": ["string", "null"]
    },
    "deviceType": {
      "type": ["string", "null"]
    },
    "ip": {
      "type": ["string", "null"]
    },
    "platformId": {
      "type": ["string", "null"]
    },
    "platformVersion": {
      "type": ["string", "null"]
    },
    "locationCity": {
      "type": ["string", "null"]
    },
    "locationRegion": {
      "type": ["string", "null"]
    },
    "locationCountry": {
      "type": ["string", "null"]
    },
    "mobile": {
      "type": ["boolean", "null"]
    },
    "mobileId": {
      "type": ["string", "null"]
    },
    "referrer": {
      "type": ["string", "null"]
    },
    "os": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.optimizely/variation/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Optimizely variation context (http://developers.optimizely.com/javascript/reference/#variations)",
  "self": {
    "vendor": "com.optimizely",
    "name": "variation",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "id": {
      "type": ["string", "null"]
    },
    "name": {
      "type": ["string", "null"]
    },
    "code": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics/private/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics private entity",
  "self": {
    "vendor": "com.google.analytics",
    "name": "private",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "v": {
      "type": ["string", "null"],
      "maxLength": 256
    },
    "s": {
      "type": ["integer", "null"]
    },
    "u": {
      "type": ["string", "null"],
      "maxLength": 256
    },
    "gid": {
      "type": ["string", "null"],
      "maxLength": 256
    },
    "r": {
      "type": ["integer", "null"]
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics/undocumented/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics undocumented entity",
  "self": {
    "vendor": "com.google.analytics",
    "name": "undocumented",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "a": {
      "type": ["string", "null"],
      "maxLength": 256
    },
    "jid": {
      "type": ["string", "null"],
      "maxLength": 256
    },
    "gjid": {
      "type": ["string", "null"],
      "maxLength": 256
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics/cookies/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a context of Google Analytics cookie values",
	"self": {
		"vendor": "com.google.analytics",
		"name": "cookies",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"__utma": {
			"type": "string"
		},
		"__utmb": {
			"type": "string"
		},
		"__utmc": {
			"type": "string"
		},
		"__utmv": {
			"type": "string"
		},
		"__utmz": {
			"type": "string"
		},
		"_ga": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.cloud.gce/instance_metadata/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "com.google.cloud.gce",
    "name" : "instance_metadata",
    "format" : "jsonschema",
    "version" : "1-0-0"
  },
  "type" : "object",
  "properties" : {
    "cpuPlatform" : {
      "type" : "string",
      "maxLength" : 64
    },
    "hostname" : {
      "type" : "string",
      "format": "hostname",
      "maxLength": 255
    },
    "tags" : {
      "type" : ["array", "null"],
      "items" : {
        "type" : "string"
      }
    },
    "id" : {
      "type" : "string",
      "maxLength": 32
    },
    "image" : {
      "type" : "string",
      "maxLength": 128
    },
    "machineType" : {
      "type" : "string",
      "maxLength": 64
    },
    "name" : {
      "type" : "string",
      "maxLength": 64
    },
    "zone" : {
      "type" : "string",
      "maxLength" : 64
    },
    "attributes": {
      "type" : ["object", "null"]
    }
  },
  "required": ["cpuPlatform", "hostname", "id", "image", "machineType", "name", "zone", "attributes", "tags"],
  "additionalProperties" : false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.iterable/system_webhook/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an event from Iterable system webhooks",
  "self": {
    "vendor": "com.iterable",
    "name": "system_webhook",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "email": {
      "type": "string",
      "description": "The email address associated with the event",
      "maxLength": 254,
      "format": "email"
    },
    "eventName": {
      "type": "string",
      "description": "The name of the event for which a webhook has been triggered",
      "maxLength": 4096
    },
    "dataFields": {
      "type": "object",
      "properties": {
        "appAlreadyRunning": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Whether or not the app was already running when the push notification arrived."
        },
        "badge": {
          "type": [
            "string",
            "null"
          ],
          "description": "Badge to set for push notification",
          "maxLength": 4096
        },
        "bounceMessage": {
          "type": [
            "string",
            "null"
          ],
          "description": "E-mail bounce message.",
          "maxLength": 4096
        },
        "browserToken": {
          "type": [
            "string",
            "null"
          ],
          "description": "Token provided by Firebase Messaging javascript API.",
          "maxLength": 4096
        },
        "campaignId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "Reference to the campaign from which the event originated (e.g., 74768)"
        },
        "campaignName": {
          "type": [
            "string",
            "null"
          ],
          "description": "Campaign name",
          "maxLength": 4096
        },
        "canonicalUrlId": {
          "type": [
            "string",
            "null"
          ],
          "description": "Reference to the URL associated with the event (e.g., '3145668988')",
          "maxLength": 4096
        },
        "catalogCollectionCount": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 2147483647,
          "description": "The number of times a catalog collection was referenced in the message."
        },
        "catalogLookupCount": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 2147483647,
          "description": "The number of times a catalog was referenced in the message."
        },
        "channelId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "Unique identifier of the channel (e.g., 2203)"
        },
        "channelIds": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9223372036854775807
          },
          "description": "Channel IDs"
        },
        "city": {
          "type": [
            "string",
            "null"
          ],
          "description": "City (e.g., 'San Jose')",
          "maxLength": 4096
        },
        "contentAvailable": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Is content available"
        },
        "contentId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "Reference to the content the event is associated with (e.g., 3681)"
        },
        "country": {
          "type": [
            "string",
            "null"
          ],
          "description": "Country (e.g., 'United States')",
          "maxLength": 4096
        },
        "createdAt": {
          "type": [
            "string",
            "null"
          ],
          "description": "Creation timestamp (e.g., '2017-05-15 23:59:47 +00:00')",
          "maxLength": 255
        },
        "deeplink": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "android": {
              "type": [
                "string",
                "null"
              ],
              "maxLength": 4096
            },
            "ios": {
              "type": [
                "string",
                "null"
              ],
              "maxLength": 4096
            }
          },
          "additionalProperties": true,
          "description": "Deep Link. A mapping that accepts two optional properties: 'ios' & 'android' and their respective deep link values."
        },
        "device": {
          "type": [
            "string",
            "null"
          ],
          "description": "Device application name (e.g., 'Gmail')",
          "maxLength": 4096
        },
        "email": {
          "type": [
            "string",
            "null"
          ],
          "description": "Reference to the unique user the event was applied to.",
          "maxLength": 254,
          "format": "email"
        },
        "emailId": {
          "type": [
            "string",
            "null"
          ],
          "description": "Reference to the email associated with the event (e.g., 'c59667:t93849:docs@iterable.com')",
          "maxLength": 4096
        },
        "emailIds": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string",
            "maxLength": 4096,
            "description": "Reference to email"
          },
          "description": "References to emails associated with the event"
        },
        "emailListIds": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9223372036854775807
          },
          "description": "Lists that a user is subscribed to"
        },
        "emailSubject": {
          "type": [
            "string",
            "null"
          ],
          "description": "Subject of the email associated with the event",
          "maxLength": 998
        },
        "experimentId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "Reference to the experiment used if the event is an experiment"
        },
        "expiresAt": {
          "type": [
            "string",
            "null"
          ],
          "description": "Expires at (e.g., '2019-08-08 22:37:40 +00:00')",
          "maxLength": 255
        },
        "firstName": {
          "type": [
            "string",
            "null"
          ],
          "description": "First name",
          "maxLength": 4096
        },
        "fromPhoneNumber": {
          "type": [
            "string",
            "null"
          ],
          "description": "Phone number which the event is from (e.g., '+16503926753')",
          "maxLength": 255
        },
        "fromPhoneNumberId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "Reference to the phone number which the event is from (e.g., 258)"
        },
        "fromSMSSenderId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "Reference to the SMS sender which the event is from (e.g., 258)"
        },
        "imageUrl": {
          "type": [
            "string",
            "null"
          ],
          "description": "Image URL of the event.",
          "format": "uri",
          "maxLength": 4096
        },
        "ip": {
          "type": [
            "string",
            "null"
          ],
          "description": "IP address (e.g., '192.168.0.1')",
          "format": "ipv4",
          "maxLength": 128
        },
        "isGhostPush": {
          "type": [
            "boolean",
            "null"
          ],
          "description": "Boolean indicating if the event is a result of a ghost push"
        },
        "labels": {
          "type": [
            "array",
            "null"
          ],
          "description": "Labels",
          "items": {
            "type": "string",
            "description": "Label",
            "maxLength": 4096
          }
        },
        "lastName": {
          "type": [
            "string",
            "null"
          ],
          "description": "Last name",
          "maxLength": 4096
        },
        "linkId": {
          "type": [
            "string",
            "null"
          ],
          "description": "Reference to the link associated with the event (e.g., '3145668988')",
          "maxLength": 4096
        },
        "linkUrl": {
          "type": [
            "string",
            "null"
          ],
          "description": "URL of the link associated with the event",
          "format": "uri",
          "maxLength": 4096
        },
        "locale": {
          "type": [
            "string",
            "null"
          ],
          "description": "Locale associated with the event",
          "maxLength": 4096
        },
        "messageBusId": {
          "type": [
            "string",
            "null"
          ],
          "description": "Message bus ID",
          "maxLength": 4096
        },
        "messageContext": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "saveToInbox": {
              "type": [
                "boolean",
                "null"
              ],
              "description": "Save to inbox"
            },
            "trigger": {
              "type": [
                "string",
                "null"
              ],
              "description": "Trigger (e.g., 'immediate')",
              "maxLength": 4096
            }
          },
          "description": "An object containing various fields that describe the message associated with the event",
          "additionalProperties": true
        },
        "messageId": {
          "type": [
            "string",
            "null"
          ],
          "description": "Reference to the message the event is associated with (e.g., 'vA16d48VVi4LQ5hMuZuquKzL0BXTdQJJUMJRjKnL1')",
          "maxLength": 4096
        },
        "messageTypeId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 2147483647,
          "description": "Reference to the type of message the event is associated with (e.g., 14381)"
        },
        "messageTypeIds": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2147483647
          },
          "description": "Message type IDs"
        },
        "platformEndpoint": {
          "type": [
            "string",
            "null"
          ],
          "description": "The specific platform endpoint of the event",
          "maxLength": 4096
        },
        "productRecommendationCount": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 2147483647,
          "description": "Product recommendation count."
        },
        "profileUpdatedAt": {
          "type": [
            "string",
            "null"
          ],
          "description": "2020-03-20 23:11:58 +00:00",
          "maxLength": 255
        },
        "proxySource": {
          "type": [
            "string",
            "null"
          ],
          "description": "Proxy source (e.g., 'Apple')",
          "maxLength": 4096
        },
        "pushMessage": {
          "type": [
            "string",
            "null"
          ],
          "description": "Push message text",
          "maxLength": 4096
        },
        "reason": {
          "type": [
            "string",
            "null"
          ],
          "description": "Reason (e.g., 'DuplicateMarketingMessage')",
          "maxLength": 4096
        },
        "recipientState": {
          "type": [
            "string",
            "null"
          ],
          "description": "The state of the recipient upon receiving the event (e.g., 'HardBounce')",
          "maxLength": 4096
        },
        "region": {
          "type": [
            "string",
            "null"
          ],
          "description": "Region of the event (e.g., 'CA')",
          "maxLength": 4096
        },
        "signupSource": {
          "type": [
            "string",
            "null"
          ],
          "description": "Sign-up source (e.g., 'UpdateSubscriptionsAPI')",
          "maxLength": 4096
        },
        "smsMessage": {
          "type": [
            "string",
            "null"
          ],
          "description": "SMS message text",
          "maxLength": 4096
        },
        "smsProviderResponse": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "status": {
              "type": [
                "integer",
                "null"
              ],
              "maximum": 2147483647,
              "minimum": -2147483648,
              "description": "Status of the SMS provider response from the event (e.g., 404)"
            },
            "message": {
              "type": [
                "string",
                "null"
              ],
              "description": "SMS provider response message from the event (e.g., 'The requested resource was not found'",
              "maxLength": 4096
            },
            "code": {
              "type": [
                "integer",
                "null"
              ],
              "maximum": 2147483647,
              "minimum": -2147483648,
              "description": "SMS provider response code from the event (e.g., 20404)"
            },
            "more_info": {
              "type": [
                "string",
                "null"
              ],
              "description": "SMS provider response addition info from the event (e.g, a URL)",
              "maxLength": 4096
            }
          },
          "description": "SMS provider response",
          "additionalProperties": true
        },
        "sound": {
          "type": [
            "string",
            "null"
          ],
          "description": "Sound",
          "maxLength": 4096
        },
        "status": {
          "type": [
            "string",
            "null"
          ],
          "description": "Status (e.g., '5.1.2')",
          "maxLength": 4096
        },
        "templateId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "The ID of the Iterable template (e.g., 167484)"
        },
        "templateName": {
          "type": [
            "string",
            "null"
          ],
          "description": "Template name",
          "maxLength": 4096
        },
        "toPhoneNumber": {
          "type": [
            "string",
            "null"
          ],
          "description": "To phone number associated with the event (e.g., '+16503926753')",
          "maxLength": 255
        },
        "unsubSource": {
          "type": [
            "string",
            "null"
          ],
          "description": "Source of the unsubscribe event (e.g., 'EmailLink')",
          "maxLength": 4096
        },
        "url": {
          "type": [
            "string",
            "null"
          ],
          "description": "URL associated with the event",
          "format": "uri",
          "maxLength": 4096
        },
        "userAgent": {
          "type": [
            "string",
            "null"
          ],
          "description": "User agent associated with the event",
          "maxLength": 4096
        },
        "userAgentDevice": {
          "type": [
            "string",
            "null"
          ],
          "description": "The device of the user agent (e.g., 'Mac')",
          "maxLength": 4096
        },
        "webPushBody": {
          "type": [
            "string",
            "null"
          ],
          "description": "Web push notification body",
          "maxLength": 4096
        },
        "webPushClickAction": {
          "type": [
            "string",
            "null"
          ],
          "description": "Web push notification click action",
          "maxLength": 4096
        },
        "webPushIcon": {
          "type": [
            "string",
            "null"
          ],
          "description": "Web push notification icon",
          "maxLength": 4096
        },
        "webPushMessage": {
          "type": [
            "string",
            "null"
          ],
          "description": "Web push notification message",
          "maxLength": 4096
        },
        "workflowId": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "maximum": 9223372036854775807,
          "description": "Reference to the workflow which the event originated (e.g., 53505)"
        },
        "workflowName": {
          "type": [
            "string",
            "null"
          ],
          "description": "Name of the workflow which the event originated",
          "maxLength": 4096
        }
      },
      "description": "Information stored with the event.",
      "additionalProperties": true
    }
  },
  "minProperties": 3,
  "required": [
    "email",
    "eventName",
    "dataFields"
  ],
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.schema/WebPage/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a schema.org WebPage (http://schema.org/WebPage). This is a very limited subset of fields - in future ADDITIONs to this schema we can add more fields. This attempts to be a faithful mapping with a few improvements for analytics - for example, breadcrumbs and keywords become an array of strings not a single string with arbitrary divider. Where we don't want to drill into a type (e.g. author as a Person or Organization), we simply set to string.",
	"self": {
		"vendor": "org.schema",
		"name": "WebPage",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"breadcrumb": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"genre": {
			"type": "string"
		},
		"author": {
			"type": "string"
		},
		"dateCreated": {
			"type": "string",
			"format": "date-time"
		},
		"dateModified": {
			"type": "string",
			"format": "date-time"
		},
		"datePublished": {
			"type": "string",
			"format": "date-time"
		},
		"inLanguage": {
			"type": "string"
		},
		"keywords": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	},
	"minProperties": 1,
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.common/payload_data/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Gametuner payload",
	"self": {
		"vendor": "com.algebraai.gametuner.common",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			},
			"stm": {
				"type": "string"
			},
			"sid": {
				"type": "string"
			},
			"ttm": {
				"type": "string"
			},
			"ak": {
				"type": "string"
			},
            "sm": {
                "type": "string"
            }
		},
		"required": ["tv", "p", "e","ak"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.common/payload_data/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Gametuner payload",
	"self": {
		"vendor": "com.algebraai.gametuner.common",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			},
			"stm": {
				"type": "string"
			},
			"sid": {
				"type": "string"
			},
			"ttm": {
				"type": "string"
			},
			"ak": {
				"type": "string"
			},
            "sm": {
                "type": "string"
            },
            "bm": {
                "type": "string"
            }
		},
		"required": ["tv", "p", "e","ak"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.algebraai.gametuner.common/payload_data/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Gametuner payload",
	"self": {
		"vendor": "com.algebraai.gametuner.common",
		"name": "payload_data",
		"format": "jsonschema",
		"version": "1-0-2"
	},

	"type": "array",
	"items":{

		"type": "object",
		"properties": {
			"tna": {
				"type": "string"
			},
			"aid": {
				"type": "string"
			},
			"p": {
				"type": "string"
			},
			"dtm": {
				"type": "string"
			},
			"tz": {
				"type": "string"
			},
			"e": {
				"type": "string"
			},
			"tid": {
				"type": "string"
			},
			"eid": {
				"type": "string"
			},
			"tv": {
				"type": "string"
			},
			"duid": {
				"type": "string"
			},
			"nuid": {
				"type": "string"
			},
			"uid": {
				"type": "string"
			},
			"iid": {
				"type": "string"
			},
			"vid": {
				"type": "string"
			},
			"ip": {
				"type": "string"
			},
			"res": {
				"type": "string"
			},
			"url": {
				"type": "string"
			},
			"page": {
				"type": "string"
			},
			"refr": {
				"type": "string"
			},
			"fp": {
				"type": "string"
			},
			"ctype": {
				"type": "string"
			},
			"cookie": {
				"type": "string"
			},
			"lang": {
				"type": "string"
			},
			"f_pdf": {
				"type": "string"
			},
			"f_qt": {
				"type": "string"
			},
			"f_realp": {
				"type": "string"
			},
			"f_wma": {
				"type": "string"
			},
			"f_dir": {
				"type": "string"
			},
			"f_fla": {
				"type": "string"
			},
			"f_java": {
				"type": "string"
			},
			"f_gears": {
				"type": "string"
			},
			"f_ag": {
				"type": "string"
			},
			"cd": {
				"type": "string"
			},
			"ds": {
				"type": "string"
			},
			"cs": {
				"type": "string"
			},
			"vp": {
				"type": "string"
			},
			"mac": {
				"type": "string"
			},
			"pp_mix": {
				"type": "string"
			},
			"pp_max": {
				"type": "string"
			},
			"pp_miy": {
				"type": "string"
			},
			"pp_may": {
				"type": "string"
			},
			"ad_ba": {
				"type": "string"
			},
			"ad_ca": {
				"type": "string"
			},
			"ad_ad": {
				"type": "string"
			},
			"ad_uid": {
				"type": "string"
			},
			"tr_id": {
				"type": "string"
			},
			"tr_af": {
				"type": "string"
			},
			"tr_tt": {
				"type": "string"
			},
			"tr_tx": {
				"type": "string"
			},
			"tr_sh": {
				"type": "string"
			},
			"tr_ci": {
				"type": "string"
			},
			"tr_st": {
				"type": "string"
			},
			"tr_co": {
				"type": "string"
			},
			"tr_cu": {
				"type": "string"
			},
			"ti_id": {
				"type": "string"
			},
			"ti_sk": {
				"type": "string"
			},
			"ti_nm": {
				"type": "string"
			},
			"ti_na": {
				"type": "string"
			},
			"ti_ca": {
				"type": "string"
			},
			"ti_pr": {
				"type": "string"
			},
			"ti_qu": {
				"type": "string"
			},
			"ti_cu": {
				"type": "string"
			},
			"sa": {
				"type": "string"
			},
			"sn": {
				"type": "string"
			},
			"st": {
				"type": "string"
			},
			"sp": {
				"type": "string"
			},
			"se_ca": {
				"type": "string"
			},
			"se_ac": {
				"type": "string"
			},
			"se_la": {
				"type": "string"
			},
			"se_pr": {
				"type": "string"
			},
			"se_va": {
				"type": "string"
			},
			"ue_na": {
				"type": "string"
			},
			"ue_pr": {
				"type": "string"
			},
			"ue_px": {
				"type": "string"
			},
			"co": {
				"type": "string"
			},
			"cx": {
				"type": "string"
			},
			"ua": {
				"type": "string"
			},
			"tnuid": {
				"type": "string"
			},
			"stm": {
				"type": "string"
			},
			"sid": {
				"type": "string"
			},
			"ttm": {
				"type": "string"
			},
			"ak": {
				"type": "string"
			},
            "sm": {
                "type": "string"
            },
            "bm": {
                "type": "string"
            },
            "gc": {
                "type": "string"
            },
            "gcn": {
                "type": "string"
            }
		},
		"required": ["tv", "p", "e","ak"],
		"additionalProperties": false
	},
	"minItems": 1
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.kinesis/stream_write_failed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a stream write failure",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.kinesis",
		"name": "stream_write_failed",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"errorType": {
			"type": "string"
		},
		"errorMessage": {
			"type": "string"
		},
		"streamName": {
			"type": "string"
		},
		"appName": {
			"type": "string"
		},
		"retryCount": {
			"type": "number"
		},
		"putSize": {
			"type": "number"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.kinesis/app_initialized/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an application initialization event",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.kinesis",
		"name": "app_initialized",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"applicationName": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.kinesis/app_heartbeat/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for heartbeat event",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.kinesis",
		"name": "app_heartbeat",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"properties": {
		"interval": {
			"type": "number"
		}
	},

	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.kinesis/app_warning/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for application warning event",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.kinesis",
		"name": "app_warning",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"properties": {
		"warning": {
			"type": "string"
		}
	},

	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.kinesis/storage_write_failed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a write to a storage sink failing",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.kinesis",
		"name": "storage_write_failed",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"properties": {
		"storage": {
			"enum": [ "AMAZON_S3", "ELASTICSEARCH" ]
		},
		"failureCount": {
			"type": "integer",
			"maximum": 2147483647,
			"minimum": 0
		},
		"initialFailureTime": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"lastRetryPeriod": {
			"type": "integer",
			"maximum": 9223372036854775807,
			"minimum": 0
		},
		"message": {
			"type": ["string", "null"]
		}
	},

	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.kinesis/app_shutdown/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an application shutdown event",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.kinesis",
		"name": "app_shutdown",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.pagerduty.sauna.commands/create_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a PagerDuty event command",
  "self": {
    "vendor": "com.pagerduty.sauna.commands",
    "name": "create_event",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "anyOf": [
    {
      "properties": {
        "service_key": {
          "type": "string"
        },
        "event_type": {
          "enum": [
            "trigger"
          ]
        },
        "incident_key": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "properties": {},
          "additionalProperties": true
        },
        "client": {
          "type": "string"
        },
        "client_url": {
          "type": "string"
        },
        "contexts": {
          "type": "array",
          "items": {
            "type": "object",
            "anyOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "link"
                    ]
                  },
                  "href": {
                    "type": "string"
                  },
                  "text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "href"
                ],
                "additionalProperties": false
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "image"
                    ]
                  },
                  "src": {
                    "type": "string"
                  },
                  "href": {
                    "type": "string"
                  },
                  "alt": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "src"
                ],
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "required": [
        "service_key",
        "event_type",
        "description"
      ],
      "additionalProperties": false
    },
    {
      "properties": {
        "service_key": {
          "type": "string"
        },
        "event_type": {
          "enum": [
            "acknowledge",
            "resolve"
          ]
        },
        "incident_key": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "properties": {},
          "additionalProperties": true
        }
      },
      "required": [
        "service_key",
        "event_type",
        "incident_key"
      ],
      "additionalProperties": false
    }
  ]
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.r2f/removal_criteria/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for R2F (Right to be forgotten) criteria files that contain the identifiers for events that should be deleted.",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.r2f",
    "name": "removal_criteria",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "pojo": {
      "description": "A scalar field from the EnrichedEvent POJO (e.g. user_id)",
      "type": "object",
      "properties": {
        "fieldName": {
          "enum": [
            "user_id",
            "user_ipaddress",
            "user_fingerprint",
            "domain_userid",
            "network_userid",
            "ip_organization",
            "ip_domain",
            "tr_orderid",
            "ti_orderid",
            "mkt_term",
            "mkt_content",
            "se_category",
            "se_action",
            "se_label",
            "se_property",
            "mkt_clickid",
            "refr_domain_userid",
            "domain_sessionid"
          ],
          "description": "The name of the field"
        },
        "valueForWhichEventWillBeDeleted": {
          "type": "string",
          "description": "The value that, if present in that field, will cause the event to be deleted"
        }
      },
      "additionalProperties": false,
      "required": [
        "fieldName",
        "valueForWhichEventWillBeDeleted"
      ]
    },
    "json": {
      "description": "A JSON field from the EnrichedEvent POJO (e.g. contexts).",
      "type": "object",
      "properties": {
        "fieldName": {
          "enum": [
            "contexts",
            "derived_contexts",
            "unstruct_event"
          ],
          "description": "The name of the field"
        },
        "jsonPath": {
          "type": "string",
          "description": "The JsonPath that was specified"
        },
        "valueForWhichEventWillBeDeleted": {
          "type": "string",
          "description": "The value that, if present in that field, will cause the event to be deleted"
        },
        "schemaCriterion": {
          "type": "string",
          "description": "The iglu schema corresponding to this field and value",
          "pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
        }
      },
      "required": [
        "fieldName",
        "jsonPath",
        "valueForWhichEventWillBeDeleted",
        "schemaCriterion"
      ],
      "additionalProperties": false
    }
  },
  "oneOf": [
    {
      "required": [
        "pojo"
      ]
    },
    {
      "required": [
        "json"
      ]
    }
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailchimp/campaign_sending_status/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mailchimp campaign sending status event",
	"self": {
		"vendor": "com.mailchimp",
		"name": "campaign_sending_status",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"data": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"list_id": {
					"type": "string"
				},
				"reason": {
					"type": ["string","null"]
				},
				"status": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"fired_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailchimp/profile_update/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mailchimp profile update event",
	"self": {
		"vendor": "com.mailchimp",
		"name": "profile_update",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"data": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"email_type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"web_id": {
					"type": "string"
				},
				"ip_opt": {
					"type": "string"
				},
				"list_id": {
					"type": "string"
				},
				"merges": {
					"type": "object",
					"properties": {
						"EMAIL": {
							"type": ["string", "null"]
						},
						"FNAME": {
							"type": ["string", "null"]
						},
						"LNAME": {
							"type": ["string", "null"]
						},
						"INTERESTS": {
							"type": ["string", "null"]
						}
					},
					"additionalProperties": true
				}
			},
			"additionalProperties": false
		},
		"fired_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailchimp/cleaned_email/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mailchimp cleaned email event",
	"self": {
		"vendor": "com.mailchimp",
		"name": "cleaned_email",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"data": {
			"type": "object",
			"properties": {
				"campaign_id": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"list_id": {
					"type": "string"
				},
				"reason": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"fired_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailchimp/unsubscribe/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mailchimp unsubscribe event",
	"self": {
		"vendor": "com.mailchimp",
		"name": "unsubscribe",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"data": {
			"type": "object",
			"properties": {
				"action": {
					"type": "string"
				},
				"campaign_id": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"email_type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"web_id": {
					"type": "string"
				},
				"ip_opt": {
					"type": "string"
				},
				"list_id": {
					"type": "string"
				},
				"reason": {
					"type": "string"
				},
				"merges": {
					"type": "object",
					"properties": {
						"EMAIL": {
							"type": ["string", "null"]
						},
						"FNAME": {
							"type": ["string", "null"]
						},
						"LNAME": {
							"type": ["string", "null"]
						},
						"INTERESTS": {
							"type": ["string", "null"]
						}
					},
					"additionalProperties": true
				}
			},
			"additionalProperties": false
		},
		"fired_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailchimp/subscribe/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mailchimp subscribe event",
	"self": {
		"vendor": "com.mailchimp",
		"name": "subscribe",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"data": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"email_type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"web_id": {
					"type": "string"
				},
				"ip_opt": {
					"type": "string"
				},
				"ip_signup": {
					"type": "string"
				},
				"list_id": {
					"type": "string"
				},
				"merges": {
					"type": "object",
					"properties": {
						"EMAIL": {
							"type": ["string", "null"]
						},
						"FNAME": {
							"type": ["string", "null"]
						},
						"LNAME": {
							"type": ["string", "null"]
						},
						"INTERESTS": {
							"type": ["string", "null"]
						}
					},
					"additionalProperties": true
				}
			},
			"additionalProperties": false
		},
		"fired_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailchimp/email_address_change/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mailchimp email address change event",
	"self": {
		"vendor": "com.mailchimp",
		"name": "email_address_change",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"data": {
			"type": "object",
			"properties": {
				"list_id": {
					"type": "string"
				},
				"new_email": {
					"type": "string"
				},
				"new_id": {
					"type": "string"
				},
				"old_email": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"fired_at": {
			"type": "string",
			"format": "date-time"
		},
		"type": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.observers/AmazonKinesisConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.observers",
  "name": "AmazonKinesisConfig_1_0_0",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    {
      "name": "parameters",
      "type": {
        "name": "AmazonKinesisObserverParameters_1_0_0",
        "type": "record",
        "fields": [
          {
            "name": "aws",
            "type": {
              "name": "AwsConfigParameters_1_0_0",
              "type": "record",
              "fields": [
                {
                  "name": "accessKeyId",
                  "type": "string"
                },
                {
                  "name": "secretAccessKey",
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "kinesis",
            "type": {
              "name": "AmazonKinesisConfigParameters_1_0_0",
              "type": "record",
              "fields": [
                {
                  "name": "region",
                  "type": "string"
                },
                {
                  "name": "streamName",
                  "type": "string"
                },
                {
                  "name": "maxRecords",
                  "type": "int"
                },
                {
                  "name": "initialPosition",
                  "type": {
                    "name": "ShardIteratorType_1_0_0",
                    "type": "enum",
                    "symbols": [
                      "AT_TIMESTAMP",
                      "LATEST",
                      "TRIM_HORIZON"
                    ]
                  }
                },
                {
                  "name": "initialPositionModifiers",
                  "type": [
                    {
                      "name": "InitialPositionModifiers_1_0_0",
                      "type": "record",
                      "fields": [
                        {
                          "name": "timestamp",
                          "type": [
                            {
                              "type": "long",
                              "logicalType": "timestamp-millis"
                            },
                            "null"
                          ]
                        }
                      ]
                    },
                    "null"
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  ]
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.observers/AmazonS3Config/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.observers",
  "name": "AmazonS3Config_1_0_0",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    { "name": "parameters",
      "type": {
        "name": "AmazonS3ConfigParameters_1_0_0",
        "type": "record",
        "fields": [
          {
            "name": "awsRegion",
            "type": "string"
          },
          {
            "name": "awsAccessKeyId",
            "type": "string"
          },
          {
            "name": "awsSecretAccessKey",
            "type": "string"
          },
          {
            "name": "sqsQueueName",
            "type": "string"
          }
        ]
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.observers/LocalFilesystemConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.observers",
  "name": "LocalFilesystemConfig_1_0_0",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    { "name": "parameters",
      "type": {
        "name": "LocalFilesystemConfigParameters_1_0_0",
        "type": "record",
        "fields": [
          {
            "name": "saunaRoot",
            "type": "string"
          }
        ]
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.apple/notification_event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a local or remote push notification",
    "self": {
        "vendor": "com.apple",
        "name": "notification_event",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "action": {
            "type": "string",
            "maxLength": 100
        },
        "categoryIdentifier": {
            "type": "string",
            "maxLength": 100
        },
        "threadIdentifier": {
            "type": "string",
            "maxLength": 100
        },
        "trigger": {
            "type": "string",
            "enum": ["PUSH", "LOCATION", "CALENDAR", "TIME_INTERVAL"]
        },
        "deliveryDate": {
            "type": "string",
            "maxLength": 100
        },
        "notification": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "maxLength": 300
                },
                "subtitle": {
                    "type": "string",
                    "maxLength": 300
                },
                "body": {
                    "type": "string",
                    "maxLength": 1000
                },
                "badge": {
                    "type": "integer"
                },
                "sound": {
                    "type": "string",
                    "maxLength": 300
                },
                "launchImageName": {
                    "type": "string",
                    "maxLength": 300
                },
                "userInfo": {
                    "type": "object",
                    "properties": {
                        "aps": {
                            "type": "object",
                            "properties": {
                                "alert": {
                                    "type": ["string", "object"],
                                    "properties": {
                                        "title": {
                                            "type": "string",
                                            "maxLength": 300
                                        },
                                        "body": {
                                            "type": "string",
                                            "maxLength": 1000
                                        },
                                        "titleLocKey": {
                                            "type": "string",
                                            "maxLength": 100
                                        },
                                        "titleLocArgs": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "maxLength": 100
                                            },
                                            "minItems": 1
                                        },
                                        "actionLocKey": {
                                            "type": "string",
                                            "maxLength": 100
                                        },
                                        "locKey": {
                                            "type": "string",
                                            "maxLength": 100
                                        },
                                        "locArgs": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "maxLength": 100
                                            },
                                            "minItems": 1
                                        },
                                        "launchImage": {
                                            "type": "string",
                                            "maxLength": 300
                                        }
                                    },
                                    "required": ["title", "body"],
                                    "additionalProperties": { "type": ["string", "number"] }
                                },
                                "badge": {
                                    "type": "integer"
                                },
                                "sound": {
                                    "type": "string",
                                    "maxLength": 300
                                },
                                "contentAvailable": {
                                    "type": "boolean"
                                },
                                "category": {
                                    "type": "string",
                                    "maxLength": 100
                                },
                                "threadId": {
                                    "type": "string",
                                    "maxLength": 100
                                }
                            },
                            "required": ["alert"],
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": { "type": ["object", "array", "string", "number", "boolean"] }
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "type": "string",
                                "maxLength": 100
                            },
                            "url": {
                                "type": "string",
                                "maxLength": 750
                            },
                            "type": {
                                "type": "string",
                                "maxLength": 100
                            }
                        },
                        "required": ["identifier", "url", "type"],
                        "additionalProperties": false
                    }
                }
            },
            "required": ["title", "body"],
            "additionalProperties": false
        }
    },
    "required": ["action", "categoryIdentifier", "threadIdentifier", "trigger", "deliveryDate", "notification"],
    "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.apple/notification_event/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a local or remote push notification",
    "self": {
        "vendor": "com.apple",
        "name": "notification_event",
        "format": "jsonschema",
        "version": "1-0-1"
    },

    "type": "object",
    "properties": {
        "action": {
            "type": "string",
            "maxLength": 100
        },
        "categoryIdentifier": {
            "type": "string",
            "maxLength": 100
        },
        "threadIdentifier": {
            "type": "string",
            "maxLength": 100
        },
        "trigger": {
            "type": "string",
            "enum": ["PUSH", "LOCATION", "CALENDAR", "TIME_INTERVAL"]
        },
        "deliveryDate": {
            "type": "string",
            "maxLength": 100
        },
        "notification": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "maxLength": 300
                },
                "subtitle": {
                    "type": "string",
                    "maxLength": 300
                },
                "body": {
                    "type": "string",
                    "maxLength": 1000
                },
                "badge": {
                    "type": "integer"
                },
                "sound": {
                    "type": "string",
                    "maxLength": 300
                },
                "launchImageName": {
                    "type": "string",
                    "maxLength": 300
                },
                "userInfo": {
                    "type": "object",
                    "properties": {
                        "aps": {
                            "type": "object",
                            "properties": {
                                "alert": {
                                    "type": ["string", "object"],
                                    "properties": {
                                        "title": {
                                            "type": "string",
                                            "maxLength": 300
                                        },
                                        "body": {
                                            "type": "string",
                                            "maxLength": 1000
                                        },
                                        "titleLocKey": {
                                            "type": "string",
                                            "maxLength": 100
                                        },
                                        "titleLocArgs": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "maxLength": 100
                                            },
                                            "minItems": 1
                                        },
                                        "actionLocKey": {
                                            "type": "string",
                                            "maxLength": 100
                                        },
                                        "locKey": {
                                            "type": "string",
                                            "maxLength": 100
                                        },
                                        "locArgs": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "maxLength": 100
                                            },
                                            "minItems": 1
                                        },
                                        "launchImage": {
                                            "type": "string",
                                            "maxLength": 300
                                        }
                                    },
                                    "required": ["title", "body"],
                                    "additionalProperties": { "type": ["string", "number"] }
                                },
                                "badge": {
                                    "type": "integer"
                                },
                                "sound": {
                                    "type": "string",
                                    "maxLength": 300
                                },
                                "contentAvailable": {
                                    "type": "boolean"
                                },
                                "category": {
                                    "type": "string",
                                    "maxLength": 100
                                },
                                "threadId": {
                                    "type": "string",
                                    "maxLength": 100
                                }
                            },
                            "required": ["alert"],
                            "additionalProperties": true
                        }
                    },
                    "additionalProperties": { "type": ["object", "array", "string", "number", "boolean"] }
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "type": "string",
                                "maxLength": 100
                            },
                            "url": {
                                "type": "string",
                                "maxLength": 750
                            },
                            "type": {
                                "type": "string",
                                "maxLength": 100
                            }
                        },
                        "required": ["identifier", "url", "type"],
                        "additionalProperties": false
                    }
                }
            },
            "required": ["title", "body"],
            "additionalProperties": false
        }
    },
    "required": ["action", "categoryIdentifier", "threadIdentifier", "trigger", "deliveryDate", "notification"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/anything-a/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Wildcard schema #1 to match any valid JSON instance",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "anything-a",
		"format": "jsonschema",
		"version": "1-0-0"
	}
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/anything-c/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Wildcard schema #3 to match any valid JSON instance",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "anything-c",
		"format": "jsonschema",
		"version": "1-0-0"
	}
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/SchemaSniffer/thrift/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"description": "Schema the self-describing Thrift schema sniffer",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "SchemaSniffer",
		"format": "thrift",
		"version": "1-0-0"
	},

	"idl": "namespace java com.snowplowanalytics.snowplow.SchemaSniffer.thrift.model1\\nstruct SchemaSniffer {\\n  31337: string schema\\n}"
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/igluctl_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for Igluctl's configuration",
  "self": {
    "vendor": "com.snowplowanalytics.iglu",
    "name": "igluctl_config",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "description": {
      "description": "Human-readable & short description the configuration",
      "type": "string"
    },
    "input": {
      "description": "Path to input schemas",
      "type": "string",
      "format": "uri"
    },
    "lint": {
      "description": "Configuration for lint command",
      "type": "object",
      "properties": {
        "skipWarnings": {
          "description": "Don't output messages with log level less than ERROR",
          "type": [
            "boolean",
            "null"
          ],
          "default": false
        },
        "includedChecks": {
          "description": "Lint using provided linters",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string",
            "enum": [
              "rootObject",
              "unknownFormats",
              "numericMinMax",
              "stringLength",
              "optionalNull",
              "description",
              "stringMaxLengthRange"
            ]
          }
        }
      },
      "required": [
        "skipWarnings",
        "includedChecks"
      ]
    },
    "generate": {
      "description": "Configuration for static generate command",
      "type": "object",
      "properties": {
        "output": {
          "description": "Directory to put generated data",
          "type": [
            "string",
            "null"
          ],
          "default": "."
        },
        "dbschema": {
          "description": "Redshift database schema (e.g. 'atomic')",
          "type": [
            "string",
            "null"
          ],
          "minLength": 1,
          "maxLength": 128,
          "default": "atomic"
        },
        "owner": {
          "description": "Redshift table owner",
          "type": [
            "string",
            "null"
          ],
          "maxLength": 128
        },
        "varcharSize": {
          "description": "Redshift varchar size",
          "type": [
            "integer",
            "null"
          ],
          "minimum": 1,
          "maximum": 65535,
          "default": 4096
        },
        "withJsonPaths": {
          "description": "Produce JSON Paths files with DDL or not",
          "type": [
            "boolean",
            "null"
          ],
          "default": true
        },
        "noHeader": {
          "description": "Place header comments into output DDL or not",
          "type": "boolean",
          "default": false
        },
        "force": {
          "description": "Force overwrite existing manually-edited files",
          "type": [
            "boolean",
            "null"
          ],
          "default": false
        }
      },
      "required": [
        "output",
        "dbschema",
        "owner",
        "varcharSize",
        "withJsonPaths",
        "noHeader",
        "force"
      ]
    },
    "actions": {
      "description": "Configuration for s3cp and push commands",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "object",
        "anyOf": [
          {
            "description": "Configuration for static push command",
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "push"
                ]
              },
              "registry": {
                "type": "string",
                "format": "uri"
              },
              "isPublic": {
                "type": "boolean",
                "default": false
              },
              "apikey": {
                "oneOf": [
                  {
                    "format": "uuid"
                  },
                  {
                    "pattern": "^\\$[A-Z0-9-_]+"
                  }
                ]
              }
            },
            "required": [
              "action",
              "registry",
              "isPublic",
              "apikey"
            ]
          },
          {
            "description": "Configuration for static s3cp command",
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "s3cp"
                ]
              },
              "uploadFormat": {
                "type": "string",
                "enum": [
                  "jsonpath",
                  "jsonschema"
                ]
              },
              "bucketPath": {
                "type": "string",
                "pattern": "^s3://"
              },
              "profile": {
                "description": "AWS profile",
                "type": [
                  "string",
                  "null"
                ]
              },
              "region": {
                "description": "AWS region",
                "type": [
                  "string",
                  "null"
                ],
                "default": "us-west-2"
              }
            },
            "required": [
              "action",
              "uploadFormat",
              "bucketPath",
              "profile",
              "region"
            ]
          }
        ]
      }
    }
  },
  "required": [
    "input",
    "lint",
    "generate",
    "actions"
  ],
  "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/anything-b/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Wildcard schema #2 to match any valid JSON instance",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "anything-b",
		"format": "jsonschema",
		"version": "1-0-0"
	}
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an Iglu resolver's configuration",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "resolver-config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"properties": {

		"cacheSize": {
			"type": "integer",
 			"minimum": 0
		},

		"repositories": {
			"type": "array",
			"items": {
				"type": "object",

				"properties": {

					"name": {
						"type": "string"
					},

					"priority": {
						"type": "integer"
					},

					"vendorPrefixes": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},

					"connection": {
						"type": "object",
						"oneOf": [
							{
								"properties": {
									"embedded": {
										"type": "object",
										"properties": {
											"path": {
												"type": "string"
											}
										},
										"required": ["path"],
										"additionalProperties": false
									}
								},
								"required": ["embedded"],
								"additionalProperties": false
							},
							{
								"properties": {
									"http": {
										"type": "object",
										"properties": {
											"uri": {
												"type": "string",
												"format": "uri"
											}
										},
										"required": ["uri"],
										"additionalProperties": false
									}
								},
								"required": ["http"],
								"additionalProperties": false
							}
						]
					}
				},
				"required": ["name", "priority", "vendorPrefixes", "connection"],
				"additionalProperties": false
			}
		}

	},

	"required": ["cacheSize", "repositories"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an Iglu resolver's configuration",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "resolver-config",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",

	"properties": {

		"cacheSize": {
			"type": "integer",
 			"minimum": 0
		},

		"repositories": {
			"type": "array",
			"items": {
				"type": "object",

				"properties": {

					"name": {
						"type": "string"
					},

					"priority": {
						"type": "integer"
					},

					"vendorPrefixes": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},

					"connection": {
						"type": "object",
						"oneOf": [
							{
								"properties": {
									"embedded": {
										"type": "object",
										"properties": {
											"path": {
												"type": "string"
											}
										},
										"required": ["path"],
										"additionalProperties": false
									}
								},
								"required": ["embedded"],
								"additionalProperties": false
							},
							{
								"properties": {
									"http": {
										"type": "object",
										"properties": {
											"uri": {
												"type": "string",
												"format": "uri"
											},
											"apikey": {
												"type": ["string", "null"]
											}
										},
										"required": ["uri"],
										"additionalProperties": false
									}
								},
								"required": ["http"],
								"additionalProperties": false
							}
						]
					}
				},
				"required": ["name", "priority", "vendorPrefixes", "connection"],
				"additionalProperties": false
			}
		}

	},

	"required": ["cacheSize", "repositories"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an Iglu resolver's configuration",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "resolver-config",
		"format": "jsonschema",
		"version": "1-0-2"
	},

	"type": "object",

	"properties": {

		"cacheSize": {
			"type": "number"
		},

		"cacheTtl": {
			"type": ["integer", "null"],
			"minimum": 1
		},

		"repositories": {
			"type": "array",
			"items": {
				"type": "object",

				"properties": {

					"name": {
						"type": "string"
					},

					"priority": {
						"type": "number"
					},

					"vendorPrefixes": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},

					"connection": {
						"type": "object",
						"oneOf": [
							{
								"properties": {
									"embedded": {
										"type": "object",
										"properties": {
											"path": {
												"type": "string"
											}
										},
										"required": ["path"],
										"additionalProperties": false
									}
								},
								"required": ["embedded"],
								"additionalProperties": false
							},
							{
								"properties": {
									"http": {
										"type": "object",
										"properties": {
											"uri": {
												"type": "string",
												"format": "uri"
											},
											"apikey": {
												"type": ["string", "null"]
											}
										},
										"required": ["uri"],
										"additionalProperties": false
									}
								},
								"required": ["http"],
								"additionalProperties": false
							}
						]
					}
				},
				"required": ["name", "priority", "vendorPrefixes", "connection"],
				"additionalProperties": false
			}
		}

	},

	"required": ["cacheSize", "repositories"],
	"additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.iglu/resolver-config/jsonschema/1-0-3', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an Iglu resolver's configuration",
	"self": {
		"vendor": "com.snowplowanalytics.iglu",
		"name": "resolver-config",
		"format": "jsonschema",
		"version": "1-0-3"
	},

	"type": "object",

	"properties": {

		"cacheSize": {
			"type": "number"
		},

		"cacheTtl": {
			"type": ["integer", "null"],
			"minimum": 0
		},

		"repositories": {
			"type": "array",
			"items": {
				"type": "object",

				"properties": {

					"name": {
						"type": "string"
					},

					"priority": {
						"type": "number"
					},

					"vendorPrefixes": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},

					"connection": {
						"type": "object",
						"oneOf": [
							{
								"properties": {
									"embedded": {
										"type": "object",
										"properties": {
											"path": {
												"type": "string"
											}
										},
										"required": ["path"],
										"additionalProperties": false
									}
								},
								"required": ["embedded"],
								"additionalProperties": false
							},
							{
								"properties": {
									"http": {
										"type": "object",
										"properties": {
											"uri": {
												"type": "string",
												"format": "uri"
											},
											"apikey": {
												"type": ["string", "null"]
											}
										},
										"required": ["uri"],
										"additionalProperties": false
									}
								},
								"required": ["http"],
								"additionalProperties": false
							}
						]
					}
				},
				"required": ["name", "priority", "vendorPrefixes", "connection"],
				"additionalProperties": false
			}
		}

	},

	"required": ["cacheSize", "repositories"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('io.redash.webhooks/event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for the webhook emitted by a Redash installation",
  "self": {
    "vendor": "io.redash.webhooks",
    "name": "event",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "user_id": {
      "type": ["integer", "null"],
      "maximum" : 2147483647,
      "minimum" : -2147483648
    },
    "action": {
      "type": "string",
      "maxLength" : 255
    },
    "object_type": {
      "type": "string",
      "maxLength" : 255
    },
    "object_id": {
      "type": ["string", "integer", "null"],
      "maxLength" : 255
    },
    "additional_properties": {
      "type": ["object", "null"]
    },
    "created_at": {
      "type": "string"
    },
    "org_id": {
      "type": "integer",
      "maximum" : 2147483647,
      "minimum" : -2147483648
    }
  },
  "required": ["action", "object_id", "created_at", "org_id"],
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.convertro/tracking_parameters/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
   "$schema":"http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
   "description":"Schema for a Convertro tracking parameters context",
   "self":{
      "vendor":"com.convertro",
      "name":"tracking_parameters",
      "format":"jsonschema",
      "version":"1-0-0"
   },
   "type":"object",
   "properties":{
      "source1":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "source2":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "source3":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "creativeId":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "creativeName":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "campaignId":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "campaignName":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "placementId":{
         "type": ["string", "null"],
         "maxLength": 255
      },
      "placementName":{
         "type": ["string", "null"],
         "maxLength": 255
      }
   },
   "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.pingdom/incident_notify_of_close/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Pingdom incident being closed event",
	"self": {
		"vendor": "com.pingdom",
		"name": "incident_notify_of_close",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"check": {
			"type": "string"
		},
		"checkname": {
			"type": "string"
		},
		"host": {
			"type": "string"
		},
		"incidentid": {
			"type": "integer"
		},
		"description": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.pingdom/incident_assign/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Pingdom incident assigned event",
	"self": {
		"vendor": "com.pingdom",
		"name": "incident_assign",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"check": {
			"type": "string"
		},
		"checkname": {
			"type": "string"
		},
		"host": {
			"type": "string"
		},
		"incidentid": {
			"type": "integer"
		},
		"description": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.pingdom/incident_notify_user/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Pingdom incident assigned event with a user being notified",
	"self": {
		"vendor": "com.pingdom",
		"name": "incident_notify_user",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"check": {
			"type": "string"
		},
		"checkname": {
			"type": "string"
		},
		"host": {
			"type": "string"
		},
		"incidentid": {
			"type": "integer"
		},
		"description": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.roku/video/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Context Schema for a Roku video event (reflects the Video node: https://developer.roku.com/en-gb/docs/references/scenegraph/media-playback-nodes/video.md)",
  "self": {
    "format": "jsonschema",
    "name": "video",
    "vendor": "com.roku",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "videoId": {
      "type": "string",
      "description": "ID generated when video tracking of the video node was initialized.",
      "maxLength": 255
    },
    "contentId": {
      "type": [
        "string",
        "null"
      ],
      "description": "ID of video provided in content metadata.",
      "maxLength": 255
    },
    "contentTitle": {
      "description": "Title of video provided in content metadata.",
      "type": [
        "string",
        "null"
      ],
      "maxLength": 65535
    },
    "contentUrl": {
      "description": "URL of video provided in content metadata.",
      "type": [
        "string",
        "null"
      ],
      "maxLength": 65535,
      "format": "uri"
    },
    "contentType": {
      "description": "Category of video (e.g., movie, season, series) provided in content metadata.",
      "type": [
        "string",
        "null"
      ],
      "maxLength": 255
    },
    "streamFormat": {
      "description": "Container format of video (e.g., mp4, wma, mkv) provided in content metadata.",
      "type": [
        "string",
        "null"
      ],
      "maxLength": 255
    },
    "streamUrl": {
      "type": [
        "string",
        "null"
      ],
      "description": "URL of the current stream.",
      "maxLength": 65535,
      "format": "uri"
    },
    "measuredBitrate": {
      "type": [
        "integer",
        "null"
      ],
      "description": "Measured bitrate (bps) of the network when the stream was selected.",
      "minimum": 0,
      "maximum": 2147483647
    },
    "streamBitrate": {
      "type": [
        "integer",
        "null"
      ],
      "description": "Current bitrate of the stream.",
      "minimum": 0,
      "maximum": 2147483647
    },
    "isUnderrun": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "Indicates whether the stream was downloaded due to an underrun."
    },
    "isResumed": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "Indicates whether the playback was resumed after trickplay."
    },
    "videoFormat": {
      "type": [
        "string",
        "null"
      ],
      "description": "Video codec of the currently playing video stream (e.g., hevc, mpeg2, mpeg4_15).",
      "maxLength": 255
    },
    "timeToStartStreaming": {
      "type": [
        "number",
        "null"
      ],
      "description": "Time in seconds from playback being started until the video actually began playing.",
      "minimum": 0,
      "maximum": 9007199254740991
    },
    "width": {
      "type": "integer",
      "description": "Width of the video play window in pixels. 0 if the play window is set to the width of the entire display screen.",
      "minimum": 0,
      "maximum": 65535
    },
    "height": {
      "type": "integer",
      "description": "Height of the video play window in pixels. 0 if the play window is set to the height of the entire display screen.",
      "minimum": 0,
      "maximum": 65535
    },
    "errorStr": {
      "type": [
        "string",
        "null"
      ],
      "description": "A diagnostic message indicating a video play error. Refer to the Roku Video documentation for the format of the string.",
      "maxLength": 65535
    }
  },
  "required": [
    "videoId",
    "width",
    "height"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.roku/device_info/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Context Schema with information about Roku device (reflects the ifDeviceInfo interface: https://developer.roku.com/en-gb/docs/references/brightscript/interfaces/ifdeviceinfo.md)",
  "self": {
    "format": "jsonschema",
    "name": "device_info",
    "vendor": "com.roku",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "model": {
      "type": "string",
      "description": "Model name of the Roku device.",
      "maxLength": 255
    },
    "modelDisplayName": {
      "type": "string",
      "description": "Model display name.",
      "maxLength": 65535
    },
    "modelType": {
      "type": "string",
      "description": "Type of device.",
      "maxLength": 255
    },
    "osVersion": {
      "type": [
        "string",
        "null"
      ],
      "description": "Major, minor, revision, and build number of the Roku OS running on the device separated by dots.",
      "maxLength": 255
    },
    "channelClientId": {
      "type": [
        "string",
        "null"
      ],
      "description": "A unique device identifier that is different across channels.",
      "maxLength": 255
    },
    "isRIDADisabled": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "Indicates whether tracking via Roku's ID for Advertisers (RIDA) is disabled on the device."
    },
    "RIDA": {
      "type": [
        "string",
        "null"
      ],
      "description": "A persistent unique identifier (UUID) for the device.",
      "maxLength": 255
    },
    "captionsMode": {
      "type": "string",
      "description": "Determines whether global captions are turned on or off, or are in instant replay mode.",
      "maxLength": 255
    },
    "audioOutputChannel": {
      "type": "string",
      "description": "Type of audio output.",
      "maxLength": 255
    },
    "memoryLevel": {
      "type": [
        "string",
        "null"
      ],
      "description": "General memory level of the channel.",
      "maxLength": 255
    },
    "timeSinceLastKeypress": {
      "type": "integer",
      "description": "The number of seconds since the last remote keypress was received.",
      "minimum": 0,
      "maximum": 2147483647
    },
    "userCountryCode": {
      "type": [
        "string",
        "null"
      ],
      "description": "Country code associated with the user's Roku account, normally the ISO 3166-1 (2-letter) code",
      "maxLength": 255
    },
    "countryCode": {
      "type": "string",
      "description": "Indicates the Roku Channel Store associated with a user's Roku account. May be a ISO 3166-1 country code or a Roku Powered Channel Store Identifier",
      "maxLength": 255
    },
    "videoMode": {
      "type": "string",
      "description": "Video playback resolution.",
      "maxLength": 255
    },
    "displayWidth": {
      "type": "integer",
      "description": "Physical width of the attached display in centimeters.",
      "minimum": 0,
      "maximum": 65535
    },
    "displayHeight": {
      "type": "integer",
      "description": "Physical height of the attached display in centimeters.",
      "minimum": 0,
      "maximum": 65535
    },
    "displayProperties": {
      "type": "array",
      "description": "List of keys for display properties of the screen.",
      "items": {
        "type": "string",
        "description": "Display property of the screen.",
        "maxLength": 255
      }
    },
    "connectionType": {
      "type": "string",
      "description": "Type of internet connection the device is using.",
      "maxLength": 255
    },
    "internetStatus": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "Internet connection status of the device."
    },
    "features": {
      "type": "array",
      "description": "List of features that the current device/firmware supports.",
      "items": {
        "type": "string",
        "description": "Feature that the current device/firmware supports.",
        "maxLength": 255
      }
    }
  },
  "required": [
    "model",
    "modelDisplayName",
    "modelType",
    "captionsMode",
    "audioOutputChannel",
    "timeSinceLastKeypress",
    "countryCode",
    "videoMode",
    "displayWidth",
    "displayHeight",
    "displayProperties",
    "connectionType",
    "features"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.parrable/encrypted_payload/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for the Parrable encrypted payload",
  "self": {
    "vendor": "com.parrable",
    "name": "encrypted_payload",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "encryptedId": {
      "type": "string",
      "maxLength": 256
    },
    "optout": {
      "enum": ["true", "false"]
    }
  },
  "required": ["encryptedId", "optout"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.parrable/decrypted_payload/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for the Parrable decrypted payload",
  "self": {
    "vendor": "com.parrable",
    "name": "decrypted_payload",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "browserid": {
      "type": "string",
      "format": "uuid"
    },
    "deviceid": {
      "type": "string",
      "maxLength": 36
    }
  },
  "required": ["browserid", "deviceid"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.cloudfront/wd_access_log/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a AWS CloudFront web distribution access log event. Original version",
	"self": {
		"vendor": "com.amazon.aws.cloudfront",
		"name": "wd_access_log",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"dateTime": {
			"type": "string",
			"format": "date-time"
		},
		"xEdgeLocation": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"scBytes": {
			"type": ["number", "null"]
		},
		"cIp": {
			"type": ["string", "null"],
			"maxLength": 45
		},
		"csMethod": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csHost": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriStem": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"scStatus": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csReferer": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csUserAgent": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriQuery": {
			"type": ["string", "null"],
			"maxLength": 8192
		}
	},
	"required": ["dateTime"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.cloudfront/wd_access_log/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a AWS CloudFront web distribution access log event. Version released 12 Sep 2012",
	"self": {
		"vendor": "com.amazon.aws.cloudfront",
		"name": "wd_access_log",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"dateTime": {
			"type": "string",
			"format": "date-time"
		},
		"xEdgeLocation": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"scBytes": {
			"type": ["number", "null"]
		},
		"cIp": {
			"type": ["string", "null"],
			"maxLength": 45
		},
		"csMethod": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csHost": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriStem": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"scStatus": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csReferer": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csUserAgent": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriQuery": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csCookie": {
			"type": ["string", "null"],
			"maxLength": 4096
		},
		"xEdgeResultType": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"xEdgeRequestId": {
			"type": ["string", "null"],
			"maxLength": 2000
		}
	},
	"required": ["dateTime"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.cloudfront/wd_access_log/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a AWS CloudFront web distribution access log event. Version released 21 Oct 2013",
	"self": {
		"vendor": "com.amazon.aws.cloudfront",
		"name": "wd_access_log",
		"format": "jsonschema",
		"version": "1-0-2"
	},

	"type": "object",
	"properties": {
		"dateTime": {
			"type": "string",
			"format": "date-time"
		},
		"xEdgeLocation": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"scBytes": {
			"type": ["number", "null"]
		},
		"cIp": {
			"type": ["string", "null"],
			"maxLength": 45
		},
		"csMethod": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csHost": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriStem": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"scStatus": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csReferer": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csUserAgent": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriQuery": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csCookie": {
			"type": ["string", "null"],
			"maxLength": 4096
		},
		"xEdgeResultType": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"xEdgeRequestId": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"xHostHeader": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csProtocol": {
			"enum": ["http", "https", null]
		},
		"csBytes": {
			"type": ["number", "null"]
		}
	},
	"required": ["dateTime"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.cloudfront/wd_access_log/jsonschema/1-0-3', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a AWS CloudFront web distribution access log event. Version released 29 Apr 2014",
	"self": {
		"vendor": "com.amazon.aws.cloudfront",
		"name": "wd_access_log",
		"format": "jsonschema",
		"version": "1-0-3"
	},

	"type": "object",
	"properties": {
		"dateTime": {
			"type": "string",
			"format": "date-time"
		},
		"xEdgeLocation": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"scBytes": {
			"type": ["number", "null"]
		},
		"cIp": {
			"type": ["string", "null"],
			"maxLength": 45
		},
		"csMethod": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csHost": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriStem": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"scStatus": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csReferer": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csUserAgent": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriQuery": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csCookie": {
			"type": ["string", "null"],
			"maxLength": 4096
		},
		"xEdgeResultType": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"xEdgeRequestId": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"xHostHeader": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csProtocol": {
			"enum": ["http", "https", null]
		},
		"csBytes": {
			"type": ["number", "null"]
		},
		"timeTaken": {
			"type": ["number", "null"]
		}
	},
	"required": ["dateTime"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.cloudfront/wd_access_log/jsonschema/1-0-4', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a AWS CloudFront web distribution access log event. Version released 01 Jul 2014",
	"self": {
		"vendor": "com.amazon.aws.cloudfront",
		"name": "wd_access_log",
		"format": "jsonschema",
		"version": "1-0-4"
	},

	"type": "object",
	"properties": {
		"dateTime": {
			"type": "string",
			"format": "date-time"
		},
		"xEdgeLocation": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"scBytes": {
			"type": ["number", "null"]
		},
		"cIp": {
			"type": ["string", "null"],
			"maxLength": 45
		},
		"csMethod": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csHost": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriStem": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"scStatus": {
			"type": ["string", "null"],
			"maxLength": 3
		},
		"csReferer": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csUserAgent": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csUriQuery": {
			"type": ["string", "null"],
			"maxLength": 8192
		},
		"csCookie": {
			"type": ["string", "null"],
			"maxLength": 4096
		},
		"xEdgeResultType": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"xEdgeRequestId": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"xHostHeader": {
			"type": ["string", "null"],
			"maxLength": 2000
		},
		"csProtocol": {
			"enum": ["http", "https", null]
		},
		"csBytes": {
			"type": ["number", "null"]
		},
		"timeTaken": {
			"type": ["number", "null"]
		},
		"xForwardedFor": {
			"type": ["string", "null"],
			"maxLength": 45
		},
		"sslProtocol": {
			"type": ["string", "null"],
			"maxLength": 32
		},
		"sslCipher": {
			"type": ["string", "null"],
			"maxLength": 64
		},
		"xEdgeResponseResultType": {
			"type": ["string", "null"],
			"maxLength": 32
		}
	},
	"required": ["dateTime"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.cloudfront/wd_access_log/jsonschema/1-0-5', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a AWS CloudFront web distribution access log event. Version released 29 Sept 2016",
  "self": {
    "vendor": "com.amazon.aws.cloudfront",
    "name": "wd_access_log",
    "format": "jsonschema",
    "version": "1-0-5"
  },

  "type": "object",
  "properties": {
    "dateTime": {
      "type": "string",
      "format": "date-time"
    },
    "xEdgeLocation": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "scBytes": {
      "type": ["number", "null"]
    },
    "cIp": {
      "type": ["string", "null"],
      "maxLength": 45
    },
    "csMethod": {
      "type": ["string", "null"],
      "maxLength": 3
    },
    "csHost": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "csUriStem": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "scStatus": {
      "type": ["string", "null"],
      "maxLength": 3
    },
    "csReferer": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "csUserAgent": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "csUriQuery": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "csCookie": {
      "type": ["string", "null"],
      "maxLength": 4096
    },
    "xEdgeResultType": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "xEdgeRequestId": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "xHostHeader": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "csProtocol": {
      "enum": ["http", "https", null]
    },
    "csBytes": {
      "type": ["number", "null"]
    },
    "timeTaken": {
      "type": ["number", "null"]
    },
    "xForwardedFor": {
      "type": ["string", "null"],
      "maxLength": 45
    },
    "sslProtocol": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "sslCipher": {
      "type": ["string", "null"],
      "maxLength": 64
    },
    "xEdgeResponseResultType": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "csProtocolVersion": {
      "type": ["string", "null"],
      "maxLength": 8
    }
  },
  "required": ["dateTime"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.cloudfront/wd_access_log/jsonschema/1-0-6', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a AWS CloudFront web distribution access log event. Version released 24 January 2018",
  "self": {
    "vendor": "com.amazon.aws.cloudfront",
    "name": "wd_access_log",
    "format": "jsonschema",
    "version": "1-0-6"
  },

  "type": "object",
  "properties": {
    "dateTime": {
      "type": "string",
      "format": "date-time"
    },
    "xEdgeLocation": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "scBytes": {
      "type": ["number", "null"]
    },
    "cIp": {
      "type": ["string", "null"],
      "maxLength": 45
    },
    "csMethod": {
      "type": ["string", "null"],
      "maxLength": 3
    },
    "csHost": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "csUriStem": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "scStatus": {
      "type": ["string", "null"],
      "maxLength": 3
    },
    "csReferer": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "csUserAgent": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "csUriQuery": {
      "type": ["string", "null"],
      "maxLength": 8192
    },
    "csCookie": {
      "type": ["string", "null"],
      "maxLength": 4096
    },
    "xEdgeResultType": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "xEdgeRequestId": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "xHostHeader": {
      "type": ["string", "null"],
      "maxLength": 2000
    },
    "csProtocol": {
      "enum": ["http", "https", null]
    },
    "csBytes": {
      "type": ["number", "null"]
    },
    "timeTaken": {
      "type": ["number", "null"]
    },
    "xForwardedFor": {
      "type": ["string", "null"],
      "maxLength": 45
    },
    "sslProtocol": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "sslCipher": {
      "type": ["string", "null"],
      "maxLength": 64
    },
    "xEdgeResponseResultType": {
      "type": ["string", "null"],
      "maxLength": 32
    },
    "csProtocolVersion": {
      "type": ["string", "null"],
      "maxLength": 8
    },
    "fleStatus": {
      "type": ["string", "null"],
      "maxLength": 64
    },
    "fleEncryptedFields": {
      "type": ["string", "null"],
      "maxLength": 10
    }
  },
  "required": ["dateTime"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid.sauna.commands/send_email/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Sendgrid send email command",
  "self": {
    "vendor": "com.sendgrid.sauna.commands",
    "name": "send_email",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "definitions": {
    "arbitrary_object": {
      "type": "object",
      "properties": {},
      "additionalProperties": true
    },
    "email_object": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "additionalProperties": false
    }
  },
  "type": "object",
  "properties": {
    "personalizations": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "to": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/email_object"
                }
              ]
            },
            "cc": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/email_object"
                }
              ]
            },
            "bcc": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/email_object"
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "headers": {
              "$ref": "#/definitions/arbitrary_object"
            },
            "substitutions": {
              "$ref": "#/definitions/arbitrary_object"
            },
            "custom_args": {
              "$ref": "#/definitions/arbitrary_object"
            },
            "send_at": {
              "type": "integer"
            }
          },
          "required": [
            "to"
          ],
          "additionalProperties": false
        }
      ]
    },
    "from": {
      "$ref": "#/definitions/email_object"
    },
    "reply_to": {
      "$ref": "#/definitions/email_object"
    },
    "subject": {
      "type": "string"
    },
    "content": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "additionalProperties": false
        }
      ]
    },
    "attachments": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "filename": {
              "type": "string"
            },
            "disposition": {
              "type": "string"
            },
            "content_id": {
              "type": "string"
            }
          },
          "required": [
            "content",
            "filename"
          ],
          "additionalProperties": false
        }
      ]
    },
    "template_id": {
      "type": "string"
    },
    "sections": {
      "$ref": "#/definitions/arbitrary_object"
    },
    "headers": {
      "$ref": "#/definitions/arbitrary_object"
    },
    "categories": {
      "type": "array",
      "items": [
        {
          "type": "string"
        }
      ]
    },
    "send_at": {
      "type": "integer"
    },
    "batch_id": {
      "type": "string"
    },
    "asm": {
      "type": "object",
      "properties": {
        "group_id": {
          "type": "integer"
        },
        "groups_to_display": {
          "type": "array",
          "items": [
            {
              "type": "integer"
            }
          ]
        }
      },
      "required": [
        "group_id"
      ],
      "additionalProperties": false
    },
    "ip_pool_name": {
      "type": "string"
    },
    "mail_settings": {
      "type": "object",
      "properties": {
        "bcc": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "email": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "bypass_list_management": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "footer": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "text": {
              "type": "string"
            },
            "html": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "sandbox_mode": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "spam_check": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "threshold": {
              "type": "integer"
            },
            "post_to_url": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "tracking_settings": {
      "type": "object",
      "properties": {
        "click_tracking": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "enable_text": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "open_tracking": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "substitution_tag": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "subscription_tracking": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "text": {
              "type": "string"
            },
            "html": {
              "type": "string"
            },
            "substitution_tag": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ganalytics": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "utm_source": {
              "type": "string"
            },
            "utm_medium": {
              "type": "string"
            },
            "utm_term": {
              "type": "string"
            },
            "utm_content": {
              "type": "string"
            },
            "utm_campaign": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "personalizations",
    "from"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/contact_change/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for changeing one of a contact's property value.",
  "self": {
    "vendor": "com.hubspot",
    "name": "contact_change",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "propertyName": {
      "type": "string",
      "maxLength": 255,
      "description": "This is the name of the property that was changed."
    },
    "propertyValue": {
      "type": "string",
      "maxLength": 255,
      "description": "This is the new value that was set for this property that triggered this notification."
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/company_deletion/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for deleting a company.",
  "self": {
    "vendor": "com.hubspot",
    "name": "company_deletion",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "changeFlag": {
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/contact_deletion/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for deleting a contact.",
  "self": {
    "vendor": "com.hubspot",
    "name": "contact_deletion",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "changeFlag": {
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/deal_creation/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for creating a new deal.",
  "self": {
    "vendor": "com.hubspot",
    "name": "deal_creation",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "changeFlag": {
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/company_creation/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for creating a new company.",
  "self": {
    "vendor": "com.hubspot",
    "name": "company_creation",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "changeFlag": {
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/deal_change/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for changeing one of a deal's property value.",
  "self": {
    "vendor": "com.hubspot",
    "name": "deal_change",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "propertyName": {
      "type": "string",
      "maxLength": 255,
      "description": "This is the name of the property that was changed."
    },
    "propertyValue": {
      "type": "string",
      "maxLength": 255,
      "description": "This is the new value that was set for this property that triggered this notification."
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/company_change/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for changeing one of a company's property value.",
  "self": {
    "vendor": "com.hubspot",
    "name": "company_change",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "propertyName": {
      "type": "string",
      "maxLength": 255,
      "description": "This is the name of the property that was changed."
    },
    "propertyValue": {
      "type": "string",
      "maxLength": 255,
      "description": "This is the new value that was set for this property that triggered this notification."
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/contact_creation/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for creating a new contact.",
  "self": {
    "vendor": "com.hubspot",
    "name": "contact_creation",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "changeFlag": {
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hubspot/deal_deletion/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook event for deleting a deal.",
  "self": {
    "vendor": "com.hubspot",
    "name": "deal_deletion",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "objectId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the object that was created/changed/deleted. For contacts this is the vid; for companies, the companyId; and for deals the dealId."
    },
    "changeSource": {
      "type": "string",
      "maxLength": 128,
      "description": "The source of this change. Can be any of the change sources that you find on contact property histories."
    },
    "eventId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The unique ID of the event that triggered this notification."
    },
    "subscriptionId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of the subscription that caused us to send you a notification of this event."
    },
    "portalId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The customer's portalId that this event came from."
    },
    "appId": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "The ID of your application. (In case you have multiple applications pointing to the same webhook URL.)"
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time",
      "description": "When this event occurred."
    },
    "attemptNumber": {
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647,
      "description": "Which attempt this is to notify your service of this event (starting at 0). If your service times-out or throws an error as described in 'Retries' below, we will attempt to send the notification to your service again."
    },
    "changeFlag": {
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.hipchat.sauna.commands/send_room_notification/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a Hipchat room notification command",
    "self":{
        "vendor": "com.hipchat.sauna.commands",
        "name": "send_room_notification",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "roomIdOrName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
        },
        "color": {
            "enum": [
                "YELLOW",
                "GREEN",
                "RED",
                "PURPLE",
                "GRAY",
                "RANDOM"
            ]
        },
        "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 10000
        },
        "notify": {
            "type": "boolean"
        },
        "messageFormat": {
            "enum": [
                "HTML",
                "TEXT"
            ]
        }
    },
    "required": [
        "roomIdOrName",
        "message"
    ],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.iab.snowplow/spiders_and_robots/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a context generated by the IAB Spiders & Robots enrichment",
    "self": {
        "vendor": "com.iab.snowplow",
        "name": "spiders_and_robots",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "spiderOrRobot": {
            "description": "true if the IP address or user agent checked against the list is a spider or robot, false otherwise",
            "type": "boolean"
        },
        "category": {
            "description": "Category based on activity if the IP/UA is a spider or robot, BROWSER otherwise",
            "enum": ["SPIDER_OR_ROBOT", "ACTIVE_SPIDER_OR_ROBOT", "INACTIVE_SPIDER_OR_ROBOT", "BROWSER"]
        },
        "reason": {
            "description": "Type of failed check if the IP/UA is a spider or robot, PASSED_ALL otherwise",
            "enum": ["FAILED_IP_EXCLUDE", "FAILED_UA_INCLUDE", "FAILED_UA_EXCLUDE", "PASSED_ALL"]
        },
        "primaryImpact": {
            "description": "Whether the spider or robot would affect page impression measurement, ad impression measurement, both or none",
            "enum": ["PAGE_IMPRESSIONS", "AD_IMPRESSIONS", "PAGE_AND_AD_IMPRESSIONS", "UNKNOWN", "NONE"]
        }
    },
    "required": ["spiderOrRobot", "category", "reason", "primaryImpact"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/snowflake_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Snowflake Loader specific bad row",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "snowflake_error",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "failures": {
      "type": "array",
      "description": "Snowflake related failures",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "description": "Model for failures related with the one of the fields of the enriched event",
            "properties": {
              "valueError": {
                "type": "object",
                "properties": {
                  "value": { "type": "string" },
                  "column": { "type": "string" },
                  "message": { "type": "string" }
                },
                "required": ["value", "column", "message"],
                "additionalProperties": false
              }
            },
            "required": ["valueError"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "description": "Model for deduplication error info",
            "properties": {
              "deduplicationError": {
                "type": "object",
                "properties": {
                  "message": { "type": "string" }
                },
                "required": ["message"],
                "additionalProperties": false
              }
            },
            "required": ["deduplicationError"],
            "additionalProperties": false
          }
        ]
      }
    },
    "enrichedEvent": {
      "type": "object",
      "description": "The enriched event that resulted in a storage loader failure",
      "properties": {
        "app_id": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "platform": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "etl_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "collector_tstamp": {
          "type": "string",
          "format": "date-time"
        },
        "dvce_created_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "event": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_id": {
          "type": "string",
          "maxLength": 36
        },
        "txn_id": {
          "type": ["integer", "null"]
        },
        "name_tracker": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "v_tracker": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "v_collector": {
          "type": "string",
          "maxLength": 100
        },
        "v_etl": {
          "type": "string",
          "maxLength": 100
        },
        "user_id": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "user_ipaddress": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "user_fingerprint": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "domain_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "domain_sessionidx": {
          "type": ["integer", "null"]
        },
        "network_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "geo_country": {
          "type": ["string", "null"],
          "maxLength": 2
        },
        "geo_region": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "geo_city": {
          "type": ["string", "null"],
          "maxLength": 75
        },
        "geo_zipcode": {
          "type": ["string", "null"],
          "maxLength": 15
        },
        "geo_latitude": {
          "type": ["number", "null"]
        },
        "geo_longitude": {
          "type": ["number", "null"]
        },
        "geo_region_name": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "ip_isp": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "ip_organization": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "ip_domain": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "ip_netspeed": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "page_url": {
          "type": ["string", "null"],
          "maxLength": 4096
        },
        "page_title": {
          "type": ["string", "null"],
          "maxLength": 2000
        },
        "page_referrer": {
          "type": ["string", "null"],
          "maxLength": 4096
        },
        "page_urlscheme": {
          "type": ["string", "null"],
          "maxLength": 16
        },
        "page_urlhost": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "page_urlport": {
          "type": ["integer", "null"]
        },
        "page_urlpath": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "page_urlquery": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "page_urlfragment": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "refr_urlscheme": {
          "type": ["string", "null"],
          "maxLength": 16
        },
        "refr_urlhost": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "refr_urlport": {
          "type": ["integer", "null"]
        },
        "refr_urlpath": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "refr_urlquery": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "refr_urlfragment": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "refr_medium": {
          "type": ["string", "null"],
          "maxLength": 25
        },
        "refr_source": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "refr_term": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_medium": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_source": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_term": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_content": {
          "type": ["string", "null"],
          "maxLength": 500
        },
        "mkt_campaign": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "se_category": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_action": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_label": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_property": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_value": {
          "type": ["number", "null"]
        },
        "tr_orderid": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_affiliation": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_total": {
          "type": ["number", "null"]
        },
        "tr_tax": {
          "type": ["number", "null"]
        },
        "tr_shipping": {
          "type": ["number", "null"]
        },
        "tr_city": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_state": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_country": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_orderid": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_sku": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_name": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_category": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_price": {
          "type": ["number", "null"]
        },
        "ti_quantity": {
          "type": ["integer", "null"]
        },
        "pp_xoffset_min": {
          "type": ["integer", "null"]
        },
        "pp_xoffset_max": {
          "type": ["integer", "null"]
        },
        "pp_yoffset_min": {
          "type": ["integer", "null"]
        },
        "pp_yoffset_max": {
          "type": ["integer", "null"]
        },
        "useragent": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "br_name": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_family": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_version": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_type": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_renderengine": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_lang": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "br_features_pdf": {
          "type": ["boolean", "null"]
        },
        "br_features_flash": {
          "type": ["boolean", "null"]
        },
        "br_features_java": {
          "type": ["boolean", "null"]
        },
        "br_features_director": {
          "type": ["boolean", "null"]
        },
        "br_features_quicktime": {
          "type": ["boolean", "null"]
        },
        "br_features_realplayer": {
          "type": ["boolean", "null"]
        },
        "br_features_windowsmedia": {
          "type": ["boolean", "null"]
        },
        "br_features_gears": {
          "type": ["boolean", "null"]
        },
        "br_features_silverlight": {
          "type": ["boolean", "null"]
        },
        "br_cookies": {
          "type": ["boolean", "null"]
        },
        "br_colordepth": {
          "type": ["string", "null"],
          "maxLength": 12
        },
        "br_viewwidth": {
          "type": ["integer", "null"]
        },
        "br_viewheight": {
          "type": ["integer", "null"]
        },
        "os_name": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_family": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_manufacturer": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_timezone": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "dvce_type": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "dvce_ismobile": {
          "type": ["boolean", "null"]
        },
        "dvce_screenwidth": {
          "type": ["integer", "null"]
        },
        "dvce_screenheight": {
          "type": ["integer", "null"]
        },
        "doc_charset": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "doc_width": {
          "type": ["integer", "null"]
        },
        "doc_height": {
          "type": ["integer", "null"]
        },
        "tr_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "tr_total_base": {
          "type": ["number", "null"]
        },
        "tr_tax_base": {
          "type": ["number", "null"]
        },
        "tr_shipping_base": {
          "type": ["number", "null"]
        },
        "ti_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "ti_price_base": {
          "type": ["number", "null"]
        },
        "base_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "geo_timezone": {
          "type": ["string", "null"],
          "maxLength": 64
        },
        "mkt_clickid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "mkt_network": {
          "type": ["string", "null"],
          "maxLength": 64
        },
        "etl_tags": {
          "type": ["string", "null"],
          "maxLength": 500
        },
        "dvce_sent_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "refr_domain_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "refr_dvce_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "domain_sessionid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "derived_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "event_vendor": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "event_name": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "event_format": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_version": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_fingerprint": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "true_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "unstruct_event": { "type": ["object", "null"] },
        "contexts": { "type": ["object", "null" ]},
        "derived_contexts": { "type": ["object", "null" ]}
      },
      "additionalProperties": false
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": ["failures", "enrichedEvent", "processor"],
  "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/collector_payload_format_violation/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a format violation bad row",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "collector_payload_format_violation",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the format violation",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "loader": {
          "type": "string",
          "description": "Loader which was used when the failure occurred",
          "enum": [ "clj-tomcat", "cloudfront", "ndjson", "thrift", "tsv" ]
        },
        "message": {
          "type": "object",
          "description": "Failure message associated with the format violation",
          "anyOf": [
            {
              "type": "object",
              "description": "Simple type of error",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error which occurred during loading",
                  "maxLength": 512
                }
              },
              "required": [ "error" ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "description": "Error when some field did not match the expectations for this loader",
              "properties": {
                "payloadField": {
                  "type": "string",
                  "description": "Field which did not meet expectations",
                  "maxLength": 64
                },
                "value": {
                  "type": ["string", "null"],
                  "description": "Stringified representation of the value which did not meet expectations"
                },
                "expectation": {
                  "type": "string",
                  "description": "Expectation which was not met",
                  "maxLength": 256
                }
              },
              "required": [ "payloadField", "expectation" ],
              "additionalProperties": false
            }
          ]
        }
      },
      "required": [ "timestamp", "loader", "message" ],
      "additionalProperties": false
    },
    "payload": {
      "type": "string",
      "description": "The collector payload that resulted in a format violation"
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of this format violation",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of this format violation",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of this format violation",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/loader_recovery_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for storage recovery jobs, such as Snowplow BigQuery Repeater",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "loader_recovery_error",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "payload": {
      "type": "string",
      "description": "Data blob which was not inserted into a warehouse"
    },
    "failure": {
      "description": "A reason why payload could not be inserted",
      "properties": {
        "error": {
          "oneOf": [
            {
              "description": "Payload couldn't be parsed as an event (ParsingError)",
              "type": "object",
              "properties": {
                "message": {
                  "description": "Human-readable error",
                  "type": "string"
                },
                "location": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["message", "location"]
            },
            {
              "description": "Payload couldn't be inserted because of a service failure (RuntimeError)",
              "type": "object",
              "properties": {
                "message": {
                  "description": "Human-readable error",
                  "type": "string"
                },
                "location": {
                  "type": ["string", "null"]
                },
                "reason": {
                  "type": ["string", "null"]
                }
              },
              "required": ["message", "location", "reason"]
            }
          ]
        }
      },
      "required": ["error"]
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": ["payload", "failure", "processor"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/loader_runtime_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Bad row caused by internal error (such as unhandled exception), least structured bad row",
    "self": {
      "vendor": "com.snowplowanalytics.snowplow.badrows",
      "name": "loader_runtime_error",
      "format": "jsonschema",
      "version": "1-0-0"
    },
    "type": "object",
    "properties": {
      "event": {
        "type": "object",
        "description": "The enriched event that resulted in a storage loader failure",
        "properties": {
          "app_id": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "platform": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "etl_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "collector_tstamp": {
            "type": "string",
            "format": "date-time"
          },
          "dvce_created_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "event": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "event_id": {
            "type": "string",
            "maxLength": 36
          },
          "txn_id": {
            "type": ["integer", "null"]
          },
          "name_tracker": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "v_tracker": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "v_collector": {
            "type": "string",
            "maxLength": 100
          },
          "v_etl": {
            "type": "string",
            "maxLength": 100
          },
          "user_id": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "user_ipaddress": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "user_fingerprint": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "domain_userid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "domain_sessionidx": {
            "type": ["integer", "null"]
          },
          "network_userid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "geo_country": {
            "type": ["string", "null"],
            "maxLength": 2
          },
          "geo_region": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "geo_city": {
            "type": ["string", "null"],
            "maxLength": 75
          },
          "geo_zipcode": {
            "type": ["string", "null"],
            "maxLength": 15
          },
          "geo_latitude": {
            "type": ["number", "null"]
          },
          "geo_longitude": {
            "type": ["number", "null"]
          },
          "geo_region_name": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "ip_isp": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "ip_organization": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "ip_domain": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "ip_netspeed": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "page_url": {
            "type": ["string", "null"],
            "maxLength": 4096
          },
          "page_title": {
            "type": ["string", "null"],
            "maxLength": 2000
          },
          "page_referrer": {
            "type": ["string", "null"],
            "maxLength": 4096
          },
          "page_urlscheme": {
            "type": ["string", "null"],
            "maxLength": 16
          },
          "page_urlhost": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "page_urlport": {
            "type": ["integer", "null"]
          },
          "page_urlpath": {
            "type": ["string", "null"],
            "maxLength": 3000
          },
          "page_urlquery": {
            "type": ["string", "null"],
            "maxLength": 6000
          },
          "page_urlfragment": {
            "type": ["string", "null"],
            "maxLength": 3000
          },
          "refr_urlscheme": {
            "type": ["string", "null"],
            "maxLength": 16
          },
          "refr_urlhost": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "refr_urlport": {
            "type": ["integer", "null"]
          },
          "refr_urlpath": {
            "type": ["string", "null"],
            "maxLength": 6000
          },
          "refr_urlquery": {
            "type": ["string", "null"],
            "maxLength": 6000
          },
          "refr_urlfragment": {
            "type": ["string", "null"],
            "maxLength": 3000
          },
          "refr_medium": {
            "type": ["string", "null"],
            "maxLength": 25
          },
          "refr_source": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "refr_term": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_medium": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_source": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_term": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_content": {
            "type": ["string", "null"],
            "maxLength": 500
          },
          "mkt_campaign": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "se_category": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_action": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_label": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_property": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_value": {
            "type": ["number", "null"]
          },
          "tr_orderid": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_affiliation": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_total": {
            "type": ["number", "null"]
          },
          "tr_tax": {
            "type": ["number", "null"]
          },
          "tr_shipping": {
            "type": ["number", "null"]
          },
          "tr_city": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_state": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_country": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_orderid": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_sku": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_name": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_category": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_price": {
            "type": ["number", "null"]
          },
          "ti_quantity": {
            "type": ["integer", "null"]
          },
          "pp_xoffset_min": {
            "type": ["integer", "null"]
          },
          "pp_xoffset_max": {
            "type": ["integer", "null"]
          },
          "pp_yoffset_min": {
            "type": ["integer", "null"]
          },
          "pp_yoffset_max": {
            "type": ["integer", "null"]
          },
          "useragent": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "br_name": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_family": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_version": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_type": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_renderengine": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_lang": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "br_features_pdf": {
            "type": ["boolean", "null"]
          },
          "br_features_flash": {
            "type": ["boolean", "null"]
          },
          "br_features_java": {
            "type": ["boolean", "null"]
          },
          "br_features_director": {
            "type": ["boolean", "null"]
          },
          "br_features_quicktime": {
            "type": ["boolean", "null"]
          },
          "br_features_realplayer": {
            "type": ["boolean", "null"]
          },
          "br_features_windowsmedia": {
            "type": ["boolean", "null"]
          },
          "br_features_gears": {
            "type": ["boolean", "null"]
          },
          "br_features_silverlight": {
            "type": ["boolean", "null"]
          },
          "br_cookies": {
            "type": ["boolean", "null"]
          },
          "br_colordepth": {
            "type": ["string", "null"],
            "maxLength": 12
          },
          "br_viewwidth": {
            "type": ["integer", "null"]
          },
          "br_viewheight": {
            "type": ["integer", "null"]
          },
          "os_name": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "os_family": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "os_manufacturer": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "os_timezone": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "dvce_type": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "dvce_ismobile": {
            "type": ["boolean", "null"]
          },
          "dvce_screenwidth": {
            "type": ["integer", "null"]
          },
          "dvce_screenheight": {
            "type": ["integer", "null"]
          },
          "doc_charset": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "doc_width": {
            "type": ["integer", "null"]
          },
          "doc_height": {
            "type": ["integer", "null"]
          },
          "tr_currency": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "tr_total_base": {
            "type": ["number", "null"]
          },
          "tr_tax_base": {
            "type": ["number", "null"]
          },
          "tr_shipping_base": {
            "type": ["number", "null"]
          },
          "ti_currency": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "ti_price_base": {
            "type": ["number", "null"]
          },
          "base_currency": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "geo_timezone": {
            "type": ["string", "null"],
            "maxLength": 64
          },
          "mkt_clickid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "mkt_network": {
            "type": ["string", "null"],
            "maxLength": 64
          },
          "etl_tags": {
            "type": ["string", "null"],
            "maxLength": 500
          },
          "dvce_sent_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "refr_domain_userid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "refr_dvce_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "domain_sessionid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "derived_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "event_vendor": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "event_name": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "event_format": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "event_version": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "event_fingerprint": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "true_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "unstruct_event": { "type": ["object", "null"] },
          "contexts": { "type": ["object", "null" ]},
          "derived_contexts": { "type": ["object", "null" ]}
        },
        "additionalProperties": false
      },
      "error": {
        "type": "string",
        "description": "Error message, either human-readable or stacktrace"
      }
    },
    "required": ["event", "error"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/loader_runtime_error/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Bad row caused by internal error (such as unhandled exception), least structured bad row",
    "self": {
      "vendor": "com.snowplowanalytics.snowplow.badrows",
      "name": "loader_runtime_error",
      "format": "jsonschema",
      "version": "1-0-1"
    },
    "type": "object",
    "properties": {
      "payload": {
        "type": "object",
        "description": "The enriched event that resulted in a storage loader failure",
        "properties": {
          "app_id": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "platform": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "etl_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "collector_tstamp": {
            "type": "string",
            "format": "date-time"
          },
          "dvce_created_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "event": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "event_id": {
            "type": "string",
            "maxLength": 36
          },
          "txn_id": {
            "type": ["integer", "null"]
          },
          "name_tracker": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "v_tracker": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "v_collector": {
            "type": "string",
            "maxLength": 100
          },
          "v_etl": {
            "type": "string",
            "maxLength": 100
          },
          "user_id": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "user_ipaddress": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "user_fingerprint": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "domain_userid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "domain_sessionidx": {
            "type": ["integer", "null"]
          },
          "network_userid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "geo_country": {
            "type": ["string", "null"],
            "maxLength": 2
          },
          "geo_region": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "geo_city": {
            "type": ["string", "null"],
            "maxLength": 75
          },
          "geo_zipcode": {
            "type": ["string", "null"],
            "maxLength": 15
          },
          "geo_latitude": {
            "type": ["number", "null"]
          },
          "geo_longitude": {
            "type": ["number", "null"]
          },
          "geo_region_name": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "ip_isp": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "ip_organization": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "ip_domain": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "ip_netspeed": {
            "type": ["string", "null"],
            "maxLength": 100
          },
          "page_url": {
            "type": ["string", "null"],
            "maxLength": 4096
          },
          "page_title": {
            "type": ["string", "null"],
            "maxLength": 2000
          },
          "page_referrer": {
            "type": ["string", "null"],
            "maxLength": 4096
          },
          "page_urlscheme": {
            "type": ["string", "null"],
            "maxLength": 16
          },
          "page_urlhost": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "page_urlport": {
            "type": ["integer", "null"]
          },
          "page_urlpath": {
            "type": ["string", "null"],
            "maxLength": 3000
          },
          "page_urlquery": {
            "type": ["string", "null"],
            "maxLength": 6000
          },
          "page_urlfragment": {
            "type": ["string", "null"],
            "maxLength": 3000
          },
          "refr_urlscheme": {
            "type": ["string", "null"],
            "maxLength": 16
          },
          "refr_urlhost": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "refr_urlport": {
            "type": ["integer", "null"]
          },
          "refr_urlpath": {
            "type": ["string", "null"],
            "maxLength": 6000
          },
          "refr_urlquery": {
            "type": ["string", "null"],
            "maxLength": 6000
          },
          "refr_urlfragment": {
            "type": ["string", "null"],
            "maxLength": 3000
          },
          "refr_medium": {
            "type": ["string", "null"],
            "maxLength": 25
          },
          "refr_source": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "refr_term": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_medium": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_source": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_term": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "mkt_content": {
            "type": ["string", "null"],
            "maxLength": 500
          },
          "mkt_campaign": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "se_category": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_action": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_label": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_property": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "se_value": {
            "type": ["number", "null"]
          },
          "tr_orderid": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_affiliation": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_total": {
            "type": ["number", "null"]
          },
          "tr_tax": {
            "type": ["number", "null"]
          },
          "tr_shipping": {
            "type": ["number", "null"]
          },
          "tr_city": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_state": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "tr_country": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_orderid": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_sku": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_name": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_category": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "ti_price": {
            "type": ["number", "null"]
          },
          "ti_quantity": {
            "type": ["integer", "null"]
          },
          "pp_xoffset_min": {
            "type": ["integer", "null"]
          },
          "pp_xoffset_max": {
            "type": ["integer", "null"]
          },
          "pp_yoffset_min": {
            "type": ["integer", "null"]
          },
          "pp_yoffset_max": {
            "type": ["integer", "null"]
          },
          "useragent": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "br_name": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_family": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_version": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_type": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_renderengine": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "br_lang": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "br_features_pdf": {
            "type": ["boolean", "null"]
          },
          "br_features_flash": {
            "type": ["boolean", "null"]
          },
          "br_features_java": {
            "type": ["boolean", "null"]
          },
          "br_features_director": {
            "type": ["boolean", "null"]
          },
          "br_features_quicktime": {
            "type": ["boolean", "null"]
          },
          "br_features_realplayer": {
            "type": ["boolean", "null"]
          },
          "br_features_windowsmedia": {
            "type": ["boolean", "null"]
          },
          "br_features_gears": {
            "type": ["boolean", "null"]
          },
          "br_features_silverlight": {
            "type": ["boolean", "null"]
          },
          "br_cookies": {
            "type": ["boolean", "null"]
          },
          "br_colordepth": {
            "type": ["string", "null"],
            "maxLength": 12
          },
          "br_viewwidth": {
            "type": ["integer", "null"]
          },
          "br_viewheight": {
            "type": ["integer", "null"]
          },
          "os_name": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "os_family": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "os_manufacturer": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "os_timezone": {
            "type": ["string", "null"],
            "maxLength": 255
          },
          "dvce_type": {
            "type": ["string", "null"],
            "maxLength": 50
          },
          "dvce_ismobile": {
            "type": ["boolean", "null"]
          },
          "dvce_screenwidth": {
            "type": ["integer", "null"]
          },
          "dvce_screenheight": {
            "type": ["integer", "null"]
          },
          "doc_charset": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "doc_width": {
            "type": ["integer", "null"]
          },
          "doc_height": {
            "type": ["integer", "null"]
          },
          "tr_currency": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "tr_total_base": {
            "type": ["number", "null"]
          },
          "tr_tax_base": {
            "type": ["number", "null"]
          },
          "tr_shipping_base": {
            "type": ["number", "null"]
          },
          "ti_currency": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "ti_price_base": {
            "type": ["number", "null"]
          },
          "base_currency": {
            "type": ["string", "null"],
            "maxLength": 3
          },
          "geo_timezone": {
            "type": ["string", "null"],
            "maxLength": 64
          },
          "mkt_clickid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "mkt_network": {
            "type": ["string", "null"],
            "maxLength": 64
          },
          "etl_tags": {
            "type": ["string", "null"],
            "maxLength": 500
          },
          "dvce_sent_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "refr_domain_userid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "refr_dvce_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "domain_sessionid": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "derived_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "event_vendor": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "event_name": {
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "event_format": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "event_version": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "event_fingerprint": {
            "type": ["string", "null"],
            "maxLength": 128
          },
          "true_tstamp": {
            "type": ["string", "null"],
            "format": "date-time"
          },
          "unstruct_event": { "type": ["object", "null"] },
          "contexts": { "type": ["object", "null" ]},
          "derived_contexts": { "type": ["object", "null" ]}
        },
        "additionalProperties": false
      },
      "failure": {
        "type": "string",
        "description": "Error message, either human-readable or stacktrace"
      },
      "processor": {
        "type": "object",
        "description": "Information about the piece of software responsible for the creation of enrichment failures",
        "properties": {
          "artifact": {
            "type": "string",
            "description": "Artifact responsible for the creation of enrichment failures",
            "maxLength": 512
          },
          "version": {
            "type": "string",
            "description": "Version of the artifact responsible for the creation of enrichment failures",
            "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
            "maxLength": 32
          }
        },
        "required": [ "artifact", "version" ],
        "additionalProperties": false
      }
    },
    "required": ["payload", "failure"],
    "additionalProperties": false
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/size_violation/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a size violation bad row",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "size_violation",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the size violation",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "maximumAllowedSizeBytes": {
          "type": "integer",
          "description": "Maximum payload size allowed by the current platform",
          "maximum": 1073741824,
          "minimum": 0
        },
        "actualSizeBytes": {
          "type": "integer",
          "description": "Maximum payload size allowed by the current platform",
          "maximum": 1073741824,
          "minimum": 0
        },
        "expectation": {
          "type": "string",
          "description": "Expectation which was not met",
          "maxLength": 256
        }
      },
      "required": [ "timestamp", "maximumAllowedSizeBytes", "actualSizeBytes" ],
      "additionalProperties": false
    },
    "payload": {
      "type": "string",
      "description": "The truncated payload that resulted in a size violation"
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of this size violation",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of this size violation",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of this size violation",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/enrichment_failures/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a bad row resulting from enrichment failures",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "enrichment_failures",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the enrichment failures",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "messages": {
          "type": "array",
          "description": "List of failure messages associated with the enrichment failures",
          "items": {
            "type": "object",
            "description": "Individual enrichment failure or null in case of validation",
            "properties": {
              "enrichment": {
                "type": ["object", "null"],
                "description": "Information needed to identify an enrichment",
                "properties": {
                  "schemaKey": {
                    "type": "string",
                    "description": "The schema coordinates for this enrichment"
                  },
                  "identifier": {
                    "type": "string",
                    "description": "Uniquely identifies the instance of of the enrichment which produced this failure",
                    "maxLength": 256
                  }
                },
                "required": [ "schemaKey", "identifier" ],
                "additionalProperties": false
              },
              "message": {
                "type": "object",
                "description": "Information about the failure that happened for this enrichment",
                "anyOf": [
                  {
                    "type": "object",
                    "description": "Error which was internal to the enrichment regarding its input data",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "Field which did not meet the enrichment's expectations",
                        "maxLength": 64
                      },
                      "value": {
                        "type": [ "string", "null" ],
                        "description": "Stringified representation of the value which did not meet expectations"
                      },
                      "expectation": {
                        "type": "string",
                        "description": "Expectation which was not met",
                        "maxLength": 256
                      }
                    },
                    "required": ["field", "expectation" ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "description": "Error which was external to the enrichment, e.g. a connection issue",
                    "properties": {
                      "error": {
                        "type": "string",
                        "description": "Error that occurred",
                        "maxLength": 512
                      }
                    },
                    "required": [ "error" ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "description": "Supplied JSON did not validate against its schema (or schema was not found)",
                    "properties": {
                      "schemaKey": {
                        "type": "string",
                        "description": "The iglu schema coordinates to validate against"
                      },
                      "error": {
                        "description": "Iglu client error",
                        "anyOf": [
                          {
                            "description": "Resolution error - schema could not be found in the specified repositories, defined by ResolutionError in the Iglu Client",
                            "properties": {
                              "error": {
                                "enum": ["ResolutionError"]
                              },
                              "lookupHistory": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "repostitory": {
                                      "type": "string",
                                      "description": "Name of the repostitory as written in resolver.json"
                                    },
                                    "errors": {
                                      "description": "Set of errors which happened for this repository",
                                      "type": "array",
                                      "minItems": 1,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "error": {
                                            "description": "Type of error (NotFound does not contain a message)",
                                            "enum": ["RepoFailure", "ClientFailure", "NotFound"]
                                          },
                                          "message": {
                                            "description": "Optional message in case of ClientFailure or RepoFailure",
                                            "type": "string",
                                            "maxLength": 256
                                          }
                                        },
                                        "required": ["error" ]
                                      }
                                    },
                                    "attempts": {
                                      "type": "integer",
                                      "minimum": 0,
                                      "description": "Number of attempts which have been made"
                                    },
                                    "lastAttempt": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "Timestamp of a last attempt being made"
                                    }
                                  },
                                  "required": ["repository", "errors", "attempts", "lastAttempt"]
                                }
                              }
                            },
                            "required": [ "error", "lookupHistory" ],
                            "additionalProperties": false
                          },
                          {
                            "description": "Data is invalid against resolved schema",
                            "properties": {
                              "error": {
                                "enum": ["ValidationError"]
                              },
                              "dataReports": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "properties": {
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable message describing the issue with the schema"
                                    },
                                    "path": {
                                      "type": ["string", "null"],
                                      "description": "JSON Path to an issue in the faulty JSON datum"
                                    },
                                    "keyword": {
                                      "type": ["string", "null"],
                                      "description": "JSON Schema Keywrod caused invalidation"
                                    },
                                    "targets": {
                                      "type": ["array", "null"]
                                    }
                                  },
                                  "required": [ "path", "message", "keyword", "targets" ],
                                  "additionalProperties": false
                                }
                              }
                            },
                            "required": [ "dataReports" ],
                            "additionalProperties": false
                          },
                          {
                            "description": "Schema is invalid and cannot be used to validate an instance",
                            "properties": {
                              "error": {
                                "enum": ["ValidationError"]
                              },
                              "schemaIssues": {
                                "description": "List of problems in resolved JSON schema",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "path": {
                                      "type": "string",
                                      "description": "JSON Path to an issue in the faulty JSON Schema"
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable message describing the issue with the schema"
                                    }
                                  },
                                  "required": [ "path", "message" ],
                                  "additionalProperties": false
                                }
                              }
                            },
                            "required": [ "error" ],
                            "additionalProperties": false
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "required": [ "enrichment", "message" ],
            "additionalProperties": false
          }
        }
      }
    },
    "payload": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "object",
          "description": "The raw event extracted from collector payload",
          "properties": {
            "vendor": {
              "type": "string",
              "description": "Vendor of the adapter that processed this payload, here com.snowplowanalytics.snowplow",
              "maxLength": 64
            },
            "version": {
              "type": "string",
              "description": "Version of the adapter that processed this payload",
              "maxLength": 16
            },
            "parameters": {
              "type": "object",
              "description": "Tracker protocol parameters"
            },
            "contentType": {
              "type": [ "string", "null" ],
              "description": "Content type of the payload as detected by the collector",
              "maxLength": 256
            },
            "loaderName": {
              "type": "string",
              "maxLength": 32
            },
            "encoding": {
              "type": "string",
              "description": "Encoding of the collector payload",
              "maxLength": 32
            },
            "hostname": {
              "type": [ "string", "null" ],
              "description": "Hostname of the payload as detected by the collector",
              "maxLength": 8192
            },
            "timestamp": {
              "type": ["string", "null"],
              "description": "Timestamp at which the payload was collected",
              "format": "date-time"
            },
            "ipAddress": {
              "type": ["string", "null"],
              "description": "IP address of the payload as detected by the collector",
              "maxLength": 128
            },
            "useragent": {
              "type": [ "string", "null" ],
              "description": "User agent of the payload as detected by the collector",
              "maxLength": 4096
            },
            "refererUri": {
              "type": [ "string", "null" ],
              "description": "Referer of the payload as detected by the collector",
              "maxLength": 8192
            },
            "headers": {
              "type": [ "array", "null" ],
              "description": "List of the headers part of this collector payload",
              "items": {
                "type": "string",
                "maxLength": 8192
              }
            },
            "userId": {
              "type": [ "string", "null" ],
              "description": "Network user id associated with this payload",
              "format": "uuid"
            }
          },
          "required": [ "vendor", "version", "loaderName", "encoding" ],
          "additionalProperties": false
        },
        "enriched": {
          "description": "The partially enriched event that resulted in schema violations",
          "properties": {
            "app_id": { "type": ["string", "null"] },
            "platform": { "type": ["string", "null"] },
            "etl_tstamp": { "type": ["string", "null"] },
            "collector_tstamp": { "type": ["string", "null"] },
            "dvce_created_tstamp": { "type": ["string", "null"] },
            "event": { "type": ["string", "null"] },
            "event_id": { "type": ["string", "null"] },
            "txn_id": { "type": ["string", "null"] },
            "name_tracker": { "type": ["string", "null"] },
            "v_tracker": { "type": ["string", "null"] },
            "v_collector": { "type": "string" },
            "v_etl": { "type": "string" },
            "user_id": { "type": ["string", "null"] },
            "user_ipaddress": { "type": ["string", "null"] },
            "user_fingerprint": { "type": ["string", "null"] },
            "domain_userid": { "type": ["string", "null"] },
            "domain_sessionidx": { "type": ["integer", "null"] },
            "network_userid": { "type": ["string", "null"] },
            "geo_country": { "type": ["string", "null"] },
            "geo_region": { "type": ["string", "null"] },
            "geo_city": { "type": ["string", "null"] },
            "geo_zipcode": { "type": ["string", "null"] },
            "geo_latitude": { "type": ["number", "null"] },
            "geo_longitude": { "type": ["number", "null"] },
            "geo_region_name": { "type": ["string", "null"] },
            "ip_isp": { "type": ["string", "null"] },
            "ip_organization": { "type": ["string", "null"] },
            "ip_domain": { "type": ["string", "null"] },
            "ip_netspeed": { "type": ["string", "null"] },
            "page_url": { "type": ["string", "null"] },
            "page_title": { "type": ["string", "null"] },
            "page_referrer": { "type": ["string", "null"] },
            "page_urlscheme": { "type": ["string", "null"] },
            "page_urlhost": { "type": ["string", "null"] },
            "page_urlport": { "type": ["integer", "null"] },
            "page_urlpath": { "type": ["string", "null"] },
            "page_urlquery": { "type": ["string", "null"] },
            "page_urlfragment": { "type": ["string", "null"] },
            "refr_urlscheme": { "type": ["string", "null"] },
            "refr_urlhost": { "type": ["string", "null"] },
            "refr_urlport": { "type": ["integer", "null"] },
            "refr_urlpath": { "type": ["string", "null"] },
            "refr_urlquery": { "type": ["string", "null"] },
            "refr_urlfragment": { "type": ["string", "null"] },
            "refr_medium": { "type": ["string", "null"] },
            "refr_source": { "type": ["string", "null"] },
            "refr_term": { "type": ["string", "null"] },
            "mkt_medium": { "type": ["string", "null"] },
            "mkt_source": { "type": ["string", "null"] },
            "mkt_term": { "type": ["string", "null"] },
            "mkt_content": { "type": ["string", "null"] },
            "mkt_campaign": { "type": ["string", "null"] },
            "contexts": { "type": ["string", "null"] },
            "se_category": { "type": ["string", "null"] },
            "se_action": { "type": ["string", "null"] },
            "se_label": { "type": ["string", "null"] },
            "se_property": { "type": ["string", "null"] },
            "se_value": { "type": ["string", "null"] },
            "unstruct_event": { "type": ["string", "null"] },
            "tr_orderid": { "type": ["string", "null"] },
            "tr_affiliation": { "type": ["string", "null"] },
            "tr_total": { "type": ["string", "null"] },
            "tr_tax": { "type": ["string", "null"] },
            "tr_shipping": { "type": ["string", "null"] },
            "tr_city": { "type": ["string", "null"] },
            "tr_state": { "type": ["string", "null"] },
            "tr_country": { "type": ["string", "null"] },
            "ti_orderid": { "type": ["string", "null"] },
            "ti_sku": { "type": ["string", "null"] },
            "ti_name": { "type": ["string", "null"] },
            "ti_category": { "type": ["string", "null"] },
            "ti_price": { "type": ["string", "null"] },
            "ti_quantity": { "type": ["integer", "null"] },
            "pp_xoffset_min": { "type": ["integer", "null"] },
            "pp_xoffset_max": { "type": ["integer", "null"] },
            "pp_yoffset_min": { "type": ["integer", "null"] },
            "pp_yoffset_max": { "type": ["integer", "null"] },
            "useragent": { "type": ["string", "null"] },
            "br_name": { "type": ["string", "null"] },
            "br_family": { "type": ["string", "null"] },
            "br_version": { "type": ["string", "null"] },
            "br_type": { "type": ["string", "null"] },
            "br_renderengine": { "type": ["string", "null"] },
            "br_lang": { "type": ["string", "null"] },
            "br_features_pdf": { "type": ["integer", "null"] },
            "br_features_flash": { "type": ["integer", "null"] },
            "br_features_java": { "type": ["integer", "null"] },
            "br_features_director": { "type": ["integer", "null"] },
            "br_features_quicktime": { "type": ["integer", "null"] },
            "br_features_realplayer": { "type": ["integer", "null"] },
            "br_features_windowsmedia": { "type": ["integer", "null"] },
            "br_features_gears": { "type": ["integer", "null"] },
            "br_features_silverlight": { "type": ["integer", "null"] },
            "br_cookies": { "type": ["integer", "null"] },
            "br_colordepth": { "type": ["string", "null"] },
            "br_viewwidth": { "type": ["integer", "null"] },
            "br_viewheight": { "type": ["integer", "null"] },
            "os_name": { "type": ["string", "null"] },
            "os_family": { "type": ["string", "null"] },
            "os_manufacturer": { "type": ["string", "null"] },
            "os_timezone": { "type": ["string", "null"] },
            "dvce_type": { "type": ["string", "null"] },
            "dvce_ismobile": { "type": ["integer", "null"] },
            "dvce_screenwidth": { "type": ["integer", "null"] },
            "dvce_screenheight": { "type": ["integer", "null"] },
            "doc_charset": { "type": ["string", "null"] },
            "doc_width": { "type": ["integer", "null"] },
            "doc_height": { "type": ["integer", "null"] },
            "tr_currency": { "type": ["string", "null"] },
            "tr_total_base": { "type": ["string", "null"] },
            "tr_tax_base": { "type": ["string", "null"] },
            "tr_shipping_base": { "type": ["string", "null"] },
            "ti_currency": { "type": ["string", "null"] },
            "ti_price_base": { "type": ["string", "null"] },
            "base_currency": { "type": ["string", "null"] },
            "geo_timezone": { "type": ["string", "null"] },
            "mkt_clickid": { "type": ["string", "null"] },
            "mkt_network": { "type": ["string", "null"] },
            "etl_tags": { "type": ["string", "null"] },
            "dvce_sent_tstamp": { "type": ["string", "null"] },
            "refr_domain_userid": { "type": ["string", "null"] },
            "refr_dvce_tstamp": { "type": ["string", "null"] },
            "derived_contexts": { "type": ["string", "null"] },
            "domain_sessionid": { "type": ["string", "null"] },
            "derived_tstamp": { "type": ["string", "null"] },
            "event_vendor": { "type": ["string", "null"] },
            "event_name": { "type": ["string", "null"] },
            "event_format": { "type": ["string", "null"] },
            "event_version": { "type": ["string", "null"] },
            "event_fingerprint": { "type": ["string", "null"] },
            "true_tstamp": { "type": ["string", "null"] }
          },
          "additionalProperties": false
        }
      }
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/enrichment_failures/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a bad row resulting from enrichment failures",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "enrichment_failures",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the enrichment failures",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "messages": {
          "type": "array",
          "description": "List of failure messages associated with the enrichment failures",
          "items": {
            "type": "object",
            "description": "Individual enrichment failure or null in case of validation",
            "properties": {
              "enrichment": {
                "type": ["object", "null"],
                "description": "Information needed to identify an enrichment",
                "properties": {
                  "schemaKey": {
                    "type": "string",
                    "description": "The schema coordinates for this enrichment"
                  },
                  "identifier": {
                    "type": "string",
                    "description": "Uniquely identifies the instance of of the enrichment which produced this failure",
                    "maxLength": 256
                  }
                },
                "required": [ "schemaKey", "identifier" ],
                "additionalProperties": false
              },
              "message": {
                "type": "object",
                "description": "Information about the failure that happened for this enrichment",
                "anyOf": [
                  {
                    "type": "object",
                    "description": "Error which was internal to the enrichment regarding its input data",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "Field which did not meet the enrichment's expectations",
                        "maxLength": 64
                      },
                      "value": {
                        "type": [ "string", "null" ],
                        "description": "Stringified representation of the value which did not meet expectations"
                      },
                      "expectation": {
                        "type": "string",
                        "description": "Expectation which was not met",
                        "maxLength": 256
                      }
                    },
                    "required": ["field", "expectation" ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "description": "Error which was external to the enrichment, e.g. a connection issue",
                    "properties": {
                      "error": {
                        "type": "string",
                        "description": "Error that occurred",
                        "maxLength": 512
                      }
                    },
                    "required": [ "error" ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "description": "Supplied JSON did not validate against its schema (or schema was not found)",
                    "properties": {
                      "schemaKey": {
                        "type": "string",
                        "description": "The iglu schema coordinates to validate against"
                      },
                      "error": {
                        "description": "Iglu client error",
                        "anyOf": [
                          {
                            "description": "Resolution error - schema could not be found in the specified repositories, defined by ResolutionError in the Iglu Client",
                            "properties": {
                              "error": {
                                "enum": ["ResolutionError"]
                              },
                              "lookupHistory": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "repostitory": {
                                      "type": "string",
                                      "description": "Name of the repostitory as written in resolver.json"
                                    },
                                    "errors": {
                                      "description": "Set of errors which happened for this repository",
                                      "type": "array",
                                      "minItems": 1,
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "error": {
                                            "description": "Type of error (NotFound does not contain a message)",
                                            "enum": ["RepoFailure", "ClientFailure", "NotFound"]
                                          },
                                          "message": {
                                            "description": "Optional message in case of ClientFailure or RepoFailure",
                                            "type": "string",
                                            "maxLength": 256
                                          }
                                        },
                                        "required": ["error" ]
                                      }
                                    },
                                    "attempts": {
                                      "type": "integer",
                                      "minimum": 0,
                                      "description": "Number of attempts which have been made"
                                    },
                                    "lastAttempt": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "Timestamp of a last attempt being made"
                                    }
                                  },
                                  "required": ["repository", "errors", "attempts", "lastAttempt"]
                                }
                              }
                            },
                            "required": [ "error", "lookupHistory" ],
                            "additionalProperties": false
                          },
                          {
                            "description": "Data is invalid against resolved schema",
                            "properties": {
                              "error": {
                                "enum": ["ValidationError"]
                              },
                              "dataReports": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "properties": {
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable message describing the issue with the schema"
                                    },
                                    "path": {
                                      "type": ["string", "null"],
                                      "description": "JSON Path to an issue in the faulty JSON datum"
                                    },
                                    "keyword": {
                                      "type": ["string", "null"],
                                      "description": "JSON Schema Keywrod caused invalidation"
                                    },
                                    "targets": {
                                      "type": ["array", "null"]
                                    }
                                  },
                                  "required": [ "path", "message", "keyword", "targets" ],
                                  "additionalProperties": false
                                }
                              }
                            },
                            "required": [ "dataReports" ],
                            "additionalProperties": false
                          },
                          {
                            "description": "Schema is invalid and cannot be used to validate an instance",
                            "properties": {
                              "error": {
                                "enum": ["ValidationError"]
                              },
                              "schemaIssues": {
                                "description": "List of problems in resolved JSON schema",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "path": {
                                      "type": "string",
                                      "description": "JSON Path to an issue in the faulty JSON Schema"
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable message describing the issue with the schema"
                                    }
                                  },
                                  "required": [ "path", "message" ],
                                  "additionalProperties": false
                                }
                              }
                            },
                            "required": [ "error" ],
                            "additionalProperties": false
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "required": [ "enrichment", "message" ],
            "additionalProperties": false
          }
        }
      }
    },
    "payload": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "object",
          "description": "The raw event extracted from collector payload",
          "properties": {
            "vendor": {
              "type": "string",
              "description": "Vendor of the adapter that processed this payload, here com.snowplowanalytics.snowplow",
              "maxLength": 64
            },
            "version": {
              "type": "string",
              "description": "Version of the adapter that processed this payload",
              "maxLength": 16
            },
            "parameters": {
              "type": [ "array", "null" ],
              "description": "Query string of the collector payload containing this event",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the querystring parameter",
                    "maxLength": 512
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Possible value for the querystring parameter",
                    "maxLength": 512
                  }
                },
                "required": [ "name", "value" ],
                "additionalProperties": false
              }
            },
            "contentType": {
              "type": [ "string", "null" ],
              "description": "Content type of the payload as detected by the collector",
              "maxLength": 256
            },
            "loaderName": {
              "type": "string",
              "maxLength": 32
            },
            "encoding": {
              "type": "string",
              "description": "Encoding of the collector payload",
              "maxLength": 32
            },
            "hostname": {
              "type": [ "string", "null" ],
              "description": "Hostname of the payload as detected by the collector",
              "maxLength": 8192
            },
            "timestamp": {
              "type": ["string", "null"],
              "description": "Timestamp at which the payload was collected",
              "format": "date-time"
            },
            "ipAddress": {
              "type": ["string", "null"],
              "description": "IP address of the payload as detected by the collector",
              "maxLength": 128
            },
            "useragent": {
              "type": [ "string", "null" ],
              "description": "User agent of the payload as detected by the collector",
              "maxLength": 4096
            },
            "refererUri": {
              "type": [ "string", "null" ],
              "description": "Referer of the payload as detected by the collector",
              "maxLength": 8192
            },
            "headers": {
              "type": [ "array", "null" ],
              "description": "List of the headers part of this collector payload",
              "items": {
                "type": "string",
                "maxLength": 8192
              }
            },
            "userId": {
              "type": [ "string", "null" ],
              "description": "Network user id associated with this payload",
              "format": "uuid"
            }
          },
          "required": [ "vendor", "version", "loaderName", "encoding" ],
          "additionalProperties": false
        },
        "enriched": {
          "description": "The partially enriched event that resulted in schema violations",
          "properties": {
            "app_id": { "type": ["string", "null"] },
            "platform": { "type": ["string", "null"] },
            "etl_tstamp": { "type": ["string", "null"] },
            "collector_tstamp": { "type": ["string", "null"] },
            "dvce_created_tstamp": { "type": ["string", "null"] },
            "event": { "type": ["string", "null"] },
            "event_id": { "type": ["string", "null"] },
            "txn_id": { "type": ["string", "null"] },
            "name_tracker": { "type": ["string", "null"] },
            "v_tracker": { "type": ["string", "null"] },
            "v_collector": { "type": ["string", "null"] },
            "v_etl": { "type": ["string", "null"] },
            "user_id": { "type": ["string", "null"] },
            "user_ipaddress": { "type": ["string", "null"] },
            "user_fingerprint": { "type": ["string", "null"] },
            "domain_userid": { "type": ["string", "null"] },
            "domain_sessionidx": { "type": ["integer", "null"] },
            "network_userid": { "type": ["string", "null"] },
            "geo_country": { "type": ["string", "null"] },
            "geo_region": { "type": ["string", "null"] },
            "geo_city": { "type": ["string", "null"] },
            "geo_zipcode": { "type": ["string", "null"] },
            "geo_latitude": { "type": ["number", "null"] },
            "geo_longitude": { "type": ["number", "null"] },
            "geo_region_name": { "type": ["string", "null"] },
            "ip_isp": { "type": ["string", "null"] },
            "ip_organization": { "type": ["string", "null"] },
            "ip_domain": { "type": ["string", "null"] },
            "ip_netspeed": { "type": ["string", "null"] },
            "page_url": { "type": ["string", "null"] },
            "page_title": { "type": ["string", "null"] },
            "page_referrer": { "type": ["string", "null"] },
            "page_urlscheme": { "type": ["string", "null"] },
            "page_urlhost": { "type": ["string", "null"] },
            "page_urlport": { "type": ["integer", "null"] },
            "page_urlpath": { "type": ["string", "null"] },
            "page_urlquery": { "type": ["string", "null"] },
            "page_urlfragment": { "type": ["string", "null"] },
            "refr_urlscheme": { "type": ["string", "null"] },
            "refr_urlhost": { "type": ["string", "null"] },
            "refr_urlport": { "type": ["integer", "null"] },
            "refr_urlpath": { "type": ["string", "null"] },
            "refr_urlquery": { "type": ["string", "null"] },
            "refr_urlfragment": { "type": ["string", "null"] },
            "refr_medium": { "type": ["string", "null"] },
            "refr_source": { "type": ["string", "null"] },
            "refr_term": { "type": ["string", "null"] },
            "mkt_medium": { "type": ["string", "null"] },
            "mkt_source": { "type": ["string", "null"] },
            "mkt_term": { "type": ["string", "null"] },
            "mkt_content": { "type": ["string", "null"] },
            "mkt_campaign": { "type": ["string", "null"] },
            "contexts": { "type": ["string", "null"] },
            "se_category": { "type": ["string", "null"] },
            "se_action": { "type": ["string", "null"] },
            "se_label": { "type": ["string", "null"] },
            "se_property": { "type": ["string", "null"] },
            "se_value": { "type": ["string", "null"] },
            "unstruct_event": { "type": ["string", "null"] },
            "tr_orderid": { "type": ["string", "null"] },
            "tr_affiliation": { "type": ["string", "null"] },
            "tr_total": { "type": ["string", "null"] },
            "tr_tax": { "type": ["string", "null"] },
            "tr_shipping": { "type": ["string", "null"] },
            "tr_city": { "type": ["string", "null"] },
            "tr_state": { "type": ["string", "null"] },
            "tr_country": { "type": ["string", "null"] },
            "ti_orderid": { "type": ["string", "null"] },
            "ti_sku": { "type": ["string", "null"] },
            "ti_name": { "type": ["string", "null"] },
            "ti_category": { "type": ["string", "null"] },
            "ti_price": { "type": ["string", "null"] },
            "ti_quantity": { "type": ["integer", "null"] },
            "pp_xoffset_min": { "type": ["integer", "null"] },
            "pp_xoffset_max": { "type": ["integer", "null"] },
            "pp_yoffset_min": { "type": ["integer", "null"] },
            "pp_yoffset_max": { "type": ["integer", "null"] },
            "useragent": { "type": ["string", "null"] },
            "br_name": { "type": ["string", "null"] },
            "br_family": { "type": ["string", "null"] },
            "br_version": { "type": ["string", "null"] },
            "br_type": { "type": ["string", "null"] },
            "br_renderengine": { "type": ["string", "null"] },
            "br_lang": { "type": ["string", "null"] },
            "br_features_pdf": { "type": ["integer", "null"] },
            "br_features_flash": { "type": ["integer", "null"] },
            "br_features_java": { "type": ["integer", "null"] },
            "br_features_director": { "type": ["integer", "null"] },
            "br_features_quicktime": { "type": ["integer", "null"] },
            "br_features_realplayer": { "type": ["integer", "null"] },
            "br_features_windowsmedia": { "type": ["integer", "null"] },
            "br_features_gears": { "type": ["integer", "null"] },
            "br_features_silverlight": { "type": ["integer", "null"] },
            "br_cookies": { "type": ["integer", "null"] },
            "br_colordepth": { "type": ["string", "null"] },
            "br_viewwidth": { "type": ["integer", "null"] },
            "br_viewheight": { "type": ["integer", "null"] },
            "os_name": { "type": ["string", "null"] },
            "os_family": { "type": ["string", "null"] },
            "os_manufacturer": { "type": ["string", "null"] },
            "os_timezone": { "type": ["string", "null"] },
            "dvce_type": { "type": ["string", "null"] },
            "dvce_ismobile": { "type": ["integer", "null"] },
            "dvce_screenwidth": { "type": ["integer", "null"] },
            "dvce_screenheight": { "type": ["integer", "null"] },
            "doc_charset": { "type": ["string", "null"] },
            "doc_width": { "type": ["integer", "null"] },
            "doc_height": { "type": ["integer", "null"] },
            "tr_currency": { "type": ["string", "null"] },
            "tr_total_base": { "type": ["string", "null"] },
            "tr_tax_base": { "type": ["string", "null"] },
            "tr_shipping_base": { "type": ["string", "null"] },
            "ti_currency": { "type": ["string", "null"] },
            "ti_price_base": { "type": ["string", "null"] },
            "base_currency": { "type": ["string", "null"] },
            "geo_timezone": { "type": ["string", "null"] },
            "mkt_clickid": { "type": ["string", "null"] },
            "mkt_network": { "type": ["string", "null"] },
            "etl_tags": { "type": ["string", "null"] },
            "dvce_sent_tstamp": { "type": ["string", "null"] },
            "refr_domain_userid": { "type": ["string", "null"] },
            "refr_dvce_tstamp": { "type": ["string", "null"] },
            "derived_contexts": { "type": ["string", "null"] },
            "domain_sessionid": { "type": ["string", "null"] },
            "derived_tstamp": { "type": ["string", "null"] },
            "event_vendor": { "type": ["string", "null"] },
            "event_name": { "type": ["string", "null"] },
            "event_format": { "type": ["string", "null"] },
            "event_version": { "type": ["string", "null"] },
            "event_fingerprint": { "type": ["string", "null"] },
            "true_tstamp": { "type": ["string", "null"] }
          },
          "additionalProperties": false
        }
      }
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/tracker_protocol_violations/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a bad row resulting from tracker protocol violations",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "tracker_protocol_violations",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the tracker protocol violations",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "vendor": {
          "type": "string",
          "description": "Vendor of the adapter that processed this payload, here com.snowplowanalytics.snowplow",
          "maxLength": 64
        },
        "version": {
          "type": "string",
          "description": "Version of the adapter that processed this payload, here tp2",
          "maxLength": 16
        },
        "messages": {
          "type": "array",
          "description": "List of failure messages associated with the tracker protocol violations",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "description": "Error which was internal to the adapter regarding its input data",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "Field which did not meet the adapter's expectations",
                    "maxLength": 64
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Stringified representation of the value which did not meet expectations"
                  },
                  "expectation": {
                    "type": "string",
                    "description": "Expectation which was not met",
                    "maxLength": 256
                  }
                },
                "required": [ "field", "expectation" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "String supplied for schema validation was not JSON",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "Field which ended up not being json",
                    "maxLength": 64
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Stringified representation of the value which is not json"
                  },
                  "error": {
                    "type": "string",
                    "description": "Json parsing issue"
                  }
                },
                "required": ["field", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Json supplied for schema validation was not self-describing",
                "properties": {
                  "json": {
                    "description": "Supplied JSON which was not self-describing"
                  },
                  "error": {
                    "type": "string",
                    "description": "Issue which the json which makes it not self-describing",
                    "enum": [ "INVALID_SCHEMAVER", "INVALID_IGLUURI", "INVALID_DATA_PAYLOAD", "INVALID_SCHEMA" ]
                  }
                },
                "required": [ "json", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Supplied JSON does not match the associated schema criterion",
                "properties": {
                  "schemaKey": {
                    "description": "Supplied schema key",
                    "type": "string"
                  },
                  "schemaCriterion": {
                    "type": "string",
                    "description": "The schema criterion which was not respected"
                  }
                },
                "required": [ "schemaKey", "schemaCriterion" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Supplied JSON did not validate against its schema (or schema was not found)",
                "properties": {
                  "schemaKey": {
                    "type": "string",
                    "description": "The iglu schema coordinates to validate against"
                  },
                  "error": {
                    "description": "Iglu client error",
                    "anyOf": [
                      {
                        "description": "Resolution error - schema could not be found in the specified repositories, defined by ResolutionError in the Iglu Client",
                        "properties": {
                          "error": {
                            "enum": ["ResolutionError"]
                          },
                          "lookupHistory": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "repostitory": {
                                  "type": "string",
                                  "description": "Name of the repostitory as written in resolver.json"
                                },
                                "errors": {
                                  "description": "Set of errors which happened for this repository",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "error": {
                                        "description": "Type of error (NotFound does not contain a message)",
                                        "enum": ["RepoFailure", "ClientFailure", "NotFound"]
                                      },
                                      "message": {
                                        "description": "Optional message in case of ClientFailure or RepoFailure",
                                        "type": "string",
                                        "maxLength": 256
                                      }
                                    },
                                    "required": ["error" ]
                                  }
                                },
                                "attempts": {
                                  "type": "integer",
                                  "minimum": 0,
                                  "description": "Number of attempts which have been made"
                                },
                                "lastAttempt": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp of a last attempt being made"
                                }
                              },
                              "required": ["repository", "errors", "attempts", "lastAttempt"]
                            }
                          }
                        },
                        "required": [ "error", "lookupHistory" ],
                        "additionalProperties": false
                      },
                      {
                        "description": "Data is invalid against resolved schema",
                        "properties": {
                          "error": {
                            "enum": ["ValidationError"]
                          },
                          "dataReports": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "properties": {
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable message describing the issue with the schema"
                                },
                                "path": {
                                  "type": ["string", "null"],
                                  "description": "JSON Path to an issue in the faulty JSON datum"
                                },
                                "keyword": {
                                  "type": ["string", "null"],
                                  "description": "JSON Schema Keywrod caused invalidation"
                                },
                                "targets": {
                                  "type": ["array", "null"]
                                }
                              },
                              "required": [ "path", "message", "keyword", "targets" ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [ "dataReports" ],
                        "additionalProperties": false
                      },
                      {
                        "description": "Schema is invalid and cannot be used to validate an instance",
                        "properties": {
                          "error": {
                            "enum": ["ValidationError"]
                          },
                          "schemaIssues": {
                            "description": "List of problems in resolved JSON schema",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "string",
                                  "description": "JSON Path to an issue in the faulty JSON Schema"
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable message describing the issue with the schema"
                                }
                              },
                              "required": [ "path", "message" ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [ "error" ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "required": [ "timestamp", "vendor", "version", "messages" ],
      "additionalProperties": false
    },
    "payload": {
      "type": "object",
      "description": "The collector payload that resulted in tracker protocol violations",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Vendor of the adapter that processed this payload, here com.snowplowanalytics.snowplow",
          "maxLength": 64
        },
        "version": {
          "type": "string",
          "description": "Version of the adapter that processed this payload, here always 'tp2' (maxLength 16 for compatibility)",
          "maxLength": 16
        },
        "querystring": {
          "type": [ "array", "null" ],
          "description": "Query string of this collector payload",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the querystring parameter",
                "maxLength": 512
              },
              "value": {
                "type": [ "string", "null" ],
                "description": "Possible value for the querystring parameter",
                "maxLength": 512
              }
            },
            "required": [ "name" ],
            "additionalProperties": false
          }
        },
        "contentType": {
          "type": [ "string", "null" ],
          "description": "Content type of the payload as detected by the collector",
          "maxLength": 256
        },
        "body": {
          "type": [ "string", "null" ],
          "description": "Body of this collector payload"
        },
        "collector": {
          "type": "string",
          "description": "Collector which produced this collector payload",
          "maxLength": 32
        },
        "encoding": {
          "type": "string",
          "description": "Encoding of the collector payload",
          "maxLength": 32
        },
        "hostname": {
          "type": [ "string", "null" ],
          "description": "Hostname of the payload as detected by the collector",
          "maxLength": 8192
        },
        "timestamp": {
          "type": ["string", "null"],
          "description": "Timestamp at which the payload was collected",
          "format": "date-time"
        },
        "ipAddress": {
          "type": ["string", "null"],
          "description": "IP address of the payload as detected by the collector",
          "maxLength": 128
        },
        "useragent": {
          "type": [ "string", "null" ],
          "description": "User agent of the payload as detected by the collector",
          "maxLength": 4096
        },
        "refererUri": {
          "type": [ "string", "null" ],
          "description": "Referer of the payload as detected by the collector",
          "maxLength": 8192
        },
        "headers": {
          "type": [ "array", "null" ],
          "description": "List of the headers part of this collector payload",
          "items": {
            "type": "string",
            "maxLength": 8192
          }
        },
        "networkUserId": {
          "type": [ "string", "null" ],
          "description": "Network user id associated with this payload",
          "format": "uuid"
        }
      },
      "required": [ "vendor", "version", "collector", "encoding" ],
      "additionalProperties": false
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of tracker protocol violations",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of tracker protocol violations",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of tracker protocol violations",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}


''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/schema_violations/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a bad row resulting from schema violations",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "schema_violations",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the schema violations",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "messages": {
          "type": "array",
          "description": "List of failure messages associated with the tracker protocol violations",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "description": "String supplied for schema validation was not JSON",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "Field which ended up not being json",
                    "maxLength": 64
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Stringified representation of the value which is not json"
                  },
                  "error": {
                    "type": "string",
                    "description": "Json parsing issue"
                  }
                },
                "required": ["field", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Json supplied for schema validation was not self-describing",
                "properties": {
                  "json": {
                    "description": "Supplied JSON which was not self-describing"
                  },
                  "error": {
                    "type": "string",
                    "description": "Issue which the json which makes it not self-describing",
                    "enum": [ "INVALID_SCHEMAVER", "INVALID_IGLUURI", "INVALID_DATA_PAYLOAD", "INVALID_SCHEMA" ]
                  }
                },
                "required": [ "json", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Supplied JSON does not match the associated schema criterion",
                "properties": {
                  "schemaKey": {
                    "description": "Supplied schema key",
                    "type": "string"
                  },
                  "schemaCriterion": {
                    "type": "string",
                    "description": "The schema criterion which was not respected"
                  }
                },
                "required": [ "schemaKey", "schemaCriterion" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Supplied JSON did not validate against its schema (or schema was not found)",
                "properties": {
                  "schemaKey": {
                    "type": "string",
                    "description": "The iglu schema coordinates to validate against"
                  },
                  "error": {
                    "description": "Iglu client error",
                    "anyOf": [
                      {
                        "description": "Resolution error - schema could not be found in the specified repositories, defined by ResolutionError in the Iglu Client",
                        "properties": {
                          "error": {
                            "enum": ["ResolutionError"]
                          },
                          "lookupHistory": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "repostitory": {
                                  "type": "string",
                                  "description": "Name of the repostitory as written in resolver.json"
                                },
                                "errors": {
                                  "description": "Set of errors which happened for this repository",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "error": {
                                        "description": "Type of error (NotFound does not contain a message)",
                                        "enum": ["RepoFailure", "ClientFailure", "NotFound"]
                                      },
                                      "message": {
                                        "description": "Optional message in case of ClientFailure or RepoFailure",
                                        "type": "string",
                                        "maxLength": 256
                                      }
                                    },
                                    "required": ["error" ]
                                  }
                                },
                                "attempts": {
                                  "type": "integer",
                                  "minimum": 0,
                                  "description": "Number of attempts which have been made"
                                },
                                "lastAttempt": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp of a last attempt being made"
                                }
                              },
                              "required": ["repository", "errors", "attempts", "lastAttempt"]
                            }
                          }
                        },
                        "required": [ "error", "lookupHistory" ],
                        "additionalProperties": false
                      },
                      {
                        "description": "Data is invalid against resolved schema",
                        "properties": {
                          "error": {
                            "enum": ["ValidationError"]
                          },
                          "dataReports": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "properties": {
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable message describing the issue with the schema"
                                },
                                "path": {
                                  "type": ["string", "null"],
                                  "description": "JSON Path to an issue in the faulty JSON datum"
                                },
                                "keyword": {
                                  "type": ["string", "null"],
                                  "description": "JSON Schema Keywrod caused invalidation"
                                },
                                "targets": {
                                  "type": ["array", "null"]
                                }
                              },
                              "required": [ "path", "message", "keyword", "targets" ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [ "dataReports" ],
                        "additionalProperties": false
                      },
                      {
                        "description": "Schema is invalid and cannot be used to validate an instance",
                        "properties": {
                          "error": {
                            "enum": ["ValidationError"]
                          },
                          "schemaIssues": {
                            "description": "List of problems in resolved JSON schema",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "string",
                                  "description": "JSON Path to an issue in the faulty JSON Schema"
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable message describing the issue with the schema"
                                }
                              },
                              "required": [ "path", "message" ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [ "error" ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "required": [ "timestamp", "messages" ],
      "additionalProperties": false
    },
    "payload": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "object",
          "description": "The raw event extracted from collector payload",
          "properties": {
            "vendor": {
              "type": "string",
              "description": "Vendor of the adapter that processed this payload, here com.snowplowanalytics.snowplow",
              "maxLength": 64
            },
            "version": {
              "type": "string",
              "description": "Version of the adapter that processed this payload",
              "maxLength": 16
            },
            "parameters": {
              "type": "object",
              "description": "Tracker protocol parameters"
            },
            "contentType": {
              "type": [ "string", "null" ],
              "description": "Content type of the payload as detected by the collector",
              "maxLength": 256
            },
            "loaderName": {
              "type": "string",
              "maxLength": 32
            },
            "encoding": {
              "type": "string",
              "description": "Encoding of the collector payload",
              "maxLength": 32
            },
            "hostname": {
              "type": [ "string", "null" ],
              "description": "Hostname of the payload as detected by the collector",
              "maxLength": 8192
            },
            "timestamp": {
              "type": ["string", "null"],
              "description": "Timestamp at which the payload was collected",
              "format": "date-time"
            },
            "ipAddress": {
              "type": ["string", "null"],
              "description": "IP address of the payload as detected by the collector",
              "maxLength": 128
            },
            "useragent": {
              "type": [ "string", "null" ],
              "description": "User agent of the payload as detected by the collector",
              "maxLength": 4096
            },
            "refererUri": {
              "type": [ "string", "null" ],
              "description": "Referer of the payload as detected by the collector",
              "maxLength": 8192
            },
            "headers": {
              "type": [ "array", "null" ],
              "description": "List of the headers part of this collector payload",
              "items": {
                "type": "string",
                "maxLength": 8192
              }
            },
            "userId": {
              "type": [ "string", "null" ],
              "description": "Network user id associated with this payload",
              "format": "uuid"
            }
          },
          "required": [ "vendor", "version", "loaderName", "encoding" ],
          "additionalProperties": false
        },
        "enriched": {
          "description": "The partially enriched event that resulted in schema violations",
          "properties": {
            "app_id": { "type": ["string", "null"] },
            "platform": { "type": ["string", "null"] },
            "etl_tstamp": { "type": ["string", "null"] },
            "collector_tstamp": { "type": ["string", "null"] },
            "dvce_created_tstamp": { "type": ["string", "null"] },
            "event": { "type": ["string", "null"] },
            "event_id": { "type": ["string", "null"] },
            "txn_id": { "type": ["string", "null"] },
            "name_tracker": { "type": ["string", "null"] },
            "v_tracker": { "type": ["string", "null"] },
            "v_collector": { "type": "string" },
            "v_etl": { "type": "string" },
            "user_id": { "type": ["string", "null"] },
            "user_ipaddress": { "type": ["string", "null"] },
            "user_fingerprint": { "type": ["string", "null"] },
            "domain_userid": { "type": ["string", "null"] },
            "domain_sessionidx": { "type": ["integer", "null"] },
            "network_userid": { "type": ["string", "null"] },
            "geo_country": { "type": ["string", "null"] },
            "geo_region": { "type": ["string", "null"] },
            "geo_city": { "type": ["string", "null"] },
            "geo_zipcode": { "type": ["string", "null"] },
            "geo_latitude": { "type": ["number", "null"] },
            "geo_longitude": { "type": ["number", "null"] },
            "geo_region_name": { "type": ["string", "null"] },
            "ip_isp": { "type": ["string", "null"] },
            "ip_organization": { "type": ["string", "null"] },
            "ip_domain": { "type": ["string", "null"] },
            "ip_netspeed": { "type": ["string", "null"] },
            "page_url": { "type": ["string", "null"] },
            "page_title": { "type": ["string", "null"] },
            "page_referrer": { "type": ["string", "null"] },
            "page_urlscheme": { "type": ["string", "null"] },
            "page_urlhost": { "type": ["string", "null"] },
            "page_urlport": { "type": ["integer", "null"] },
            "page_urlpath": { "type": ["string", "null"] },
            "page_urlquery": { "type": ["string", "null"] },
            "page_urlfragment": { "type": ["string", "null"] },
            "refr_urlscheme": { "type": ["string", "null"] },
            "refr_urlhost": { "type": ["string", "null"] },
            "refr_urlport": { "type": ["integer", "null"] },
            "refr_urlpath": { "type": ["string", "null"] },
            "refr_urlquery": { "type": ["string", "null"] },
            "refr_urlfragment": { "type": ["string", "null"] },
            "refr_medium": { "type": ["string", "null"] },
            "refr_source": { "type": ["string", "null"] },
            "refr_term": { "type": ["string", "null"] },
            "mkt_medium": { "type": ["string", "null"] },
            "mkt_source": { "type": ["string", "null"] },
            "mkt_term": { "type": ["string", "null"] },
            "mkt_content": { "type": ["string", "null"] },
            "mkt_campaign": { "type": ["string", "null"] },
            "contexts": { "type": ["string", "null"] },
            "se_category": { "type": ["string", "null"] },
            "se_action": { "type": ["string", "null"] },
            "se_label": { "type": ["string", "null"] },
            "se_property": { "type": ["string", "null"] },
            "se_value": { "type": ["string", "null"] },
            "unstruct_event": { "type": ["string", "null"] },
            "tr_orderid": { "type": ["string", "null"] },
            "tr_affiliation": { "type": ["string", "null"] },
            "tr_total": { "type": ["string", "null"] },
            "tr_tax": { "type": ["string", "null"] },
            "tr_shipping": { "type": ["string", "null"] },
            "tr_city": { "type": ["string", "null"] },
            "tr_state": { "type": ["string", "null"] },
            "tr_country": { "type": ["string", "null"] },
            "ti_orderid": { "type": ["string", "null"] },
            "ti_sku": { "type": ["string", "null"] },
            "ti_name": { "type": ["string", "null"] },
            "ti_category": { "type": ["string", "null"] },
            "ti_price": { "type": ["string", "null"] },
            "ti_quantity": { "type": ["integer", "null"] },
            "pp_xoffset_min": { "type": ["integer", "null"] },
            "pp_xoffset_max": { "type": ["integer", "null"] },
            "pp_yoffset_min": { "type": ["integer", "null"] },
            "pp_yoffset_max": { "type": ["integer", "null"] },
            "useragent": { "type": ["string", "null"] },
            "br_name": { "type": ["string", "null"] },
            "br_family": { "type": ["string", "null"] },
            "br_version": { "type": ["string", "null"] },
            "br_type": { "type": ["string", "null"] },
            "br_renderengine": { "type": ["string", "null"] },
            "br_lang": { "type": ["string", "null"] },
            "br_features_pdf": { "type": ["integer", "null"] },
            "br_features_flash": { "type": ["integer", "null"] },
            "br_features_java": { "type": ["integer", "null"] },
            "br_features_director": { "type": ["integer", "null"] },
            "br_features_quicktime": { "type": ["integer", "null"] },
            "br_features_realplayer": { "type": ["integer", "null"] },
            "br_features_windowsmedia": { "type": ["integer", "null"] },
            "br_features_gears": { "type": ["integer", "null"] },
            "br_features_silverlight": { "type": ["integer", "null"] },
            "br_cookies": { "type": ["integer", "null"] },
            "br_colordepth": { "type": ["string", "null"] },
            "br_viewwidth": { "type": ["integer", "null"] },
            "br_viewheight": { "type": ["integer", "null"] },
            "os_name": { "type": ["string", "null"] },
            "os_family": { "type": ["string", "null"] },
            "os_manufacturer": { "type": ["string", "null"] },
            "os_timezone": { "type": ["string", "null"] },
            "dvce_type": { "type": ["string", "null"] },
            "dvce_ismobile": { "type": ["integer", "null"] },
            "dvce_screenwidth": { "type": ["integer", "null"] },
            "dvce_screenheight": { "type": ["integer", "null"] },
            "doc_charset": { "type": ["string", "null"] },
            "doc_width": { "type": ["integer", "null"] },
            "doc_height": { "type": ["integer", "null"] },
            "tr_currency": { "type": ["string", "null"] },
            "tr_total_base": { "type": ["string", "null"] },
            "tr_tax_base": { "type": ["string", "null"] },
            "tr_shipping_base": { "type": ["string", "null"] },
            "ti_currency": { "type": ["string", "null"] },
            "ti_price_base": { "type": ["string", "null"] },
            "base_currency": { "type": ["string", "null"] },
            "geo_timezone": { "type": ["string", "null"] },
            "mkt_clickid": { "type": ["string", "null"] },
            "mkt_network": { "type": ["string", "null"] },
            "etl_tags": { "type": ["string", "null"] },
            "dvce_sent_tstamp": { "type": ["string", "null"] },
            "refr_domain_userid": { "type": ["string", "null"] },
            "refr_dvce_tstamp": { "type": ["string", "null"] },
            "derived_contexts": { "type": ["string", "null"] },
            "domain_sessionid": { "type": ["string", "null"] },
            "derived_tstamp": { "type": ["string", "null"] },
            "event_vendor": { "type": ["string", "null"] },
            "event_name": { "type": ["string", "null"] },
            "event_format": { "type": ["string", "null"] },
            "event_version": { "type": ["string", "null"] },
            "event_fingerprint": { "type": ["string", "null"] },
            "true_tstamp": { "type": ["string", "null"] }
          },
          "additionalProperties": false
        }
      }
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of schema violations",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of schema violations",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of schema violations",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/schema_violations/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a bad row resulting from schema violations",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "schema_violations",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the schema violations",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "messages": {
          "type": "array",
          "description": "List of failure messages associated with the tracker protocol violations",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "description": "String supplied for schema validation was not JSON",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "Field which ended up not being json",
                    "maxLength": 64
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Stringified representation of the value which is not json"
                  },
                  "error": {
                    "type": "string",
                    "description": "Json parsing issue"
                  }
                },
                "required": ["field", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Json supplied for schema validation was not self-describing",
                "properties": {
                  "json": {
                    "description": "Supplied JSON which was not self-describing"
                  },
                  "error": {
                    "type": "string",
                    "description": "Issue which the json which makes it not self-describing",
                    "enum": [ "INVALID_SCHEMAVER", "INVALID_IGLUURI", "INVALID_DATA_PAYLOAD", "INVALID_SCHEMA" ]
                  }
                },
                "required": [ "json", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Supplied JSON does not match the associated schema criterion",
                "properties": {
                  "schemaKey": {
                    "description": "Supplied schema key",
                    "type": "string"
                  },
                  "schemaCriterion": {
                    "type": "string",
                    "description": "The schema criterion which was not respected"
                  }
                },
                "required": [ "schemaKey", "schemaCriterion" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Supplied JSON did not validate against its schema (or schema was not found)",
                "properties": {
                  "schemaKey": {
                    "type": "string",
                    "description": "The iglu schema coordinates to validate against"
                  },
                  "error": {
                    "description": "Iglu client error",
                    "anyOf": [
                      {
                        "description": "Resolution error - schema could not be found in the specified repositories, defined by ResolutionError in the Iglu Client",
                        "properties": {
                          "error": {
                            "enum": ["ResolutionError"]
                          },
                          "lookupHistory": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "repostitory": {
                                  "type": "string",
                                  "description": "Name of the repostitory as written in resolver.json"
                                },
                                "errors": {
                                  "description": "Set of errors which happened for this repository",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "error": {
                                        "description": "Type of error (NotFound does not contain a message)",
                                        "enum": ["RepoFailure", "ClientFailure", "NotFound"]
                                      },
                                      "message": {
                                        "description": "Optional message in case of ClientFailure or RepoFailure",
                                        "type": "string",
                                        "maxLength": 256
                                      }
                                    },
                                    "required": ["error" ]
                                  }
                                },
                                "attempts": {
                                  "type": "integer",
                                  "minimum": 0,
                                  "description": "Number of attempts which have been made"
                                },
                                "lastAttempt": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp of a last attempt being made"
                                }
                              },
                              "required": ["repository", "errors", "attempts", "lastAttempt"]
                            }
                          }
                        },
                        "required": [ "error", "lookupHistory" ],
                        "additionalProperties": false
                      },
                      {
                        "description": "Data is invalid against resolved schema",
                        "properties": {
                          "error": {
                            "enum": ["ValidationError"]
                          },
                          "dataReports": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "properties": {
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable message describing the issue with the schema"
                                },
                                "path": {
                                  "type": ["string", "null"],
                                  "description": "JSON Path to an issue in the faulty JSON datum"
                                },
                                "keyword": {
                                  "type": ["string", "null"],
                                  "description": "JSON Schema Keywrod caused invalidation"
                                },
                                "targets": {
                                  "type": ["array", "null"]
                                }
                              },
                              "required": [ "path", "message", "keyword", "targets" ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [ "dataReports" ],
                        "additionalProperties": false
                      },
                      {
                        "description": "Schema is invalid and cannot be used to validate an instance",
                        "properties": {
                          "error": {
                            "enum": ["ValidationError"]
                          },
                          "schemaIssues": {
                            "description": "List of problems in resolved JSON schema",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "string",
                                  "description": "JSON Path to an issue in the faulty JSON Schema"
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable message describing the issue with the schema"
                                }
                              },
                              "required": [ "path", "message" ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [ "error" ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "required": [ "timestamp", "messages" ],
      "additionalProperties": false
    },
    "payload": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "object",
          "description": "The raw event extracted from collector payload",
          "properties": {
            "vendor": {
              "type": "string",
              "description": "Vendor of the adapter that processed this payload, here com.snowplowanalytics.snowplow",
              "maxLength": 64
            },
            "version": {
              "type": "string",
              "description": "Version of the adapter that processed this payload",
              "maxLength": 16
            },
            "parameters": {
              "type": [ "array", "null" ],
              "description": "Query string of the collector payload containing this event",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the querystring parameter",
                    "maxLength": 512
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Possible value for the querystring parameter",
                    "maxLength": 512
                  }
                },
                "required": [ "name", "value" ],
                "additionalProperties": false
              }
            },
            "contentType": {
              "type": [ "string", "null" ],
              "description": "Content type of the payload as detected by the collector",
              "maxLength": 256
            },
            "loaderName": {
              "type": "string",
              "maxLength": 32
            },
            "encoding": {
              "type": "string",
              "description": "Encoding of the collector payload",
              "maxLength": 32
            },
            "hostname": {
              "type": [ "string", "null" ],
              "description": "Hostname of the payload as detected by the collector",
              "maxLength": 8192
            },
            "timestamp": {
              "type": ["string", "null"],
              "description": "Timestamp at which the payload was collected",
              "format": "date-time"
            },
            "ipAddress": {
              "type": ["string", "null"],
              "description": "IP address of the payload as detected by the collector",
              "maxLength": 128
            },
            "useragent": {
              "type": [ "string", "null" ],
              "description": "User agent of the payload as detected by the collector",
              "maxLength": 4096
            },
            "refererUri": {
              "type": [ "string", "null" ],
              "description": "Referer of the payload as detected by the collector",
              "maxLength": 8192
            },
            "headers": {
              "type": [ "array", "null" ],
              "description": "List of the headers part of this collector payload",
              "items": {
                "type": "string",
                "maxLength": 8192
              }
            },
            "userId": {
              "type": [ "string", "null" ],
              "description": "Network user id associated with this payload",
              "format": "uuid"
            }
          },
          "required": [ "vendor", "version", "loaderName", "encoding" ],
          "additionalProperties": false
        },
        "enriched": {
          "description": "The partially enriched event that resulted in schema violations",
          "properties": {
            "app_id": { "type": ["string", "null"] },
            "platform": { "type": ["string", "null"] },
            "etl_tstamp": { "type": ["string", "null"] },
            "collector_tstamp": { "type": ["string", "null"] },
            "dvce_created_tstamp": { "type": ["string", "null"] },
            "event": { "type": ["string", "null"] },
            "event_id": { "type": ["string", "null"] },
            "txn_id": { "type": ["string", "null"] },
            "name_tracker": { "type": ["string", "null"] },
            "v_tracker": { "type": ["string", "null"] },
            "v_collector": { "type": ["string", "null"] },
            "v_etl": { "type": ["string", "null"] },
            "user_id": { "type": ["string", "null"] },
            "user_ipaddress": { "type": ["string", "null"] },
            "user_fingerprint": { "type": ["string", "null"] },
            "domain_userid": { "type": ["string", "null"] },
            "domain_sessionidx": { "type": ["integer", "null"] },
            "network_userid": { "type": ["string", "null"] },
            "geo_country": { "type": ["string", "null"] },
            "geo_region": { "type": ["string", "null"] },
            "geo_city": { "type": ["string", "null"] },
            "geo_zipcode": { "type": ["string", "null"] },
            "geo_latitude": { "type": ["number", "null"] },
            "geo_longitude": { "type": ["number", "null"] },
            "geo_region_name": { "type": ["string", "null"] },
            "ip_isp": { "type": ["string", "null"] },
            "ip_organization": { "type": ["string", "null"] },
            "ip_domain": { "type": ["string", "null"] },
            "ip_netspeed": { "type": ["string", "null"] },
            "page_url": { "type": ["string", "null"] },
            "page_title": { "type": ["string", "null"] },
            "page_referrer": { "type": ["string", "null"] },
            "page_urlscheme": { "type": ["string", "null"] },
            "page_urlhost": { "type": ["string", "null"] },
            "page_urlport": { "type": ["integer", "null"] },
            "page_urlpath": { "type": ["string", "null"] },
            "page_urlquery": { "type": ["string", "null"] },
            "page_urlfragment": { "type": ["string", "null"] },
            "refr_urlscheme": { "type": ["string", "null"] },
            "refr_urlhost": { "type": ["string", "null"] },
            "refr_urlport": { "type": ["integer", "null"] },
            "refr_urlpath": { "type": ["string", "null"] },
            "refr_urlquery": { "type": ["string", "null"] },
            "refr_urlfragment": { "type": ["string", "null"] },
            "refr_medium": { "type": ["string", "null"] },
            "refr_source": { "type": ["string", "null"] },
            "refr_term": { "type": ["string", "null"] },
            "mkt_medium": { "type": ["string", "null"] },
            "mkt_source": { "type": ["string", "null"] },
            "mkt_term": { "type": ["string", "null"] },
            "mkt_content": { "type": ["string", "null"] },
            "mkt_campaign": { "type": ["string", "null"] },
            "contexts": { "type": ["string", "null"] },
            "se_category": { "type": ["string", "null"] },
            "se_action": { "type": ["string", "null"] },
            "se_label": { "type": ["string", "null"] },
            "se_property": { "type": ["string", "null"] },
            "se_value": { "type": ["string", "null"] },
            "unstruct_event": { "type": ["string", "null"] },
            "tr_orderid": { "type": ["string", "null"] },
            "tr_affiliation": { "type": ["string", "null"] },
            "tr_total": { "type": ["string", "null"] },
            "tr_tax": { "type": ["string", "null"] },
            "tr_shipping": { "type": ["string", "null"] },
            "tr_city": { "type": ["string", "null"] },
            "tr_state": { "type": ["string", "null"] },
            "tr_country": { "type": ["string", "null"] },
            "ti_orderid": { "type": ["string", "null"] },
            "ti_sku": { "type": ["string", "null"] },
            "ti_name": { "type": ["string", "null"] },
            "ti_category": { "type": ["string", "null"] },
            "ti_price": { "type": ["string", "null"] },
            "ti_quantity": { "type": ["integer", "null"] },
            "pp_xoffset_min": { "type": ["integer", "null"] },
            "pp_xoffset_max": { "type": ["integer", "null"] },
            "pp_yoffset_min": { "type": ["integer", "null"] },
            "pp_yoffset_max": { "type": ["integer", "null"] },
            "useragent": { "type": ["string", "null"] },
            "br_name": { "type": ["string", "null"] },
            "br_family": { "type": ["string", "null"] },
            "br_version": { "type": ["string", "null"] },
            "br_type": { "type": ["string", "null"] },
            "br_renderengine": { "type": ["string", "null"] },
            "br_lang": { "type": ["string", "null"] },
            "br_features_pdf": { "type": ["integer", "null"] },
            "br_features_flash": { "type": ["integer", "null"] },
            "br_features_java": { "type": ["integer", "null"] },
            "br_features_director": { "type": ["integer", "null"] },
            "br_features_quicktime": { "type": ["integer", "null"] },
            "br_features_realplayer": { "type": ["integer", "null"] },
            "br_features_windowsmedia": { "type": ["integer", "null"] },
            "br_features_gears": { "type": ["integer", "null"] },
            "br_features_silverlight": { "type": ["integer", "null"] },
            "br_cookies": { "type": ["integer", "null"] },
            "br_colordepth": { "type": ["string", "null"] },
            "br_viewwidth": { "type": ["integer", "null"] },
            "br_viewheight": { "type": ["integer", "null"] },
            "os_name": { "type": ["string", "null"] },
            "os_family": { "type": ["string", "null"] },
            "os_manufacturer": { "type": ["string", "null"] },
            "os_timezone": { "type": ["string", "null"] },
            "dvce_type": { "type": ["string", "null"] },
            "dvce_ismobile": { "type": ["integer", "null"] },
            "dvce_screenwidth": { "type": ["integer", "null"] },
            "dvce_screenheight": { "type": ["integer", "null"] },
            "doc_charset": { "type": ["string", "null"] },
            "doc_width": { "type": ["integer", "null"] },
            "doc_height": { "type": ["integer", "null"] },
            "tr_currency": { "type": ["string", "null"] },
            "tr_total_base": { "type": ["string", "null"] },
            "tr_tax_base": { "type": ["string", "null"] },
            "tr_shipping_base": { "type": ["string", "null"] },
            "ti_currency": { "type": ["string", "null"] },
            "ti_price_base": { "type": ["string", "null"] },
            "base_currency": { "type": ["string", "null"] },
            "geo_timezone": { "type": ["string", "null"] },
            "mkt_clickid": { "type": ["string", "null"] },
            "mkt_network": { "type": ["string", "null"] },
            "etl_tags": { "type": ["string", "null"] },
            "dvce_sent_tstamp": { "type": ["string", "null"] },
            "refr_domain_userid": { "type": ["string", "null"] },
            "refr_dvce_tstamp": { "type": ["string", "null"] },
            "derived_contexts": { "type": ["string", "null"] },
            "domain_sessionid": { "type": ["string", "null"] },
            "derived_tstamp": { "type": ["string", "null"] },
            "event_vendor": { "type": ["string", "null"] },
            "event_name": { "type": ["string", "null"] },
            "event_format": { "type": ["string", "null"] },
            "event_version": { "type": ["string", "null"] },
            "event_fingerprint": { "type": ["string", "null"] },
            "true_tstamp": { "type": ["string", "null"] }
          },
          "additionalProperties": false
        }
      }
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of schema violations",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of schema violations",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of schema violations",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/recovery_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for errors reported by Snowplow Event Recovery",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "recovery_error",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "payload": {
      "type": "object",
      "properties": {
        "schema": {
          "type": "string",
          "enum": [
            "iglu:com.snowplowanalytics.snowplow.badrows/adapter_failures/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/collector_payload_format_violation/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/enrichment_failures/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/enrichment_failures/jsonschema/2-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/loader_iglu_error/jsonschema/2-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/loader_parsing_error/jsonschema/2-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/loader_recovery_error/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/loader_runtime_error/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/loader_runtime_error/jsonschema/1-0-1",
            "iglu:com.snowplowanalytics.snowplow.badrows/relay_failure/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/schema_violations/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/schema_violations/jsonschema/2-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/size_violation/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/snowflake_error/jsonschema/1-0-0",
            "iglu:com.snowplowanalytics.snowplow.badrows/tracker_protocol_violations/jsonschema/1-0-0"
          ],
          "description": "Original bad row schema"
        },
        "data": {
          "type": "object",
          "properties": {
            "processor": {
              "type": "object",
              "description": "Original application that the bad row comes from"
            },
            "failure": {
              "type": [
                "object",
                "array",
                "string"
              ],
              "description": "Original failure reason(s)"
            },
            "payload": {
              "type": [
                "object",
                "string"
              ],
              "description": "Original payload object, can be a full payload object or a raw payload string"
            }
          },
          "required": [
            "processor",
            "failure"
          ],
          "description": "Original bad row contents"
        }
      },
      "required": [
        "schema",
        "data"
      ],
      "description": "Original bad row"
    },
    "recoveries": {
      "type": "integer",
      "description": "Number of times payload recovery has been tried"
    },
    "failure": {
      "description": "A reason why payload could not be recovered",
      "properties": {
        "error": {
          "description": "Human-readable error",
          "type": "string"
        },
        "configName": {
          "description": "Name of recovery configuration that failed",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "error"
      ]
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [
        "artifact",
        "version"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "payload",
    "failure",
    "processor"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/generic_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Generic, very unstructured bad row that can be emitted by any Snowplow component",
    "self": {
      "vendor": "com.snowplowanalytics.snowplow.badrows",
      "name": "generic_error",
      "format": "jsonschema",
      "version": "1-0-0"
    },
    "type": "object",
    "properties": {
      "processor": {
        "type": "object",
        "description": "Information about the piece of software responsible for the creation of the bad row",
        "properties": {
          "artifact": {
            "type": "string",
            "description": "Artifact responsible for the creation of the bad row",
            "maxLength": 512
          },
          "version": {
            "type": "string",
            "description": "Version of the artifact responsible for the creation of the bad row",
            "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
            "maxLength": 32
          }
        },
        "required": [ "artifact", "version" ],
        "additionalProperties": false
      },
      "payload": {
        "type": "string",
        "description": "The stringified event for which there is a bad row"
      },
      "failure": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp at which the failure occurred",
            "format": "date-time"
          },
          "errors": {
            "type": "array",
            "description": "Information about the issue",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [ "timestamp", "errors" ],
        "additionalProperties": false
      }
    },
    "required": [ "processor", "payload", "failure" ],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/adapter_failures/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a bad row resulting from adapter failures",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "adapter_failures",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "object",
      "description": "Information regarding the adapter violations",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "Timestamp at which the failure occurred",
          "format": "date-time"
        },
        "vendor": {
          "type": "string",
          "description": "Vendor of the adapter that processed this payload",
          "maxLength": 64
        },
        "version": {
          "type": "string",
          "description": "Version of the adapter that processed this payload",
          "maxLength": 16
        },
        "messages": {
          "type": "array",
          "description": "List of failure messages associated with the adapter failures",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "description": "Error which was internal to the adapter regarding its input data",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "Field which did not meet the adapter's expectations",
                    "maxLength": 64
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Stringified representation of the value which did not meet expectations"
                  },
                  "expectation": {
                    "type": "string",
                    "description": "Expectation which was not met",
                    "maxLength": 256
                  }
                },
                "required": ["field", "value", "expectation" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "String supplied for schema validation was not json",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "Field which ended up not being json",
                    "maxLength": 64
                  },
                  "value": {
                    "type": [ "string", "null" ],
                    "description": "Stringified representation of the value which is not json"
                  },
                  "error": {
                    "type": "string",
                    "description": "Json parsing issue"
                  }
                },
                "required": ["field", "value", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Json supplied for schema validation was not self-describing",
                "properties": {
                  "json": {
                    "description": "Supplied json which was not self-describing (can be any JSON value)"
                  },
                  "error": {
                    "type": "string",
                    "description": "Issue which the json which makes it not self-describing",
                    "enum": [ "INVALID_SCHEMAVER", "INVALID_IGLUURI", "INVALID_DATA_PAYLOAD", "INVALID_SCHEMA" ]
                  }
                },
                "required": [ "json", "error" ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "Could not map the adapter vendor event type to an Iglu schema",
                "properties": {
                  "actual": {
                    "type": [ "string", "null" ],
                    "description": "The actual event type as determined by the adapter's logic",
                    "maxLength": 256
                  },
                  "expectedMapping": {
                    "type": "object",
                    "description": "The possible mappings between adapter vendor event types and Iglu schemas",
                    "additionalProperties": { "type": "string" }
                  },
                  "expectation": {
                    "type": "string",
                    "description": "Expectation regarding the mapping which was not met",
                    "maxLength": 256
                  }
                },
                "required": [ "actual", "expectedMapping", "expectation" ],
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "required": [ "timestamp", "vendor", "version", "messages" ],
      "additionalProperties": false
    },
    "payload": {
      "type": "object",
      "description": "The collector payload that resulted in adapter failures",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Vendor of the adapter that processed this payload",
          "maxLength": 64
        },
        "version": {
          "type": "string",
          "description": "Version of the adapter that processed this payload",
          "maxLength": 16
        },
        "querystring": {
          "type": [ "array", "null" ],
          "description": "Query string of this collector payload",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the querystring parameter",
                "maxLength": 512
              },
              "value": {
                "type": [ "string", "null" ],
                "description": "Possible value for the querystring parameter",
                "maxLength": 512
              }
            },
            "required": [ "name", "value" ],
            "additionalProperties": false
          }
        },
        "contentType": {
          "type": [ "string", "null" ],
          "description": "Content type of the payload as detected by the collector",
          "maxLength": 256
        },
        "body": {
          "type": [ "string", "null" ],
          "description": "Body of this collector payload"
        },
        "collector": {
          "type": "string",
          "description": "Collector which produced this collector payload",
          "maxLength": 32
        },
        "encoding": {
          "type": "string",
          "description": "Encoding of the collector payload",
          "maxLength": 32
        },
        "hostname": {
          "type": [ "string", "null" ],
          "description": "Hostname of the payload as detected by the collector",
          "maxLength": 8192
        },
        "timestamp": {
          "type": ["string", "null"],
          "description": "Timestamp at which the payload was collected",
          "format": "date-time"
        },
        "ipAddress": {
          "type": ["string", "null"],
          "description": "IP address of the payload as detected by the collector",
          "maxLength": 128
        },
        "useragent": {
          "type": [ "string", "null" ],
          "description": "User agent of the payload as detected by the collector",
          "maxLength": 4096
        },
        "refererUri": {
          "type": [ "string", "null" ],
          "description": "Referer of the payload as detected by the collector",
          "maxLength": 8192
        },
        "headers": {
          "type": [ "array", "null" ],
          "description": "List of the headers part of this collector payload",
          "items": {
            "type": "string",
            "maxLength": 8192
          }
        },
        "networkUserId": {
          "type": [ "string", "null" ],
          "description": "Network user id associated with this payload",
          "format": "uuid"
        }
      },
      "required": [ "vendor", "version", "collector", "encoding" ],
      "additionalProperties": false
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of adapter failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of adapter failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of adapter failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": [ "failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/relay_failure/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a bad row resulting from a relay failure",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.badrows",
        "name": "relay_failure",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "failure": {
            "type": "object",
            "description": "Information regarding the relay failure",
            "properties": {
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp at which the failure occurred",
                    "format": "date-time"
                },
                "message": {
                    "type": "object",
                    "description": "Details of failure",
                    "properties": {
                        "messageText": {
                            "type": "string",
                            "description": "String describing the location the error was intercepted"
                        },
                        "stackTrace": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Stack trace if available"
                        }
                    },
                    "required": [
                        "messageText"
                    ],
                    "additionalProperties": false
                }
            }
        },
        "payload": {
            "type": "object",
            "description": "The enriched event that is associated with this relay failure",
            "properties": {
                "eventStruct": {
                    "type": "object",
                    "description": "The event fields",
                    "properties": {
                        "app_id": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "platform": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "etl_tstamp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "collector_tstamp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "dvce_created_tstamp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "event": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "event_id": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "txn_id": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "name_tracker": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "v_tracker": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "v_collector": {
                            "type": "string"
                        },
                        "v_etl": {
                            "type": "string"
                        },
                        "user_id": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "user_ipaddress": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "user_fingerprint": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "domain_userid": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "domain_sessionidx": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "network_userid": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "geo_country": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "geo_region": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "geo_city": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "geo_zipcode": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "geo_latitude": {
                            "type": [
                                "number",
                                "null"
                            ]
                        },
                        "geo_longitude": {
                            "type": [
                                "number",
                                "null"
                            ]
                        },
                        "geo_region_name": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ip_isp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ip_organization": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ip_domain": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ip_netspeed": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_url": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_title": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_referrer": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_urlscheme": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_urlhost": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_urlport": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "page_urlpath": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_urlquery": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "page_urlfragment": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_urlscheme": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_urlhost": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_urlport": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "refr_urlpath": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_urlquery": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_urlfragment": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_medium": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_source": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_term": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "mkt_medium": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "mkt_source": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "mkt_term": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "mkt_content": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "mkt_campaign": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "contexts": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "se_category": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "se_action": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "se_label": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "se_property": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "se_value": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "unstruct_event": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_orderid": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_affiliation": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_total": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_tax": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_shipping": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_city": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_state": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_country": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_orderid": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_sku": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_name": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_category": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_price": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_quantity": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "pp_xoffset_min": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "pp_xoffset_max": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "pp_yoffset_min": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "pp_yoffset_max": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "useragent": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_name": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_family": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_version": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_type": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_renderengine": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_lang": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_features_pdf": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_flash": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_java": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_director": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_quicktime": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_realplayer": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_windowsmedia": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_gears": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_features_silverlight": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_cookies": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_colordepth": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "br_viewwidth": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "br_viewheight": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "os_name": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "os_family": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "os_manufacturer": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "os_timezone": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "dvce_type": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "dvce_ismobile": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "dvce_screenwidth": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "dvce_screenheight": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "doc_charset": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "doc_width": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "doc_height": {
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "tr_currency": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_total_base": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_tax_base": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "tr_shipping_base": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_currency": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "ti_price_base": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "base_currency": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "geo_timezone": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "mkt_clickid": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "mkt_network": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "etl_tags": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "dvce_sent_tstamp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_domain_userid": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "refr_dvce_tstamp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "derived_contexts": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "domain_sessionid": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "derived_tstamp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "event_vendor": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "event_name": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "event_format": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "event_version": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "event_fingerprint": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "true_tstamp": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    }
                },
                "eventRaw": {
                    "type": "string",
                    "description": "The raw event that was associated with teh failure"
                }
            },
            "oneOf": [
                {
                    "required": [
                        "eventStruct"
                    ]
                },
                {
                    "required": [
                        "eventRaw"
                    ]
                }
            ],
            "additionalProperties": false
        },
        "processor": {
            "type": "object",
            "description": "Information about the relay responsible for the creation of the current relay failure",
            "properties": {
                "artifact": {
                    "type": "string",
                    "description": "Artifact responsible for the creation of the current relay failure",
                    "maxLength": 512
                },
                "version": {
                    "type": "string",
                    "description": "Version of the artifact responsible for the creation of the current relay failure",
                    "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
                    "maxLength": 32
                }
            },
            "required": [
                "artifact",
                "version"
            ],
            "additionalProperties": false
        }
    },
    "required": [
        "failure",
        "payload",
        "processor"
    ],
    "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/loader_parsing_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for storage loader errors with unknown data, e.g. invalid enriched event",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "loader_parsing_error",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "payload": {
      "type": "string",
      "description": "Data blob which was not recognized as an enriched event by the storage loader"
    },
    "errors": {
      "type": "array",
      "description": "Errors that happened when not recognizing the event as an enriched event",
      "items": {
        "type": "string"
      }
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": ["payload", "errors", "processor"],
  "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/loader_parsing_error/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for storage loader errors with unknown data, e.g. invalid enriched event",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "loader_parsing_error",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "properties": {
    "payload": {
      "type": "string",
      "description": "Data blob which was not recognized as an enriched event by the storage loader"
    },
    "failure": {
      "type": "object",
      "description": "Errors that happened when not recognizing the event as an enriched event, provided by Analytics SDK",
      "oneOf": [
        {
          "properties": {
            "type": {
              "enum": ["NotTSV"]
            }
          },
          "required": ["type"]
        },

        {
          "properties": {
            "type": {
              "enum": ["FieldNumberMismatch"]
            },
            "fieldCount": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1024
            }
          },
          "required": ["type", "fieldCount"]
        },

        {
          "properties": {
            "type": {
              "enum": ["RowDecodingError"]
            },
            "errors": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "properties": {
                      "type": {
                        "enum": ["InvalidValue"]
                      },
                      "key": {
                        "type": "string",
                        "maxLength": 32
                      },
                      "value": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": ["type", "key", "value", "message"],
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "type": {
                        "enum": ["UnhandledRowDecodingError"]
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": ["type", "message"],
                    "additionalProperties": false
                  }
                ]
              },
              "minItems": 1
            }
          },
          "required": ["type", "errors"]
        }
      ]
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": ["payload", "failure", "processor"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/loader_iglu_error/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for Iglu related errors which could be during validation or schema lookup",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "loader_iglu_error",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "errors": {
      "type": "array",
      "description": "List of errors taken during a validation or schema lookup with Iglu",
      "items": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string",
            "description": "Key of the schema which is tried to be fetched",
            "pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[1-9]+-[0-9]+-[0-9]+$"
          },
          "error": {
            "anyOf": [
              {
                "description": "Problem during schema resolution, missing schema or internal error",
                "properties": {
                  "error": {
                    "enum": ["ResolutionError"]
                  },
                  "lookupHistory": {
                    "description": "Set of all traversed repositories with their failures",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "repository": {
                          "description": "Repository name from resolver config",
                          "type": "string"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "properties": {
                              "error": {
                                "enum": ["ClientFailure", "RepoFailure", "NotFound"]
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": ["error"]
                          }
                        },
                        "attempts": {
                          "description": "Number of attempts this repository has been queried",
                          "type": "integer",
                          "minimum": 0
                        },
                        "lastAttempt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "required": ["repository", "errors", "attempts", "lastAttempt"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": ["error", "lookupHistory"],
                "additionalProperties": false
              },
              {
                "description": "Data is invalid against its schema",
                "properties": {
                  "error": {
                      "enum": ["ValidationError"]
                  },
                  "dataReports": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "description": "List of reports",
                      "properties": {
                        "message": {
                          "description": "Human-readable error message",
                          "type": "string"
                        },
                        "path": {
                          "description": "JSON Path to problematic property in instance",
                          "type": ["string", "null"]
                        },
                        "keyword": {
                          "description": "JSON Schema keyword caused this report",
                          "type": ["string", "null"]
                        },
                        "targets": {
                          "description": "List of properties affected in instance",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": ["message", "path", "keyword", "targets"],
                      "additionalProperties": false
                    }
                  }
                }
              }
            ]
          }
        },
        "required": ["schema", "error"],
        "additionalProperties": false
      }
    },
    "event": {
      "type": "object",
      "description": "The enriched event that resulted in a storage loader failure",
      "properties": {
        "app_id": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "platform": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "etl_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "collector_tstamp": {
          "type": "string",
          "format": "date-time"
        },
        "dvce_created_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "event": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_id": {
          "type": "string",
          "maxLength": 36
        },
        "txn_id": {
          "type": ["integer", "null"]
        },
        "name_tracker": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "v_tracker": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "v_collector": {
          "type": "string",
          "maxLength": 100
        },
        "v_etl": {
          "type": "string",
          "maxLength": 100
        },
        "user_id": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "user_ipaddress": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "user_fingerprint": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "domain_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "domain_sessionidx": {
          "type": ["integer", "null"]
        },
        "network_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "geo_country": {
          "type": ["string", "null"],
          "maxLength": 2
        },
        "geo_region": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "geo_city": {
          "type": ["string", "null"],
          "maxLength": 75
        },
        "geo_zipcode": {
          "type": ["string", "null"],
          "maxLength": 15
        },
        "geo_latitude": {
          "type": ["number", "null"]
        },
        "geo_longitude": {
          "type": ["number", "null"]
        },
        "geo_region_name": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "ip_isp": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "ip_organization": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "ip_domain": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "ip_netspeed": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "page_url": {
          "type": ["string", "null"],
          "maxLength": 4096
        },
        "page_title": {
          "type": ["string", "null"],
          "maxLength": 2000
        },
        "page_referrer": {
          "type": ["string", "null"],
          "maxLength": 4096
        },
        "page_urlscheme": {
          "type": ["string", "null"],
          "maxLength": 16
        },
        "page_urlhost": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "page_urlport": {
          "type": ["integer", "null"]
        },
        "page_urlpath": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "page_urlquery": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "page_urlfragment": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "refr_urlscheme": {
          "type": ["string", "null"],
          "maxLength": 16
        },
        "refr_urlhost": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "refr_urlport": {
          "type": ["integer", "null"]
        },
        "refr_urlpath": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "refr_urlquery": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "refr_urlfragment": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "refr_medium": {
          "type": ["string", "null"],
          "maxLength": 25
        },
        "refr_source": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "refr_term": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_medium": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_source": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_term": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_content": {
          "type": ["string", "null"],
          "maxLength": 500
        },
        "mkt_campaign": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "se_category": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_action": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_label": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_property": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_value": {
          "type": ["number", "null"]
        },
        "tr_orderid": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_affiliation": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_total": {
          "type": ["number", "null"]
        },
        "tr_tax": {
          "type": ["number", "null"]
        },
        "tr_shipping": {
          "type": ["number", "null"]
        },
        "tr_city": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_state": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_country": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_orderid": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_sku": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_name": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_category": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_price": {
          "type": ["number", "null"]
        },
        "ti_quantity": {
          "type": ["integer", "null"]
        },
        "pp_xoffset_min": {
          "type": ["integer", "null"]
        },
        "pp_xoffset_max": {
          "type": ["integer", "null"]
        },
        "pp_yoffset_min": {
          "type": ["integer", "null"]
        },
        "pp_yoffset_max": {
          "type": ["integer", "null"]
        },
        "useragent": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "br_name": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_family": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_version": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_type": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_renderengine": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_lang": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "br_features_pdf": {
          "type": ["boolean", "null"]
        },
        "br_features_flash": {
          "type": ["boolean", "null"]
        },
        "br_features_java": {
          "type": ["boolean", "null"]
        },
        "br_features_director": {
          "type": ["boolean", "null"]
        },
        "br_features_quicktime": {
          "type": ["boolean", "null"]
        },
        "br_features_realplayer": {
          "type": ["boolean", "null"]
        },
        "br_features_windowsmedia": {
          "type": ["boolean", "null"]
        },
        "br_features_gears": {
          "type": ["boolean", "null"]
        },
        "br_features_silverlight": {
          "type": ["boolean", "null"]
        },
        "br_cookies": {
          "type": ["boolean", "null"]
        },
        "br_colordepth": {
          "type": ["string", "null"],
          "maxLength": 12
        },
        "br_viewwidth": {
          "type": ["integer", "null"]
        },
        "br_viewheight": {
          "type": ["integer", "null"]
        },
        "os_name": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_family": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_manufacturer": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_timezone": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "dvce_type": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "dvce_ismobile": {
          "type": ["boolean", "null"]
        },
        "dvce_screenwidth": {
          "type": ["integer", "null"]
        },
        "dvce_screenheight": {
          "type": ["integer", "null"]
        },
        "doc_charset": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "doc_width": {
          "type": ["integer", "null"]
        },
        "doc_height": {
          "type": ["integer", "null"]
        },
        "tr_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "tr_total_base": {
          "type": ["number", "null"]
        },
        "tr_tax_base": {
          "type": ["number", "null"]
        },
        "tr_shipping_base": {
          "type": ["number", "null"]
        },
        "ti_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "ti_price_base": {
          "type": ["number", "null"]
        },
        "base_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "geo_timezone": {
          "type": ["string", "null"],
          "maxLength": 64
        },
        "mkt_clickid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "mkt_network": {
          "type": ["string", "null"],
          "maxLength": 64
        },
        "etl_tags": {
          "type": ["string", "null"],
          "maxLength": 500
        },
        "dvce_sent_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "refr_domain_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "refr_dvce_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "domain_sessionid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "derived_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "event_vendor": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "event_name": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "event_format": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_version": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_fingerprint": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "true_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "unstruct_event": { "type": ["object", "null"] },
        "contexts": { "type": ["object", "null" ]},
        "derived_contexts": { "type": ["object", "null" ]}
      },
      "additionalProperties": false
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": ["errors", "event"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.badrows/loader_iglu_error/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for Iglu related errors which could be during validation or schema lookup",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.badrows",
    "name": "loader_iglu_error",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "properties": {
    "failure": {
      "type": "array",
      "description": "List of failure messages caused by Iglu subsystem",
      "items": {
        "anyOf": [
          {
            "type": "object",
            "description": "Supplied JSON did not validate against its schema (or schema was not found) (IgluError)",
            "properties": {
              "schemaKey": {
                "type": "string",
                "description": "The iglu schema coordinates to validate against"
              },
              "error": {
                "description": "Iglu client error",
                "anyOf": [
                  {
                    "description": "Resolution error - schema could not be found in the specified repositories, defined by ResolutionError in the Iglu Client",
                    "properties": {
                      "error": {
                        "enum": ["ResolutionError"]
                      },
                      "lookupHistory": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "properties": {
                            "repostitory": {
                              "type": "string",
                              "description": "Name of the repostitory as written in resolver.json"
                            },
                            "errors": {
                              "description": "Set of errors which happened for this repository",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "error": {
                                    "description": "Type of error (NotFound does not contain a message)",
                                    "enum": ["RepoFailure", "ClientFailure", "NotFound"]
                                  },
                                  "message": {
                                    "description": "Optional message in case of ClientFailure or RepoFailure",
                                    "type": "string",
                                    "maxLength": 256
                                  }
                                },
                                "required": ["error" ]
                              }
                            },
                            "attempts": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Number of attempts which have been made"
                            },
                            "lastAttempt": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp of a last attempt being made"
                            }
                          },
                          "required": ["repository", "errors", "attempts", "lastAttempt"]
                        }
                      }
                    },
                    "required": [ "error", "lookupHistory" ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Data is invalid against resolved schema",
                    "properties": {
                      "error": {
                        "enum": ["ValidationError"]
                      },
                      "dataReports": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "properties": {
                            "message": {
                              "type": "string",
                              "description": "Human-readable message describing the issue with the schema"
                            },
                            "path": {
                              "type": ["string", "null"],
                              "description": "JSON Path to an issue in the faulty JSON datum"
                            },
                            "keyword": {
                              "type": ["string", "null"],
                              "description": "JSON Schema Keywrod caused invalidation"
                            },
                            "targets": {
                              "type": ["array", "null"]
                            }
                          },
                          "required": [ "path", "message", "keyword", "targets" ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [ "dataReports" ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Schema is invalid and cannot be used to validate an instance",
                    "properties": {
                      "error": {
                        "enum": ["ValidationError"]
                      },
                      "schemaIssues": {
                        "description": "List of problems in resolved JSON schema",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "JSON Path to an issue in the faulty JSON Schema"
                            },
                            "message": {
                              "type": "string",
                              "description": "Human-readable message describing the issue with the schema"
                            }
                          },
                          "required": [ "path", "message" ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [ "error" ],
                    "additionalProperties": false
                  }
                ]
              }
            },
            "additionalProperties": false
          },

          {
            "type": "object",
            "description": "JSON returned from a registry couldn't be parsed as a JSON Schema AST (InvalidSchema)",
            "properties": {
              "schemaKey": {
                "description": "Requested schema key",
                "type": "string"
              },
              "message": {
                "description": "Human-readable message",
                "type": "string"
              }
            },
            "required": ["schemaKey", "message" ],
            "additionalProperties": false
          },

          {
            "type": "object",
            "description": "Resolver couldn't resolve a SchemaList (entity for shredding and migration) (SchemaListNotFound)",
            "properties": {
              "schemaCriterion": {
                "type": "string",
                "description": "Criterion of a list (model-based)"
              },
              "error": {
                "description": "Iglu client error",
                "anyOf": [
                  {
                    "description": "Resolution error - schema could not be found in the specified repositories, defined by ResolutionError in the Iglu Client",
                    "properties": {
                      "error": {
                        "enum": ["ResolutionError"]
                      },
                      "lookupHistory": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "properties": {
                            "repostitory": {
                              "type": "string",
                              "description": "Name of the repostitory as written in resolver.json"
                            },
                            "errors": {
                              "description": "Set of errors which happened for this repository",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "error": {
                                    "description": "Type of error (NotFound does not contain a message)",
                                    "enum": ["RepoFailure", "ClientFailure", "NotFound"]
                                  },
                                  "message": {
                                    "description": "Optional message in case of ClientFailure or RepoFailure",
                                    "type": "string",
                                    "maxLength": 256
                                  }
                                },
                                "required": ["error" ]
                              }
                            },
                            "attempts": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Number of attempts which have been made"
                            },
                            "lastAttempt": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp of a last attempt being made"
                            }
                          },
                          "required": ["repository", "errors", "attempts", "lastAttempt"]
                        }
                      }
                    },
                    "required": [ "error", "lookupHistory" ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Data is invalid against resolved schema",
                    "properties": {
                      "error": {
                        "enum": ["ValidationError"]
                      },
                      "dataReports": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "properties": {
                            "message": {
                              "type": "string",
                              "description": "Human-readable message describing the issue with the schema"
                            },
                            "path": {
                              "type": ["string", "null"],
                              "description": "JSON Path to an issue in the faulty JSON datum"
                            },
                            "keyword": {
                              "type": ["string", "null"],
                              "description": "JSON Schema Keywrod caused invalidation"
                            },
                            "targets": {
                              "type": ["array", "null"]
                            }
                          },
                          "required": [ "path", "message", "keyword", "targets" ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [ "dataReports" ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Schema is invalid and cannot be used to validate an instance",
                    "properties": {
                      "error": {
                        "enum": ["ValidationError"]
                      },
                      "schemaIssues": {
                        "description": "List of problems in resolved JSON schema",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "JSON Path to an issue in the faulty JSON Schema"
                            },
                            "message": {
                              "type": "string",
                              "description": "Human-readable message describing the issue with the schema"
                            }
                          },
                          "required": [ "path", "message" ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [ "error" ],
                    "additionalProperties": false
                  }
                ]
              }
            },
            "required": ["schemaCriterion", "error" ],
            "additionalProperties": false
          },

          {
            "type": "object",
            "description": "JSON type mismatch against schema (WrongType)",
            "properties": {
              "schemaKey": {
                "description": "Supplied schema key",
                "type": "string"
              },
              "value": {
                "description": "Supplied JSON value"
              },
              "expected": {
                "type": "string",
                "description": "Expected type (either machine or human-readable)"
              }
            },
            "required": [ "schemaKey", "value", "expected" ],
            "additionalProperties": false
          },

          {
            "type": "object",
            "description": "Value expected to be repeatable (NotAnArray)",
            "properties": {
              "schemaKey": {
                "description": "Supplied schema key",
                "type": "string"
              },
              "value": {
                "description": "Supplied JSON value"
              },
              "expected": {
                "type": "string",
                "description": "Expected type (either machine or human-readable)"
              }
            },
            "required": [ "schemaKey", "value", "expected" ],
            "additionalProperties": false
          },

          {
            "type": "object",
            "description": "Key is required by schema, but missing in a value (MissingInValue)",
            "properties": {
              "schemaKey": {
                "description": "Supplied schema key",
                "type": "string"
              },
              "key": {
                "description": "Expected key"
              },
              "value": {
                "description": "Provided JSON value"
              }
            },
            "required": [ "schemaKey", "key", "value" ],
            "additionalProperties": false
          }
        ]
      }
    },
    "payload": {
      "type": "object",
      "description": "The enriched event that resulted in a storage loader failure",
      "properties": {
        "app_id": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "platform": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "etl_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "collector_tstamp": {
          "type": "string",
          "format": "date-time"
        },
        "dvce_created_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "event": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_id": {
          "type": "string",
          "maxLength": 36
        },
        "txn_id": {
          "type": ["integer", "null"]
        },
        "name_tracker": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "v_tracker": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "v_collector": {
          "type": "string",
          "maxLength": 100
        },
        "v_etl": {
          "type": "string",
          "maxLength": 100
        },
        "user_id": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "user_ipaddress": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "user_fingerprint": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "domain_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "domain_sessionidx": {
          "type": ["integer", "null"]
        },
        "network_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "geo_country": {
          "type": ["string", "null"],
          "maxLength": 2
        },
        "geo_region": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "geo_city": {
          "type": ["string", "null"],
          "maxLength": 75
        },
        "geo_zipcode": {
          "type": ["string", "null"],
          "maxLength": 15
        },
        "geo_latitude": {
          "type": ["number", "null"]
        },
        "geo_longitude": {
          "type": ["number", "null"]
        },
        "geo_region_name": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "ip_isp": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "ip_organization": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "ip_domain": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "ip_netspeed": {
          "type": ["string", "null"],
          "maxLength": 100
        },
        "page_url": {
          "type": ["string", "null"],
          "maxLength": 4096
        },
        "page_title": {
          "type": ["string", "null"],
          "maxLength": 2000
        },
        "page_referrer": {
          "type": ["string", "null"],
          "maxLength": 4096
        },
        "page_urlscheme": {
          "type": ["string", "null"],
          "maxLength": 16
        },
        "page_urlhost": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "page_urlport": {
          "type": ["integer", "null"]
        },
        "page_urlpath": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "page_urlquery": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "page_urlfragment": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "refr_urlscheme": {
          "type": ["string", "null"],
          "maxLength": 16
        },
        "refr_urlhost": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "refr_urlport": {
          "type": ["integer", "null"]
        },
        "refr_urlpath": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "refr_urlquery": {
          "type": ["string", "null"],
          "maxLength": 6000
        },
        "refr_urlfragment": {
          "type": ["string", "null"],
          "maxLength": 3000
        },
        "refr_medium": {
          "type": ["string", "null"],
          "maxLength": 25
        },
        "refr_source": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "refr_term": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_medium": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_source": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_term": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "mkt_content": {
          "type": ["string", "null"],
          "maxLength": 500
        },
        "mkt_campaign": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "se_category": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_action": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_label": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_property": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "se_value": {
          "type": ["number", "null"]
        },
        "tr_orderid": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_affiliation": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_total": {
          "type": ["number", "null"]
        },
        "tr_tax": {
          "type": ["number", "null"]
        },
        "tr_shipping": {
          "type": ["number", "null"]
        },
        "tr_city": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_state": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "tr_country": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_orderid": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_sku": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_name": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_category": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "ti_price": {
          "type": ["number", "null"]
        },
        "ti_quantity": {
          "type": ["integer", "null"]
        },
        "pp_xoffset_min": {
          "type": ["integer", "null"]
        },
        "pp_xoffset_max": {
          "type": ["integer", "null"]
        },
        "pp_yoffset_min": {
          "type": ["integer", "null"]
        },
        "pp_yoffset_max": {
          "type": ["integer", "null"]
        },
        "useragent": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "br_name": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_family": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_version": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_type": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_renderengine": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "br_lang": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "br_features_pdf": {
          "type": ["boolean", "null"]
        },
        "br_features_flash": {
          "type": ["boolean", "null"]
        },
        "br_features_java": {
          "type": ["boolean", "null"]
        },
        "br_features_director": {
          "type": ["boolean", "null"]
        },
        "br_features_quicktime": {
          "type": ["boolean", "null"]
        },
        "br_features_realplayer": {
          "type": ["boolean", "null"]
        },
        "br_features_windowsmedia": {
          "type": ["boolean", "null"]
        },
        "br_features_gears": {
          "type": ["boolean", "null"]
        },
        "br_features_silverlight": {
          "type": ["boolean", "null"]
        },
        "br_cookies": {
          "type": ["boolean", "null"]
        },
        "br_colordepth": {
          "type": ["string", "null"],
          "maxLength": 12
        },
        "br_viewwidth": {
          "type": ["integer", "null"]
        },
        "br_viewheight": {
          "type": ["integer", "null"]
        },
        "os_name": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_family": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_manufacturer": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "os_timezone": {
          "type": ["string", "null"],
          "maxLength": 255
        },
        "dvce_type": {
          "type": ["string", "null"],
          "maxLength": 50
        },
        "dvce_ismobile": {
          "type": ["boolean", "null"]
        },
        "dvce_screenwidth": {
          "type": ["integer", "null"]
        },
        "dvce_screenheight": {
          "type": ["integer", "null"]
        },
        "doc_charset": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "doc_width": {
          "type": ["integer", "null"]
        },
        "doc_height": {
          "type": ["integer", "null"]
        },
        "tr_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "tr_total_base": {
          "type": ["number", "null"]
        },
        "tr_tax_base": {
          "type": ["number", "null"]
        },
        "tr_shipping_base": {
          "type": ["number", "null"]
        },
        "ti_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "ti_price_base": {
          "type": ["number", "null"]
        },
        "base_currency": {
          "type": ["string", "null"],
          "maxLength": 3
        },
        "geo_timezone": {
          "type": ["string", "null"],
          "maxLength": 64
        },
        "mkt_clickid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "mkt_network": {
          "type": ["string", "null"],
          "maxLength": 64
        },
        "etl_tags": {
          "type": ["string", "null"],
          "maxLength": 500
        },
        "dvce_sent_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "refr_domain_userid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "refr_dvce_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "domain_sessionid": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "derived_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "event_vendor": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "event_name": {
          "type": ["string", "null"],
          "maxLength": 1000
        },
        "event_format": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_version": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "event_fingerprint": {
          "type": ["string", "null"],
          "maxLength": 128
        },
        "true_tstamp": {
          "type": ["string", "null"],
          "format": "date-time"
        },
        "unstruct_event": { "type": ["object", "null"] },
        "contexts": { "type": ["object", "null" ]},
        "derived_contexts": { "type": ["object", "null" ]}
      },
      "additionalProperties": false
    },
    "processor": {
      "type": "object",
      "description": "Information about the piece of software responsible for the creation of enrichment failures",
      "properties": {
        "artifact": {
          "type": "string",
          "description": "Artifact responsible for the creation of enrichment failures",
          "maxLength": 512
        },
        "version": {
          "type": "string",
          "description": "Version of the artifact responsible for the creation of enrichment failures",
          "pattern": "^(\\d+\\.\\d+\\.\\d+.*)$",
          "maxLength": 32
        }
      },
      "required": [ "artifact", "version" ],
      "additionalProperties": false
    }
  },
  "required": ["failure", "payload", "processor" ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.kinesistee.config/Configuration/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
   "namespace":"com.snowplowanalytics.kinesistee.config",
   "name":"Configuration",
   "type":"record",
   "fields":[
      {
         "name":"name",
         "type":"string"
      },
      {
         "name":"targetStream",
         "type":{
            "name":"TargetStream",
            "type":"record",
            "fields":[
               {
                  "name":"name",
                  "type":"string"
               },
               {
                  "name":"targetAccount",
                  "type":[
                     "null",
                     {
                        "name":"TargetAccount",
                        "type":"record",
                        "fields":[
                           {
                              "name":"awsAccessKey",
                              "type":"string"
                           },
                           {
                              "name":"awsSecretAccessKey",
                              "type":"string"
                           },
                           {
                              "name":"region",
                              "type":"string"
                           }
                        ]
                     }
                  ]
               }
            ]
         }
      },
      {
         "name":"transformer",
         "type":[
             "null",
             {
                "name":"Transformer",
                "type":"record",
                "fields":[
                    {
                        "name":"builtIn",
                        "type": { "name": "BuiltIn", "type": "enum", "symbols": ["SNOWPLOW_TO_NESTED_JSON"] }
                    }
                ]
             }
         ]
      },
      {
         "name":"filter",
         "type":[
            "null",
            {
               "name":"Filter",
               "type":"record",
               "fields":[
                  {
                     "name":"javascript",
                     "type":"string"
                  }
               ]
            }
         ]
      }
   ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/screen_view/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a screen view event",
    "self": {
        "vendor": "com.snowplowanalytics.mobile",
        "name": "screen_view",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string",
            "description": "The name of the screen viewed."
        },
        "type": {
            "type": "string",
            "description": "The type of screen that was viewed e.g feed / carousel."
        },
        "id": {
            "type": "string",
	        "format": "uuid",
            "maxLength": 36,
            "description": "An ID from the associated screenview event."
        },
        "previousName": {
            "type": "string",
            "description": "The name of the previous screen."
        },
        "previousId": {
            "type": "string",
	        "format": "uuid",
            "description": "A screenview ID of the previous screenview."
        },
        "previousType": {
            "type": "string",
            "description": "The screen type of the previous screenview."
        },
        "transitionType": {
            "type": "string",
            "description": "The type of transition that led to the screen being viewed."
        }
    },
    "minProperties": 2,
    "required": ["name", "id"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/application_lifecycle/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Entity that indicates the visibility state of the app (foreground, background)",
  "self": {
    "vendor": "com.snowplowanalytics.mobile",
    "name": "application_lifecycle",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "isVisible": {
      "description": "Indicates if the app is in foreground state (true) or background state (false)",
      "type": "boolean"
    },
    "index": {
      "description": "Represents the foreground index or background index (tracked with com.snowplowanalytics.snowplow application_foreground and application_background events.",
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647
    }
  },
  "required": ["isVisible"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/deep_link_received/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Represents a deep-link received in the app.",
	"self": {
		"vendor": "com.snowplowanalytics.mobile",
		"name": "deep_link_received",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"url": {
			"type": "string",
			"description": "URL in the received deep-link",
			"format": "uri",
			"maxLength": 4096
		},
		"referrer": {
			"type": "string",
			"description": "Referrer URL, source of this deep-link",
			"format": "uri",
			"maxLength": 4096
		}
	},
	"required": ["url"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/deep_link/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Entity that indicates a deep-link has been received and processed.",
	"self": {
		"vendor": "com.snowplowanalytics.mobile",
		"name": "deep_link",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"url": {
			"type": "string",
			"description": "URL in the received deep-link",
			"format": "uri",
			"maxLength": 4096
		},
		"referrer": {
			"type": "string",
			"description": "Referrer URL, source of this deep-link",
			"format": "uri",
			"maxLength": 4096
		}
	},
	"required": ["url"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/screen/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a context that represents information pertaining to the current screen being viewed when an event occurs.",
    "self": {
        "vendor": "com.snowplowanalytics.mobile",
        "name": "screen",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string",
            "description": "The name of the screen viewed."
        },
        "type": {
            "type": "string",
            "description": "The type of screen that was viewed e.g feed / carousel."
        },
        "id": {
            "type": "string",
	        "format": "uuid",
            "maxLength": 36,
            "description": "An ID from the associated screenview event."
        },
        "viewController": {
            "type": "string",
            "description": "iOS specific: class name of the view controller."
        },
        "topViewController": {
            "type": "string",
            "description": "iOS specific: class name of the top level view controller."
        },
        "activity": {
            "type": "string",
            "description": "Android specific: name of activity."
        },
        "fragment": {
            "type": "string",
            "description": "Android specific: name of fragment."
        }
    },
    "minProperties": 2,
    "required": ["name", "id"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/message_notification/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a local or remote push notification",
    "self": {
        "vendor": "com.snowplowanalytics.mobile",
        "name": "message_notification",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "title": {
            "description": "The notification's title.",
            "type": "string",
            "maxLength": 1024
        },
        "body": {
            "description": "The notification's body.",
            "type": "string",
            "maxLength": 4096
        },
        "trigger": {
            "description": "The trigger that raised the notification message.",
            "type": "string",
            "enum": ["push", "location", "calendar", "timeInterval", "other"]
        },
        "notificationTimestamp": {
            "description": "The time when the event of the notification occurred.",
            "type": ["string", "null"],
            "format": "date-time"
        },
        "sound": {
            "description": "The sound played when the device receives the notification.",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "action": {
            "description": "The action associated with the notification.",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "bodyLocKey": {
            "description": "The key to the body string in the app's string resources to use to localize the body text to the user's current localization.",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "bodyLocArgs": {
            "description": "Variable string values to be used in place of the format specifiers in bodyLocArgs to use to localize the body text to the user's current localization.",
            "type": ["array", "null"],
            "items": {
                "description": "Item of bodyLocArgs.",
                "type": ["string", "null"],
                "maxLength": 1024
            },
            "minItems": 1
        },
        "titleLocKey": {
            "description": "The key to the title string in the app's string resources to use to localize the title text to the user's current localization.",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "titleLocArgs": {
            "description": "Variable string values to be used in place of the format specifiers in titleLocArgs to use to localize the title text to the user's current localization.",
            "type": ["array", "null"],
            "items": {
                "description": "Item of titleLocArgs.",
                "type": ["string", "null"],
                "maxLength": 1024
            },
            "minItems": 1
        },
        "group": {
            "description": "The group which this notification is part of.",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "category": {
            "description": "The category associated to the notification.",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "notificationCount": {
            "description": "The number of items this notification represents. It's the badge number on iOS.",
            "type": ["integer", "null"],
            "minimum": 0,
            "maximum": 10000
        },
        "subtitle": {
            "description": "The notification's subtitle (iOS only).",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "contentAvailable": {
            "description": "Indicates whether the application is notified of the delivery of the notification. When true the app is woken up (iOS only).",
            "type": ["boolean", "null"]
        },
        "threadIdentifier": {
            "description": "An identifier similar to 'group' but usable for different purposes (iOS only).",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "icon": {
            "description": "The icon associated to the notification (Android only).",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "tag": {
            "description": "An identifier similar to 'group' but usable for different purposes (Android only).",
            "type": ["string", "null"],
            "maxLength": 1024
        },
        "attachments": {
            "description": "Attachments added to the notification (they can be part of the 'data' field).",
            "type": ["array", "null"],
            "items": {
                "description": "Attachment.",
                "type": "object",
                "properties": {
                    "identifier": {
                        "description": "The identifier of the attachment.",
                        "type": "string",
                        "maxLength": 1024
                    },
                    "url": {
                        "description": "The url of the attachment.",
                        "type": "string",
                        "format": "uri",
                        "maxLength": 1024
                    },
                    "type": {
                        "description": "The type of attachment.",
                        "type": "string",
                        "maxLength": 1024
                    }
                },
                "required": ["identifier", "url", "type"],
                "additionalProperties": false
            }
        }
    },
    "required": ["title", "body", "trigger"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/application_install/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an event where a mobile application is installed.",
	"self": {
		"vendor": "com.snowplowanalytics.mobile",
		"name": "application_install",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/remote_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "com.snowplowanalytics.mobile",
    "name" : "remote_config",
    "version" : "1-0-0",
    "format" : "jsonschema"
  },
  "description": "The configuration file for the Snowplow mobile trackers.",
  "type": "object",
  "properties": {
    "configurationVersion": {
      "description": "Version number that identifies the current configuration. It has to be increased on each update.",
      "type": "integer",
      "minimum": 0
    },
    "configurationBundle": {
      "description": "The list of configurations for each tracker to configure.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "namespace": {
            "description": "The namespace string that identifies the single tracker.",
            "type": "string"
          },
          "networkConfiguration": {
            "description": "Represents the network communication configuration allowing the tracker to be able to send events to the Snowplow collector.",
            "type": "object",
            "properties": {
              "endpoint": {
                "description": "URL of the collector that is going to receive the events tracked by the tracker. The URL can include the schema/protocol (e.g.: http://collector-url.com). In case the URL doesn’t include the schema/protocol, the HTTPS protocol is automatically selected.",
                "type": "string"
              },
              "method": {
                "description": "The method used to send the requests (GET or POST).",
                "enum": [ "get", "post" ]
              }
            },
            "required": [
              "endpoint"
            ]
          },
          "trackerConfiguration": {
            "description": "Represents the configuration of the tracker and the core tracker properties. The TrackerConfiguration can be used to setup the tracker behaviour indicating what should be tracked in term of automatic tracking and contexts/entities to track with the events.",
            "type": "object",
            "properties": {
              "appId": {
                "description": "Identifier of the app.",
                "type": "string"
              },
              "devicePlatform": {
                "description": "It sets the device platform the tracker is running on.",
                "enum": [ "web", "mob", "pc", "srv", "app", "tv", "cnsl", "iot" ]
              },
              "logLevel": {
                "description": "It sets the log level of tracker logs.",
                "enum": [ "off", "error", "debug", "verbose" ]
              },
              "sessionContext": {
                "description": "Whether session context is sent with all the tracked events.",
                "type": "boolean"
              },
              "applicationContext": {
                "description": "Whether application context is sent with all the tracked events.",
                "type": "boolean"
              },
              "platformContext": {
                "description": "Whether mobile/platform context is sent with all the tracked events.",
                "type": "boolean"
              },
              "geoLocationContext": {
                "description": "Whether geo-location context is sent with all the tracked events.",
                "type": "boolean"
              },
              "screenContext": {
                "description": "Whether screen context is sent with all the tracked events.",
                "type": "boolean"
              },
              "screenViewAutotracking": {
                "description": "Whether enable automatic tracking of ScreenView events.",
                "type": "boolean"
              },
              "lifecycleAutotracking": {
                "description": "Whether enable automatic tracking of background and foreground transitions.",
                "type": "boolean"
              },
              "installAutotracking": {
                "description": "Whether enable automatic tracking of install event.",
                "type": "boolean"
              },
              "exceptionAutotracking": {
                "description": "Whether enable crash reporting.",
                "type": "boolean"
              },
              "diagnosticAutotracking": {
                "description": "Whether enable tracker diagnostic.",
                "type": "boolean"
              }
            }
          },
          "subjectConfiguration": {
            "description": "Represents the configuration of the subject. The SubjectConfiguration can be used to setup the tracker with the basic information about the user and the app which will be attached on all the events as contexts.",
            "type": "object",
            "properties": {
              "userId": {
                "description": "The custom user identifier.",
                "type": "string"
              },
              "networkUserId": {
                "description": "The custom network user identifier.",
                "type": "string"
              },
              "domainUserId": {
                "description": "The custom domain user identifier.",
                "type": "string"
              },
              "useragent": {
                "description": "The custom user-agent. It overrides the user-agent used by default.",
                "type": "string"
              },
              "ipAddress": {
                "description": "The IP address (not automatically set).",
                "type": "string"
              },
              "timezone": {
                "description": "Override the timezone string set by the tracker.",
                "type": "string"
              },
              "language": {
                "description": "Override the language string set by the tracker.",
                "type": "string"
              }
            }
          },
          "sessionConfiguration": {
            "description": "Represents the configuration of a Session object which gets appended to each event sent from the Tracker and changes based on the timeout set for the inactivity of app when in foreground or background.",
            "type": "object",
            "properties": {
              "backgroundTimeout": {
                "description": "The amount of time that can elapse before the session id is updated while the app is in the background.",
                "type": "integer",
                "minimum": 0
              },
              "foregroundTimeout": {
                "description": "The amount of time that can elapse before the session id is updated while the app is in the foreground.",
                "type": "integer",
                "minimum": 0
              }
            }
          }
        },
        "required": [
          "namespace"
        ]
      }
    }
  },
  "required": [
    "configurationVersion",
    "configurationBundle"
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/remote_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "com.snowplowanalytics.mobile",
    "name" : "remote_config",
    "version" : "1-0-1",
    "format" : "jsonschema"
  },
  "description": "The configuration file for the Snowplow mobile trackers.",
  "type": "object",
  "properties": {
    "configurationVersion": {
      "description": "Version number that identifies the current configuration. It has to be increased on each update.",
      "type": "integer",
      "minimum": 0,
      "maximum": 2147483647
    },
    "configurationBundle": {
      "description": "The list of configurations for each tracker to configure.",
      "type": "array",
      "items": {
        "type": "object",
        "description": "Configuration objects",
        "properties": {
          "namespace": {
            "description": "The namespace string that identifies the single tracker.",
            "type": "string",
            "maxLength": 4096
          },
          "networkConfiguration": {
            "description": "Represents the network communication configuration allowing the tracker to be able to send events to the Snowplow collector.",
            "type": ["object", "null"],
            "properties": {
              "endpoint": {
                "description": "URL of the collector that is going to receive the events tracked by the tracker. The URL can include the schema/protocol (e.g.: http://collector-url.com). In case the URL doesn’t include the schema/protocol, the HTTPS protocol is automatically selected.",
                "type": "string",
                "maxLength": 2048
              },
              "method": {
                "description": "The method used to send the requests (GET or POST).",
                "type": ["string", "null"],
                "enum": ["get", "post", null]
              }
            },
            "required": [
              "endpoint"
            ]
          },
          "trackerConfiguration": {
            "description": "Represents the configuration of the tracker and the core tracker properties. The TrackerConfiguration can be used to setup the tracker behaviour indicating what should be tracked in term of automatic tracking and contexts/entities to track with the events.",
            "type": ["object", "null"],
            "properties": {
              "appId": {
                "description": "Identifier of the app.",
                "type": "string",
                "maxLength": 4096
              },
              "devicePlatform": {
                "description": "It sets the device platform the tracker is running on.",
                "type": ["string", "null"],
                "enum": ["web", "mob", "pc", "srv", "app", "tv", "cnsl", "iot", null]
              },
              "logLevel": {
                "description": "It sets the log level of tracker logs.",
                "type": ["string", "null"],
                "enum": ["off", "error", "debug", "verbose", null]
              },
              "sessionContext": {
                "description": "Whether session context is sent with all the tracked events.",
                "type": "boolean"
              },
              "applicationContext": {
                "description": "Whether application context is sent with all the tracked events.",
                "type": "boolean"
              },
              "platformContext": {
                "description": "Whether mobile/platform context is sent with all the tracked events.",
                "type": "boolean"
              },
              "geoLocationContext": {
                "description": "Whether geo-location context is sent with all the tracked events.",
                "type": "boolean"
              },
              "screenContext": {
                "description": "Whether screen context is sent with all the tracked events.",
                "type": "boolean"
              },
              "screenViewAutotracking": {
                "description": "Whether enable automatic tracking of ScreenView events.",
                "type": "boolean"
              },
              "lifecycleAutotracking": {
                "description": "Whether enable automatic tracking of background and foreground transitions.",
                "type": "boolean"
              },
              "installAutotracking": {
                "description": "Whether enable automatic tracking of install event.",
                "type": "boolean"
              },
              "exceptionAutotracking": {
                "description": "Whether enable crash reporting.",
                "type": "boolean"
              },
              "diagnosticAutotracking": {
                "description": "Whether enable tracker diagnostic.",
                "type": "boolean"
              },
              "userAnonymisation": {
                "description": "Whether to anonymise client-side user identifiers in session and platform context entities",
                "type": "boolean"
              }
            }
          },
          "subjectConfiguration": {
            "description": "Represents the configuration of the subject. The SubjectConfiguration can be used to setup the tracker with the basic information about the user and the app which will be attached on all the events as contexts.",
            "type": ["object", "null"],
            "properties": {
              "userId": {
                "description": "The custom user identifier.",
                "type": "string",
                "maxLength": 4096
              },
              "networkUserId": {
                "description": "The custom network user identifier.",
                "type": "string",
                "maxLength": 4096
              },
              "domainUserId": {
                "description": "The custom domain user identifier.",
                "type": "string",
                "maxLength": 4096
              },
              "useragent": {
                "description": "The custom user-agent. It overrides the user-agent used by default.",
                "type": "string",
                "maxLength": 4096
              },
              "ipAddress": {
                "description": "The IP address (not automatically set).",
                "type": "string",
                "maxLength": 4096
              },
              "timezone": {
                "description": "Override the timezone string set by the tracker.",
                "type": "string",
                "maxLength": 4096
              },
              "language": {
                "description": "Override the language string set by the tracker.",
                "type": "string",
                "maxLength": 4096
              }
            }
          },
          "sessionConfiguration": {
            "description": "Represents the configuration of a Session object which gets appended to each event sent from the Tracker and changes based on the timeout set for the inactivity of app when in foreground or background.",
            "type": ["object", "null"],
            "properties": {
              "backgroundTimeout": {
                "description": "The amount of time that can elapse before the session id is updated while the app is in the background.",
                "type": "integer",
                "minimum": 0,
                "maximum": 9223372036854775807
              },
              "foregroundTimeout": {
                "description": "The amount of time that can elapse before the session id is updated while the app is in the foreground.",
                "type": "integer",
                "minimum": 0,
                "maximum": 9223372036854775807
              }
            }
          },
          "emitterConfiguration": {
            "description": "Represents the configuration of how events should be sent to the Collector using the Emitter instance.",
            "type": ["object", "null"],
            "properties": {
              "bufferOption": {
                "description": "Whether the buffer should send events instantly or after the buffer has reached it's limit.",
                "type": ["string", "null"],
                "enum": ["Single", "DefaultGroup", "HeavyGroup", null]
              },
              "emitRange": {
                "description": "Maximum number of events collected from the EventStore to be sent in a request.",
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "threadPoolSize": {
                "description": "Maximum number of threads working in parallel in the tracker to send requests.",
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "byteLimitGet": {
                "description": "Maximum amount of bytes allowed to be sent in a payload in a GET request.",
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "byteLimitPost": {
                "description": "Maximum amount of bytes allowed to be sent in a payload in a POST request.",
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "customRetryForStatusCodes": {
                "description": "Custom retry rules for HTTP status codes returned from the Collector. Mapping of integers (status codes) to booleans (true for retry and false for not retry).",
                "type": "object",
                "additionalProperties": true
              },
              "serverAnonymisation": {
                "description": "Whether to anonymise server-side user identifiers including the network_userid and user_ipaddress",
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "namespace"
        ]
      }
    }
  },
  "required": [
    "configurationVersion",
    "configurationBundle"
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.mobile/application/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an application context which automatically tracks version number and build name when using our mobile SDK's.",
	"self": {
		"vendor": "com.snowplowanalytics.mobile",
		"name": "application",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"version": {
			"type": "string",
			"description": "Version number of the application e.g 1.1.0",
			"maxLength": 255
		},
		"build": {
			"type": "string",
			"description": "Build name of the application e.g s9f2k2d or 1.1.0 beta",
			"maxLength": 255
		}
	},
	"required": ["version", "build"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.factotum/job_update/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"self": {
		"vendor": "com.snowplowanalytics.factotum",
		"name": "job_update",
		"version": "1-0-0",
		"format": "jsonschema"
	},
	"type": "object",
	"properties": {
		"jobName": {
			"type": "string"
		},
		"runReference": {
			"type": "string"
		},
		"factfile": {
			"type": "string",
			"maxLength": 1000000
		},
		"applicationContext": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string",
					"pattern": "\\d+\\.\\d+\\.\\d+-?.*"
				},
				"name": {
					"type": "string"
				}
			},
			"required": [
				"version",
				"name"
			],
			"additionalProperties": false
		},
		"jobReference": {
			"type": "string"
		},
		"tags": {
			"type": "object",
			"patternProperties": {
				".*": {
					"type": "string"
				}
			}
		},
		"runState": {
			"enum": [
				"RUNNING",
				"WAITING",
				"SUCCEEDED",
				"FAILED"
			]
		},
		"startTime": {
			"type": "string",
			"format": "date-time"
		},
		"runDuration": {
			"type": "string"
		},
		"jobTransition": {
			"type": "object",
			"properties": {
				"previousState": {
					"enum": [
						"RUNNING",
						"WAITING",
						"SUCCEEDED",
						"FAILED",
						null
					]
				},
				"currentState": {
					"enum": [
						"RUNNING",
						"WAITING",
						"SUCCEEDED",
						"FAILED"
					]
				}
			},
			"required": [
				"previousState",
				"currentState"
			],
			"additionalProperties": false
		},
		"taskStates": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"taskName": {
						"type": "string"
					},
					"state": {
						"enum": [
							"RUNNING",
							"WAITING",
							"SUCCEEDED",
							"SUCCEEDED_NO_OP",
							"FAILED",
							"SKIPPED"
						]
					},
					"started": {
						"type": "string",
						"format": "date-time"
					},
					"duration": {
						"type": "string"
					},
					"stdout": {
						"type": "string"
					},
					"stderr": {
						"type": "string"
					},
					"returnCode": {
						"type": "integer",
						"maximum": 32767,
						"minimum": -32767
					},
					"errorMessage": {
						"type": "string"
					}
				},
				"required": [
					"taskName",
					"state"
				],
				"additionalProperties": false
			}
		}
	},
	"required": [
		"jobName",
		"jobReference",
		"runReference",
		"runState",
		"factfile",
		"applicationContext",
		"startTime",
		"runDuration",
		"taskStates",
		"tags"
	],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.factotum/factfile/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"self": {
		"vendor": "com.snowplowanalytics.factotum",
		"name": "factfile",
		"version": "1-0-0",
		"format": "jsonschema"
	},
	"type": "object",
	"properties": {
		"schema": {
			"type": "string",
			"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[0-9]+-[0-9]+-[0-9]+$"
		},
		"data": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"tasks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"command": {
								"type": "string"
							},
							"onResult": {
								"type": "object",
								"properties": {
									"terminateJobWithSuccess": {
										"type": "array",
										"items": {
											"type": "integer",
											"maximum": 32767,
											"minimum": 0
										}
									},
									"continueJob": {
										"type": "array",
										"items": {
											"type": "integer",
											"maximum": 32767,
											"minimum": 0
										}
									}
								},
								"required": [
									"terminateJobWithSuccess",
									"continueJob"
								],
								"additionalProperties": false
							},
							"dependsOn": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"executor": {
								"type": "string"
							},
							"arguments": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						},
						"required": [
							"executor",
							"dependsOn",
							"command",
							"arguments",
							"name",
							"onResult"
						],
						"additionalProperties": false
					}
				}
			},
			"required": [
				"name",
				"tasks"
			],
			"additionalProperties": false
		}
	},
	"required": [
		"schema",
		"data"
	],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.factotum/task_update/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"self": {
		"vendor": "com.snowplowanalytics.factotum",
		"name": "task_update",
		"version": "1-0-0",
		"format": "jsonschema"
	},
	"type": "object",
	"properties": {
		"jobName": {
			"type": "string"
		},
		"runReference": {
			"type": "string"
		},
		"factfile": {
			"type": "string",
			"maxLength": 1000000
		},
		"applicationContext": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string",
					"pattern": "\\d+\\.\\d+\\.\\d+-?.*"
				},
				"name": {
					"type": "string"
				}
			},
			"required": [
				"version",
				"name"
			],
			"additionalProperties": false
		},
		"jobReference": {
			"type": "string"
		},
		"tags": {
			"type": "object",
			"patternProperties": {
				".*": {
					"type": "string"
				}
			}
		},
		"runState": {
			"enum": [
				"RUNNING",
				"WAITING",
				"SUCCEEDED",
				"FAILED"
			]
		},
		"startTime": {
			"type": "string",
			"format": "date-time"
		},
		"runDuration": {
			"type": "string"
		},
		"taskTransitions": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"taskName": {
						"type": "string"
					},
					"previousState": {
						"enum": [
							"RUNNING",
							"WAITING",
							"SUCCEEDED",
							"SUCCEEDED_NO_OP",
							"FAILED",
							"SKIPPED"
						]
					},
					"currentState": {
						"enum": [
							"RUNNING",
							"WAITING",
							"SUCCEEDED",
							"SUCCEEDED_NO_OP",
							"FAILED",
							"SKIPPED"
						]
					}
				},
				"required": [
					"taskName",
					"previousState",
					"currentState"
				],
				"additionalProperties": false
			}
		},
		"taskStates": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"taskName": {
						"type": "string"
					},
					"state": {
						"enum": [
							"RUNNING",
							"WAITING",
							"SUCCEEDED",
							"SUCCEEDED_NO_OP",
							"FAILED",
							"SKIPPED"
						]
					},
					"started": {
						"type": "string",
						"format": "date-time"
					},
					"duration": {
						"type": "string"
					},
					"stdout": {
						"type": "string"
					},
					"stderr": {
						"type": "string"
					},
					"returnCode": {
						"type": "integer",
						"maximum": 32767,
						"minimum": -32767
					},
					"errorMessage": {
						"type": "string"
					}
				},
				"required": [
					"taskName",
					"state"
				],
				"additionalProperties": false
			}
		}
	},
	"required": [
		"jobName",
		"jobReference",
		"runReference",
		"runState",
		"factfile",
		"applicationContext",
		"startTime",
		"runDuration",
		"taskStates",
		"tags"
	],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.enhanced-ecommerce/productFieldObject/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Google Analytics Enhanced Ecommerce product data",
	"self": {
		"vendor": "com.google.analytics.enhanced-ecommerce",
		"name": "productFieldObject",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"id": {
			"type": "string",
			"maxLength": 500
		},
		"name": {
			"type": "string",
			"maxLength": 500
		},
		"list": {
			"type": "string",
			"maxLength": 500
		},
		"brand": {
			"type": "string",
			"maxLength": 500
		},
		"category": {
			"type": "string",
			"maxLength": 500
		},
		"variant": {
			"type": "string",
			"maxLength": 500
		},
		"price": {
			"type": "number",
			"multipleOf": 0.01
		},
		"quantity": {
			"type": "integer"
		},
		"coupon": {
			"type": "string",
			"maxLength": 500
		},
		"position": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647
		},
		"currency": {
			"type": "string",
			"maxLength": 3,
			"minLength": 3
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.enhanced-ecommerce/impressionFieldObject/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Google Analytics Enhanced Ecommerce impression data",
	"self": {
		"vendor": "com.google.analytics.enhanced-ecommerce",
		"name": "impressionFieldObject",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"id": {
			"type": "string",
			"maxLength": 500
		},
		"name": {
			"type": "string",
			"maxLength": 500
		},
		"list": {
			"type": "string",
			"maxLength": 500
		},
		"brand": {
			"type": "string",
			"maxLength": 500
		},
		"category": {
			"type": "string",
			"maxLength": 500
		},
		"variant": {
			"type": "string",
			"maxLength": 500
		},
		"position": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647
		},
		"price": {
			"type": "number",
			"multipleOf": 0.01
		},
		"currency": {
			"type": "string",
			"maxLength": 3,
			"minLength": 3
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.enhanced-ecommerce/promoFieldObject/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Google Analytics Enhanced Ecommerce promotion data",
	"self": {
		"vendor": "com.google.analytics.enhanced-ecommerce",
		"name": "promoFieldObject",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"id": {
			"type": "string",
			"maxLength": 500
		},
		"name": {
			"type": "string",
			"maxLength": 500
		},
		"creative": {
			"type": "string",
			"maxLength": 500
		},
		"position": {
			"type": "string",
			"maxLength": 500
		},
		"currency": {
			"type": "string",
			"maxLength": 3,
			"minLength": 3
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.enhanced-ecommerce/actionFieldObject/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for Google Analytics Enhanced Ecommerce action data",
	"self": {
		"vendor": "com.google.analytics.enhanced-ecommerce",
		"name": "actionFieldObject",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"id": {
			"type": "string",
			"maxLength": 500
		},
		"affiliation": {
			"type": "string",
			"maxLength": 500
		},
		"revenue": {
			"type": "number",
			"multipleOf": 0.01
		},
		"tax": {
			"type": "number",
			"multipleOf": 0.01
		},
		"shipping": {
			"type": "number",
			"multipleOf": 0.01
		},
		"coupon": {
			"type": "string",
			"maxLength": 500
		},
		"list": {
			"type": "string",
			"maxLength": 500
		},
		"step": {
			"type": "integer",
			"minimum": 0,
			"maximum": 2147483647
		},
		"option": {
			"type": "string",
			"maxLength": 500
		},
		"currency": {
			"type": "string",
			"maxLength": 3,
			"minLength": 3
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.enhanced-ecommerce/action/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Google Analytics Enhanced Ecommerce action",
	"self": {
		"vendor": "com.google.analytics.enhanced-ecommerce",
		"name": "action",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"action": {
			"enum": [
				"click",
				"detail",
				"add",
				"remove",
				"checkout",
				"checkout_option",
				"purchase",
				"refund",
				"promo_click",
				"view"
			]
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.oss/oss_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Context schema for OSS terraform modules, VM instances and application events",
  "self": {
    "vendor": "com.snowplowanalytics.oss",
    "name": "oss_context",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "userProvidedId": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "Optional ID provided by user as an input to each terraform module. Intended to tie events together across modules, infrastructure and apps when used consistently."
    },
    "autoGeneratedId": {
      "type": "string",
      "maxLength": 256,
      "description": "ID automatically generated upon running a modules deployment script. Intended to identify each independent module, and the infrastructure it controls."
    },
    "instanceId": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "A unique identifier for the VM instance. Unique for each instance of the app running within a module."
    },
    "cloud": {
      "type": "string",
      "maxLength": 256,
      "description": "The cloud, either AWS or GCP"
    },
    "region": {
      "type": "string",
      "maxLength": 256,
      "description": "The region the services are running in"
    },
    "moduleName": {
      "type": "string",
      "maxLength": 256,
      "description": "The name of the terraform module"
    },
    "moduleVersion": {
      "type": "string",
      "maxLength": 32,
      "description": "The version of the terraform module e.g. 1.0.0"
    },
    "applicationName": {
      "type": "string",
      "maxLength": 256,
      "description": "The name of the application"
    },
    "applicationVersion": {
      "type": "string",
      "maxLength": 256,
      "description": "The version of the application e.g. 1.0.0"
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.oss/oss_context/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Context schema for OSS terraform modules, VM instances and application events",
  "self": {
    "vendor": "com.snowplowanalytics.oss",
    "name": "oss_context",
    "format": "jsonschema",
    "version": "1-0-1"
  },
  "type": "object",
  "properties": {
    "userProvidedId": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "Optional ID provided by user as an input to each component. Intended to tie events together across modules, infrastructure and apps when used consistently"
    },
    "autoGeneratedId": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "ID automatically generated upon running a modules deployment script. Intended to identify each independent module, and the infrastructure it controls"
    },
    "instanceId": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "A unique identifier for the VM instance. Unique for each instance of the app running within a module"
    },
    "cloud": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "The cloud AWS or GCP, none for on-premise"
    },
    "region": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "The region the services are running in"
    },
    "moduleName": {
      "type": [ "string", "null" ],
      "maxLength": 256,
      "description": "The name of the terraform module"
    },
    "moduleVersion": {
      "type": [ "string", "null" ],
      "maxLength": 32,
      "description": "The version of the terraform module e.g. 1.0.0"
    },
    "applicationName": {
      "type": "string",
      "maxLength": 256,
      "description": "The name of the application"
    },
    "applicationVersion": {
      "type": "string",
      "maxLength": 256,
      "description": "The version of the application e.g. 1.0.0"
    },
    "appGeneratedId": {
      "type": [ "string", "null" ],
      "format": "uuid",
      "description": "Automatically generated UUID on every application restart"
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.dataflowrunner/PlaybookConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.dataflowrunner",
  "name": "PlaybookConfig",
  "type": "record",
  "fields": [
    {
      "name": "region",
      "type": "string"
    },
    {
      "name": "credentials",
      "type": {
        "name": "CredentialsRecord",
        "type": "record",
        "fields": [
          {
            "name": "accessKeyId",
            "type": "string"
          },
          {
            "name": "secretAccessKey",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "steps",
      "type": {
        "type": "array",
        "items": {
          "name": "StepsRecord",
          "type": "record",
          "fields": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "type",
              "type": "string"
            },
            {
              "name": "actionOnFailure",
              "type": "string"
            },
            {
              "name": "jar",
              "type": "string"
            },
            {
              "name": "arguments",
              "type": {
                "type": "array",
                "items": "string"
              }
            }
          ]
        }
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.dataflowrunner/PlaybookConfig/avro/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.dataflowrunner",
  "name": "PlaybookConfig",
  "type": "record",
  "fields": [
    {
      "name": "region",
      "type": "string"
    },
    {
      "name": "credentials",
      "type": {
        "name": "CredentialsRecord",
        "type": "record",
        "fields": [
          {
            "name": "accessKeyId",
            "type": "string"
          },
          {
            "name": "secretAccessKey",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "steps",
      "type": {
        "type": "array",
        "items": {
          "name": "StepsRecord",
          "type": "record",
          "fields": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "type",
              "type": "string"
            },
            {
              "name": "actionOnFailure",
              "type": "string"
            },
            {
              "name": "jar",
              "type": "string"
            },
            {
              "name": "arguments",
              "type": {
                "type": "array",
                "items": "string"
              }
            }
          ]
        }
      }
    },
    {
      "name": "tags",
      "type": [{
        "type": "array",
        "items": {
          "name": "TagsRecord",
          "type": "record",
          "fields": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ]
        }
      }, "null"]
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.dataflowrunner/ClusterConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.dataflowrunner",
  "name": "ClusterConfig",
  "type": "record",
  "fields": [
    {
      "name": "name",
      "type": "string"
    },
    {
      "name": "logUri",
      "type": "string"
    },
    {
      "name": "region",
      "type": "string"
    },
    {
      "name": "credentials",
      "type": {
        "name": "CredentialsRecord",
        "type": "record",
        "fields": [
          {
            "name": "accessKeyId",
            "type": "string"
          },
          {
            "name": "secretAccessKey",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "roles",
      "type": {
        "name": "RolesRecord",
        "type": "record",
        "fields": [
          {
            "name": "jobflow",
            "type": "string"
          },
          {
            "name": "service",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "ec2",
      "type": {
        "name": "Ec2Record",
        "type": "record",
        "fields": [
          {
            "name": "amiVersion",
            "type": "string"
          },
          {
            "name": "keyName",
            "type": "string"
          },
          {
            "name": "location",
            "type": {
              "name": "LocationRecord",
              "type": "record",
              "fields": [
                {
                  "name": "classic",
                  "type": [{
                    "name": "ClassicRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "availabilityZone",
                        "type": "string"
                      }
                    ]
                  }, "null"]
                },
                {
                  "name": "vpc",
                  "type": [{
                    "name": "VPCRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "subnetId",
                        "type": "string"
                      }
                    ]
                  }, "null"]
                }
              ]
            }
          },
          {
            "name": "instances",
            "type": {
              "name": "InstancesRecord",
              "type": "record",
              "fields": [
                {
                  "name": "master",
                  "type": {
                    "name": "MasterRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "name": "core",
                  "type": {
                    "name": "CoreRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "count",
                        "type": "long"
                      }
                    ]
                  }
                },
                {
                  "name": "task",
                  "type": {
                    "name": "TaskRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "count",
                        "type": "long"
                      },
                      {
                        "name": "bid",
                        "type": "string"
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "tags",
      "type": [{
        "type": "array",
        "items": {
          "name": "TagsRecord",
          "type": "record",
          "fields": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ]
        }
      }, "null"]
    },
    {
      "name": "bootstrapActionConfigs",
      "type": [{
        "type": "array",
        "items": {
          "name": "BootstrapActionConfigsRecord",
          "type": "record",
          "fields": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "scriptBootstrapAction",
              "type": {
                "name": "ScriptBootstrapActionRecord",
                "type": "record",
                "fields": [
                  {
                    "name": "args",
                    "type": {
                      "type": "array",
                      "items": "string"
                    }
                  },
                  {
                    "name": "path",
                    "type": "string"
                  }
                ]
              }
            }
          ]
        }
      }, "null"]
    },
    {
      "name": "configurations",
      "type": [{
        "type": "array",
        "items": {
          "name": "ConfigurationRecord",
          "type": "record",
          "fields": [
            {
              "name": "classification",
              "type": "string"
            },
            {
              "name": "properties",
              "type": {
                "type": "map",
                "values": "string"
              }
            }
          ]
        }
      }, "null"]
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.dataflowrunner/ClusterConfig/avro/1-1-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.dataflowrunner",
  "name": "ClusterConfig",
  "type": "record",
  "fields": [
    {
      "name": "name",
      "type": "string"
    },
    {
      "name": "logUri",
      "type": "string"
    },
    {
      "name": "region",
      "type": "string"
    },
    {
      "name": "credentials",
      "type": {
        "name": "CredentialsRecord",
        "type": "record",
        "fields": [
          {
            "name": "accessKeyId",
            "type": "string"
          },
          {
            "name": "secretAccessKey",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "roles",
      "type": {
        "name": "RolesRecord",
        "type": "record",
        "fields": [
          {
            "name": "jobflow",
            "type": "string"
          },
          {
            "name": "service",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "ec2",
      "type": {
        "name": "Ec2Record",
        "type": "record",
        "fields": [
          {
            "name": "amiVersion",
            "type": "string"
          },
          {
            "name": "keyName",
            "type": "string"
          },
          {
            "name": "location",
            "type": {
              "name": "LocationRecord",
              "type": "record",
              "fields": [
                {
                  "name": "classic",
                  "type": [{
                    "name": "ClassicRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "availabilityZone",
                        "type": "string"
                      }
                    ]
                  }, "null"]
                },
                {
                  "name": "vpc",
                  "type": [{
                    "name": "VPCRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "subnetId",
                        "type": "string"
                      }
                    ]
                  }, "null"]
                }
              ]
            }
          },
          {
            "name": "instances",
            "type": {
              "name": "InstancesRecord",
              "type": "record",
              "fields": [
                {
                  "name": "master",
                  "type": {
                    "name": "MasterRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "ebsConfiguration",
                        "type": [{
                          "name": "EbsConfigurationRecord",
                          "type": "record",
                          "fields": [
                            {
                              "name": "ebsOptimized",
                              "type": "boolean"
                            },
                            {
                              "name": "ebsBlockDeviceConfigs",
                              "type": {
                                "type": "array",
                                "items": {
                                  "name": "EbsBlockDeviceConfigRecord",
                                  "type": "record",
                                  "fields": [
                                    {
                                      "name": "volumesPerInstance",
                                      "type": "long"
                                    },
                                    {
                                      "name": "volumeSpecification",
                                      "type": {
                                        "name": "VolumeSpecificationRecord",
                                        "type": "record",
                                        "fields": [
                                          {
                                            "name": "iops",
                                            "type": "long"
                                          },
                                          {
                                            "name": "sizeInGB",
                                            "type": "long"
                                          },
                                          {
                                            "name": "volumeType",
                                            "type": "string"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }, "null"]
                      }
                    ]
                  }
                },
                {
                  "name": "core",
                  "type": {
                    "name": "CoreRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "count",
                        "type": "long"
                      },
                      {
                        "name": "ebsConfiguration",
                        "type": [ "EbsConfigurationRecord", "null" ]
                      }
                    ]
                  }
                },
                {
                  "name": "task",
                  "type": {
                    "name": "TaskRecord",
                    "type": "record",
                    "fields": [
                      {
                        "name": "type",
                        "type": "string"
                      },
                      {
                        "name": "count",
                        "type": "long"
                      },
                      {
                        "name": "bid",
                        "type": "string"
                      },
                      {
                        "name": "ebsConfiguration",
                        "type": [ "EbsConfigurationRecord", "null" ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "tags",
      "type": [{
        "type": "array",
        "items": {
          "name": "TagsRecord",
          "type": "record",
          "fields": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ]
        }
      }, "null"]
    },
    {
      "name": "bootstrapActionConfigs",
      "type": [{
        "type": "array",
        "items": {
          "name": "BootstrapActionConfigsRecord",
          "type": "record",
          "fields": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "scriptBootstrapAction",
              "type": {
                "name": "ScriptBootstrapActionRecord",
                "type": "record",
                "fields": [
                  {
                    "name": "args",
                    "type": {
                      "type": "array",
                      "items": "string"
                    }
                  },
                  {
                    "name": "path",
                    "type": "string"
                  }
                ]
              }
            }
          ]
        }
      }, "null"]
    },
    {
      "name": "configurations",
      "type": [{
        "type": "array",
        "items": {
          "name": "ConfigurationRecord",
          "type": "record",
          "fields": [
            {
              "name": "classification",
              "type": "string"
            },
            {
              "name": "properties",
              "type": {
                "type": "map",
                "values": "string"
              }
            }
          ]
        }
      }, "null"]
    },
    {
      "name": "applications",
      "type": [{
        "type": "array",
        "items": "string"
      }, "null"]
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.slack.sauna.commands/send_message/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for a Slack send message command",
    "self": {
        "vendor": "com.slack.sauna.commands",
        "name": "send_message",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "text": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "channel": {
            "type": "string"
        },
        "icon_url": {
            "type": "string"
        },
        "icon_emoji": {
            "type": "string"
        },
        "link_names": {
            "type": "boolean"
        },
        "mrkdwn": {
            "type": "boolean"
        },
        "unfurl_media": {
            "type": "boolean"
        },
        "unfurl_links": {
            "type": "boolean"
        },
        "attachments": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "fallback": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "pretext": {
                        "type": "string"
                    },
                    "author_name": {
                        "type": "string"
                    },
                    "author_link": {
                        "type": "string"
                    },
                    "author_icon": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "title_link": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                },
                                "short": {
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "title",
                                "value"
                            ],
                            "additionalProperties": false
                        }
                    },
                    "image_url": {
                        "type": "string"
                    },
                    "thumb_url": {
                        "type": "string"
                    },
                    "footer": {
                        "type": "string"
                    },
                    "footer_icon": {
                        "type": "string"
                    },
                    "ts": {
                        "type": "integer"
                    }
                },
                "required": [
                    "fallback"
                ],
                "additionalProperties": false
            }
        }
    },
    "anyOf": [
        {
            "required": [
                "text"
            ]
        },
        {
            "required": [
                "attachments"
            ]
        }
    ],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.youtube/youtube/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Context Schema for a youtube player event",
  "self": {
    "vendor": "com.youtube",
    "name": "youtube",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "avaliablePlaybackRates": {
      "type": "array",
      "description": "An array of playback rates in which the current video is available",
      "items": {
        "type": "number",
        "minimum": 0,
        "maximum": 128
      }
    },
    "avaliableQualityLevels": {
      "type": ["array", "null"],
      "description": "An array of quality levels in which the current video is available",
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "cued": {
      "type": "boolean",
      "description": "If the video is cued"
    },
    "playerId": {
      "type": "string",
      "description": "The HTML id of the video element",
      "maxLength": 65535
    },
    "autoPlay": {
      "type": "boolean",
      "description": "This specifies whether the initial video will automatically start to play when the player loads."
    },
    "buffering": {
      "type": "boolean",
      "description": "If the player is buffering"
    },
    "controls": {
      "type": "boolean",
      "description": "Whether the video player controls are displayed"
    },
    "error": {
      "type": [
        "string",
        "null"
      ],
      "description": "A string of the latest error to occur, or null if no errors",
      "enum": [
        "INVALID_PARAMETER",
        "HTML5_PLAYER_ERROR",
        "NOT_FOUND",
        "EMBED_DISALLOWED"
      ]
    },
    "loaded": {
      "type": "integer",
      "description": "The percentage of the video that the player shows as buffered",
      "minimum": 0,
      "maximum": 100
    },
    "origin": {
      "type": [
        "string",
        "null"
      ],
      "description": "The origin domain of the embed",
      "maxLength": 65535
    },
    "playbackQuality": {
      "type": "string",
      "description": "The quality level of the current video",
      "maxLength": 128
    },
    "playlist": {
      "type": [
        "array",
        "null"
      ],
      "description": "An array of the video IDs in the playlist as they are currently ordered."
    },
    "playlistIndex": {
      "type": [
        "number",
        "null"
      ],
      "description": "The index of the playlist video that is currently playing",
      "minimum": 0,
      "maximum": 65535
    },
    "unstarted": {
      "type": "boolean",
      "description": "If the player hasn't started"
    },
    "url": {
      "type": "string",
      "description": "The YouTube embed URL of the media resource",
      "maxLength": 65535,
      "format": "uri"
    },
    "fov": {
      "type": [
        "number",
        "null"
      ],
      "description": "The field-of-view of the view in degrees, as measured along the longer edge of the viewport",
      "minimum": 30,
      "maximum": 120
    },
    "roll": {
      "type": [
        "number",
        "null"
      ],
      "description": "The clockwise or counterclockwise rotational angle of the view in degrees",
      "minimum": -180,
      "maximum": 180
    },
    "pitch": {
      "type": [
        "number",
        "null"
      ],
      "description": "The vertical angle of the view in degrees",
      "minimum": -90,
      "maximum": 90
    },
    "yaw": {
      "type": [
        "number",
        "null"
      ],
      "description": "The horizontal angle of the view in degrees",
      "minimum": 0,
      "maximum": 360
    }
  },
  "additionalProperties": false,
  "required": [
    "avaliablePlaybackRates",
    "autoPlay",
    "buffering",
    "controls",
    "cued",
    "loaded",
    "playbackQuality",
    "playerId",
    "unstarted",
    "url"
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.loggers/HipchatConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.loggers",
  "name": "HipchatConfig_1_0_0",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    { "name": "parameters",
      "type": {
        "name": "HipchatConfigParameters_1_0_0",
        "type": "record",
        "fields": [
          {
            "name": "token",
            "type": "string"
          },
          {
            "name": "roomId",
            "type": "string"
          }
        ]
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.loggers/AmazonDynamodbConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.loggers",
  "name": "AmazonDynamodbConfig_1_0_0",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    { "name": "parameters",
      "type": {
        "name": "AmazonDynamodbConfigParameters_1_0_0",
        "type": "record",
        "fields": [
          {
            "name": "awsRegion",
            "type": "string"
          },
          {
            "name": "awsAccessKeyId",
            "type": "string"
          },
          {
            "name": "awsSecretAccessKey",
            "type": "string"
          },
          {
            "name": "dynamodbTableName",
            "type": "string"
          }
        ]
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.olark/transcript/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Olark transcript event",
  "self": {
    "vendor": "com.olark",
    "name": "transcript",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "maxLength": 128
      }
    },
    "items": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "operatorId": {
            "type": "string",
            "maxLength": 64
          },
          "kind": {
            "type": "string",
            "maxLength": 64
          },
          "nickname": {
            "type": "string",
            "maxLength": 64
          },
          "visitorNickname": {
            "type": "string",
            "maxLength": 64
          }
        },
        "additionalProperties": false
      }
    },
    "groups": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "maxLength": 128
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "id": {
            "type": "string",
            "maxLength": 128
          }
        },
        "additionalProperties": false
      }
    },
    "visitor": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string",
          "maxLength": 128
        },
        "city": {
          "type": "string",
          "maxLength": 128
        },
        "ip": {
          "type": "string",
          "format": "ipv4"
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 64
        },
        "browser": {
          "type": "string",
          "maxLength": 128
        },
        "fullName": {
          "type": "string",
          "maxLength": 256
        },
        "emailAddress": {
          "type": "string",
          "format": "email",
          "maxLength": 256
        },
        "country": {
          "type": "string",
          "maxLength": 128
        },
        "operatingSystem": {
          "type": "string",
          "maxLength": 128
        },
        "id": {
          "type": "string",
          "maxLength": 64
        },
        "countryCode": {
          "type": "string",
          "maxLength": 8
        },
        "region": {
          "type": "string",
          "maxLength": 8
        },
        "conversationBeginPage": {
          "type": "string",
          "format": "uri",
          "maxLength": 8192
        },
        "chatFeedback": {
          "type": "object",
          "properties": {
            "knowledge": {
              "type": "integer",
              "maximum": 32767,
              "minimum": 0
            },
            "friendliness": {
              "type": "integer",
              "maximum": 32767,
              "minimum": 0
            },
            "responsiveness": {
              "type": "integer",
              "maximum": 32767,
              "minimum": 0
            },
            "overallChat": {
              "type": "integer",
              "maximum": 32767,
              "minimum": 0
            },
            "comments": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "kind": {
          "type": "string",
          "maxLength": 64
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "maxLength": 128
    },
    "kind": {
      "type": "string",
      "maxLength": 64
    },
    "manuallySubmitted": {
      "type": "boolean"
    },
    "operators": {
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "maxLength": 128
            },
            "emailAddress": {
              "type": "string",
              "format": "email",
              "maxLength": 256
            },
            "id": {
              "type": "string",
              "maxLength": 128
            },
            "kind": {
              "type": "string",
              "maxLength": 64
            },
            "nickname": {
              "type": "string",
              "maxLength": 64
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.olark/offline_message/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Olark offline message event",
  "self": {
    "vendor": "com.olark",
    "name": "offline_message",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "items": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "maxLength": 64
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string",
            "maxLength": 64
          }
        },
        "additionalProperties": false
      }
    },
    "groups": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "id": {
            "type": "string",
            "maxLength": 128
          },
          "kind": {
            "type": "string",
            "maxLength": 64
          }
        },
        "additionalProperties": false
      }
    },
    "visitor": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string",
          "maxLength": 128
        },
        "city": {
          "type": "string",
          "maxLength": 128
        },
        "ip": {
          "type": "string",
          "format": "ipv4"
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 64
        },
        "browser": {
          "type": "string",
          "maxLength": 128
        },
        "fullName": {
          "type": "string",
          "maxLength": 256
        },
        "emailAddress": {
          "type": "string",
          "format": "email",
          "maxLength": 512
        },
        "country": {
          "type": "string",
          "maxLength": 128
        },
        "operatingSystem": {
          "type": "string",
          "maxLength": 128
        },
        "id": {
          "type": "string",
          "maxLength": 64
        },
        "countryCode": {
          "type": "string",
          "maxLength": 8
        },
        "region": {
          "type": "string",
          "maxLength": 8
        },
        "kind": {
          "type": "string",
          "maxLength": 64
        }
      },
      "additionalProperties": true
    },
    "id": {
      "type": "string",
      "maxLength": 64
    },
    "kind": {
      "type": "string",
      "maxLength": 64
    }
  },
  "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/iab_spiders_and_robots_enrichment/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for IAB Spiders & Robots enrichment config",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.enrichments",
        "name": "iab_spiders_and_robots_enrichment",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "vendor": {
            "type": "string"
        },
        "name": {
            "type": "string"
        },
        "enabled": {
            "type": "boolean"
        },

        "parameters": {
            "type": "object",
            "properties": {
                "ipFile": {
                    "description": "Path to IP address exclude file",
                    "type": "object",
                    "properties": {
                        "database": {
                            "enum": ["ip_exclude_current_cidr.txt"]
                        },
                        "uri": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "required": ["database", "uri"]
                },
                "excludeUseragentFile": {
                    "description": "Path to user agent exclude file",
                    "type": "object",
                    "properties": {
                        "database": {
                            "enum": ["exclude_current.txt"]
                        },
                        "uri": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "required": ["database", "uri"]
                },
                "includeUseragentFile": {
                    "description": "Path to user agent include file",
                    "type": "object",
                    "properties": {
                        "database": {
                            "enum": ["include_current.txt"]
                        },
                        "uri": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    "required": ["database", "uri"]
                }
            },
            "required": [
                "ipFile",
                "excludeUseragentFile",
                "includeUseragentFile"
            ],
            "additionalProperties": false
        }
    },
    "required": [
        "vendor",
        "name",
        "enabled",
        "parameters"
    ],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/http_header_extractor_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for HTTP header extractor enrichment",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow.enrichments",
		"name": "http_header_extractor_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"headersPattern": {
					"type": "string"
				}
			},
			"required": ["headersPattern"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "enabled", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/yauaa_enrichment_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for YAUAA enrichment config",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.enrichments",
        "name": "yauaa_enrichment_config",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "vendor": {
            "type": "string"
        },
        "name": {
            "type": "string"
        },
        "enabled": {
            "type": "boolean"
        },
        "parameters": {
            "type": "object",
            "properties": {
                "cacheSize": {
                    "type": "integer"
                }
            },
            "additionalProperties": false
        }
    },
    "required": [
        "vendor",
        "name",
        "enabled"
    ],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/sql_query_enrichment_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for SQL Query enrichment configuration",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow.enrichments",
		"name": "sql_query_enrichment_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},

		"parameters": {
			"type": "object",
			"properties": {
				"inputs": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"placeholder": {
								"type": "integer",
								"minimum": 1,
								"maximum": 64
							},
							"pojo": {
								"type": "object",
								"properties": {
									"field": {
										"type": "string"
									}
								},
								"additionalProperties": false,
								"required": ["field"]
							},
							"json": {
								"type": "object",
								"properties": {
									"field": {
										"type": "string",
										"enum": ["unstruct_event", "contexts", "derived_contexts"]
									},
									"schemaCriterion": {
										"type": "string",
										"pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
									},
									"jsonPath": {
										"type": "string"
									}
								},
								"additionalProperties": false,
								"required": ["field", "schemaCriterion", "jsonPath"]
							}
						},
						"additionalProperties": false,
						"minProperties": 2,
						"maxProperties": 2,
						"required": ["placeholder"]
					}
				},
				"database": {
					"oneOf": [

						{
							"type": "object",
							"properties": {
								"postgresql": {
									"type": "object",
									"properties": {
										"host": {
											"type": "string"
										},
										"port": {
											"type": "integer",
											"minimum": 1,
											"maximum": 65535
										},
										"sslMode": {
											"type": "boolean"
										},
										"username": {
											"type": "string",
											"minLength": 1
										},
										"password": {
											"type": "string"
										},
										"database": {
											"type": "string",
											"minLength": 1
										}
									},
									"required": ["host", "port", "sslMode", "username", "password", "database"],
									"additionalProperties": false
								}
							},
							"required": ["postgresql"],
							"additionalProperties": false
						},

						{
							"type": "object",
							"properties": {
								"mysql": {
									"type": "object",
									"properties": {
										"host": {
											"type": "string"
										},
										"port": {
											"type": "integer",
											"minimum": 1,
											"maximum": 65535
										},
										"sslMode": {
											"type": "boolean"
										},
										"username": {
											"type": "string",
											"minLength": 1
										},
										"password": {
											"type": "string"
										},
										"database": {
											"type": "string",
											"minLength": 1
										}
									},
									"required": ["host", "port", "sslMode", "username", "password", "database"],
									"additionalProperties": false
								}
							},
							"required": ["mysql"]
						}
					],
					"additionalProperties": true
				},
				"query": {
					"type": "object",
					"properties": {
						"sql": {
							"type": "string"
						}
					},
					"required": ["sql"],
					"additionalProperties": false
				},
				"output": {
					"type": "object",
					"properties": {
						"expectedRows": {
							"type": "string",
							"enum": ["AT_LEAST_ONE", "AT_LEAST_ZERO", "AT_MOST_ONE", "EXACTLY_ONE"]
						},
						"json": {
							"type": "object",
							"properties": {
								"schema": {
									"type": "string",
									"pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*(?:-(?:0|[1-9][0-9]*)){2})$"
								},
								"propertyNames": {
									"type": "string",
									"enum": ["AS_IS", "CAMEL_CASE", "PASCAL_CASE", "SNAKE_CASE", "LOWER_CASE", "UPPER_CASE"]
								},
								"describes": {
									"type": "string",
									"enum": ["ALL_ROWS", "EVERY_ROW"]
 								}
							},
							"required": ["schema", "propertyNames", "describes"],
							"additionalProperties": false
						}
					},
					"additionalProperties": false
				},
				"cache": {
					"type": "object",
					"properties": {
						"size": {
							"type": "integer",
							"minimum": 0
						},
						"ttl": {
							"type": "integer",
							"minimum": 0,
							"maximum": 86400
						}
					},
					"additionalProperties": false,
					"required": ["size", "ttl"]
				}
			},
			"additionalProperties": false,
			"required": ["inputs", "database", "query", "output", "cache"]
		}
	},
	"additionalProperties": false,
	"required": ["name", "vendor", "enabled", "parameters"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/api_request_enrichment_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for API Request Enrichment configuration",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow.enrichments",
		"name": "api_request_enrichment_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},

		"parameters": {
			"type": "object",
			"properties": {
				"inputs": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"key": {
								"type": "string",
								"pattern": "^[A-Za-z0-9_-]+$"
							},
							"pojo": {
								"type": "object",
								"properties": {
									"field": {
										"type": "string"
									}
								},
								"additionalProperties": false
							},
							"json": {
								"type": "object",
								"properties": {
									"field": {
										"type": "string",
										"enum": ["unstruct_event", "contexts", "derived_contexts"]
									},
									"schemaCriterion": {
										"type": "string",
										"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
									},
									"jsonPath": {
										"type": "string",
										"pattern": "^\\$.*$"
									}
								},
								"additionalProperties": false
							}
						},
						"additionalProperties": false,
						"minProperties": 2,
						"maxProperties": 2,
						"required": ["key"]
					}
				},
				"api": {
					"type": "object",
					"minProperties": 1,
					"maxProperties": 1,
					"properties": {
						"http": {
							"type": "object",
							"properties": {
								"method": {
									"type": "string",
									"enum": ["GET", "POST", "PUT"]
								},
								"uri": {
									"type": "string"
								},
								"timeout": {
									"type": "integer",
									"minimum": 1,
									"maximum": 60000
								},
								"authentication": {
									"type": "object",
									"properties": {
										"httpBasic": {
											"type": "object",
											"properties": {
												"username": {
													"type": "string"
												},
												"password": {
													"type": "string"
												}
											},
											"required": ["username", "password"],
											"additionalProperties": false
										}
									},
									"additionalProperties": false
								}
							},
							"required": ["method", "uri", "timeout", "authentication"],
							"additionalProperties": false
						}
					},
					"additionalProperties": false
				},
				"outputs": {
					"type": "array",
					"minItems": 1,
					"items": {
						"type": "object",
						"properties": {
							"schema": {
								"type": "string",
								"pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*(?:-(?:0|[1-9][0-9]*)){2})$"
							},
							"json": {
								"type": "object",
								"properties": {
									"jsonPath": {
										"type": "string",
 										"pattern": "^\\$.*$"
									}
								},
								"required": ["jsonPath"],
								"additionalProperties": false
							}
						},
						"required": ["schema"],
						"minProperties": 2,
						"maxProperties": 2,
						"additionalProperties": false
					}
				},
				"cache": {
					"type": "object",
					"properties": {
						"size": {
							"type": "integer",
							"minimum": 1
						},
						"ttl": {
							"type": "integer",
							"minimum": 0,
							"maximum": 86400
						}
					},
					"additionalProperties": false,
					"required": ["size", "ttl"]
				}
			},
			"additionalProperties": false,
			"required": ["inputs", "api", "outputs", "cache"]
		}
	},
	"additionalProperties": false,
	"required": ["name", "vendor", "enabled", "parameters"]
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/api_request_enrichment_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{

	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for API Request Enrichment configuration",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow.enrichments",
		"name": "api_request_enrichment_config",
		"format": "jsonschema",
		"version": "1-0-1"
	},
	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"enabled": {
			"type": "boolean"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"inputs": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"key": {
								"type": "string",
								"pattern": "^[A-Za-z0-9_-]+$"
							},
							"pojo": {
								"type": "object",
								"properties": {
									"field": {
										"type": "string"
									}
								},
								"additionalProperties": false
							},
							"json": {
								"type": "object",
								"properties": {
									"field": {
										"type": "string",
										"enum": ["unstruct_event", "contexts", "derived_contexts"]
									},
									"schemaCriterion": {
										"type": "string",
										"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
									},
									"jsonPath": {
										"type": "string",
										"pattern": "^\\$.*$"
									}
								},
								"additionalProperties": false
							}
						},
						"additionalProperties": false,
						"minProperties": 2,
						"maxProperties": 2,
						"required": ["key"]
					}
				},
				"api": {
					"type": "object",
					"minProperties": 1,
					"maxProperties": 1,
					"properties": {
						"http": {
							"type": "object",
							"properties": {
								"method": {
									"type": "string",
									"enum": ["GET", "POST", "PUT"]
								},
								"uri": {
									"type": "string"
								},
								"timeout": {
									"type": "integer",
									"minimum": 1,
									"maximum": 60000
								},
								"authentication": {
									"type": "object",
									"properties": {
										"httpBasic": {
											"type": "object",
											"properties": {
												"username": {
													"type": "string"
												},
												"password": {
													"type": "string"
												}
											},
											"required": ["username", "password"],
											"additionalProperties": false
										}
									},
									"additionalProperties": false
								}
							},
							"required": ["method", "uri", "timeout", "authentication"],
							"additionalProperties": false
						}
					},
					"additionalProperties": false
				},
				"outputs": {
					"type": "array",
					"minItems": 1,
					"items": {
						"type": "object",
						"properties": {
							"schema": {
								"type": "string",
								"pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*(?:-(?:0|[1-9][0-9]*)){2})$"
							},
							"json": {
								"type": "object",
								"properties": {
									"jsonPath": {
										"type": "string",
 										"pattern": "^\\$.*$"
									}
								},
								"required": ["jsonPath"],
								"additionalProperties": false
							}
						},
						"required": ["schema"],
						"minProperties": 2,
						"maxProperties": 2,
						"additionalProperties": false
					}
				},
				"cache": {
					"type": "object",
					"properties": {
						"size": {
							"type": "integer",
							"minimum": 0
						},
						"ttl": {
							"type": "integer",
							"minimum": 0,
							"maximum": 86400
						}
					},
					"additionalProperties": false,
					"required": ["size", "ttl"]
				}
			},
			"additionalProperties": false,
			"required": ["inputs", "api", "outputs", "cache"]
		}
	},
	"additionalProperties": false,
	"required": ["name", "vendor", "enabled", "parameters"]
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/weather_enrichment_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for weather enrichment",
    "self": {
      "vendor": "com.snowplowanalytics.snowplow.enrichments",
      "name": "weather_enrichment_config",
      "format": "jsonschema",
      "version": "1-0-0"
    },

    "type": "object",
    "properties": {
      "vendor": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "enabled": {
        "type": "boolean"
      },
      "parameters": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "cacheSize": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000000
          },
          "geoPrecision": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10
          },
          "apiHost": {
            "type": "string"
          },
          "timeout": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": ["apiKey", "cacheSize", "geoPrecision", "apiHost", "timeout"],
        "additionalProperties": false
      }
    },
    "required": ["name", "vendor", "enabled", "parameters"],
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/pii_enrichment_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for PII pseudonymization enrichment",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.enrichments",
    "name": "pii_enrichment_config",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "vendor": {
      "type": "string"
    },
    "name": {
      "type": "string"
    },
    "enabled": {
      "type": "boolean"
    },
    "parameters": {
      "type": "object",
      "properties": {
        "pii": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "pojo": {
                "type": "object",
                "properties": {
                  "field": {
                    "enum": [
                      "user_id",
                      "user_ipaddress",
                      "user_fingerprint",
                      "domain_userid",
                      "network_userid",
                      "ip_organization",
                      "ip_domain",
                      "tr_orderid",
                      "ti_orderid",
                      "mkt_term",
                      "mkt_content",
                      "se_category",
                      "se_action",
                      "se_label",
                      "se_property",
                      "mkt_clickid",
                      "refr_domain_userid",
                      "domain_sessionid"
                    ]
                  }
                },
                "required": [
                  "field"
                ],
                "additionalProperties": false
              },
              "json": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string"
                  },
                  "schemaCriterion": {
                    "type": "string",
                    "pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
                  },
                  "jsonPath": {
                    "type": "string",
                    "pattern": "^\\$.*$"
                  }
                },
                "required": [
                  "field",
                  "schemaCriterion",
                  "jsonPath"
                ],
                "additionalProperties": false
              }
            },
            "oneOf": [
              {
                "required": [
                  "pojo"
                ]
              },
              {
                "required": [
                  "json"
                ]
              }
            ],
            "additionalProperties": false
          }
        },
        "strategy": {
          "type": "object",
          "properties": {
            "pseudonymize": {
              "type": "object",
              "properties": {
                "hashFunction": {
                  "enum": [
                    "MD2",
                    "MD5",
                    "SHA-1",
                    "SHA-256",
                    "SHA-384",
                    "SHA-512"
                  ]
                }
              },
              "required": [
                "hashFunction"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "pseudonymize"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "pii",
        "strategy"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "vendor",
    "name",
    "enabled",
    "parameters"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.enrichments/pii_enrichment_config/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for PII pseudonymization enrichment",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.enrichments",
    "name": "pii_enrichment_config",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "properties": {
    "vendor": {
      "type": "string",
      "description": "The name of the vendor for this config (the only valid value for scala-common enrich is com.snowplowanalytics.snowplow.enrichments)"
    },
    "name": {
      "type": "string",
      "description": "The name of the config (the only valid value for scala-common enrich is pii_enrichment_config)"
    },
    "enabled": {
      "type": "boolean",
      "description": "Whether to enable this enrichment"
    },
    "emitEvent": {
      "type": "boolean",
      "description": "Whether to emit identification events from this enrichment"
    },
    "parameters": {
      "type": "object",
      "properties": {
        "pii": {
          "description": "List of all the fields for which pdeudonymization will be performed",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "pojo": {
                "description": "Scalar field which contains a single string value, on which pseudonymization will be performed in the enire field (e.g. `user-123`)",
                "type": "object",
                "properties": {
                  "field": {
                    "enum": [
                      "user_id",
                      "user_ipaddress",
                      "user_fingerprint",
                      "domain_userid",
                      "network_userid",
                      "ip_organization",
                      "ip_domain",
                      "tr_orderid",
                      "ti_orderid",
                      "mkt_term",
                      "mkt_content",
                      "se_category",
                      "se_action",
                      "se_label",
                      "se_property",
                      "mkt_clickid",
                      "refr_domain_userid",
                      "domain_sessionid"
                    ]
                  }
                },
                "required": [
                  "field"
                ],
                "additionalProperties": false
              },
              "json": {
                "description": "JSON field which contains a JSON string value, on which pseudonymization will be performed on a specific JSON path",
                "type": "object",
                "properties": {
                  "field": {
                    "enum": [
                      "contexts",
                      "derived_contexts",
                      "unstruct_event"
                    ]
                  },
                  "schemaCriterion": {
                    "type": "string",
                    "pattern": "^iglu:([a-zA-Z0-9-_.]+)/([a-zA-Z0-9-_]+)/([a-zA-Z0-9-_]+)/([1-9][0-9]*|\\*)-((?:0|[1-9][0-9]*)|\\*)-((?:0|[1-9][0-9]*)|\\*)$"
                  },
                  "jsonPath": {
                    "type": "string",
                    "pattern": "^\\$.*$"
                  }
                },
                "required": [
                  "field",
                  "schemaCriterion",
                  "jsonPath"
                ],
                "additionalProperties": false
              }
            },
            "oneOf": [
              {
                "required": [
                  "pojo"
                ]
              },
              {
                "required": [
                  "json"
                ]
              }
            ],
            "additionalProperties": false
          }
        },
        "strategy": {
          "description": "The pseudonymization strategy which will be applied to all the fields specified in the `pii` section",
          "type": "object",
          "properties": {
            "pseudonymize": {
              "description": "Pseudonymization strategy that hashes using a specified algorithm",
              "type": "object",
              "properties": {
                "hashFunction": {
                  "description": "The hash function that will be used by this strategy",
                  "enum": [
                    "MD2",
                    "MD5",
                    "SHA-1",
                    "SHA-256",
                    "SHA-384",
                    "SHA-512"
                  ]
                },
                "salt": {
                  "description": "A salt that will be added to the field durring hashing",
                  "type": "string"
                }
              },
              "required": [
                "hashFunction",
                "salt"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "pseudonymize"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "pii",
        "strategy"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "vendor",
    "name",
    "enabled",
    "emitEvent",
    "parameters"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('io.augur.snowplow/identity_lite/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for the minimal subset of properties in an Augur device and consumer recognition payload",
  "self": {
    "vendor": "io.augur.snowplow",
    "name": "identity_lite",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "consumer": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": true
    },
    "device": {
      "type": "object",
      "properties": {
        "isBot": {
          "type": ["boolean", "null"]
        },
        "isTor": {
          "type": ["boolean", "null"]
        },
        "isProxied": {
          "type": ["boolean", "null"]
        },
        "isIncognito": {
          "type": ["boolean", "null"]
        },
        "ID": {
          "type": ["string", "null"]
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.maxmind/anonymous_ip/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Schema for the anonymous IP enrichment produced by Maxmind",
    "self": {
        "vendor": "com.maxmind",
        "name": "anonymous_ip",
        "format": "jsonschema",
        "version": "1-0-0"
    },

    "type": "object",
    "properties": {
        "is_anonymous": {
            "description": "True if the IP belongs to any sort of anonymous network.",
            "type": ["boolean", "null"]
        },
        "is_anonymous_vpn": {
            "description": "True if the IP address is registered to an anonymous VPN provider. If a VPN provider does not register subnets under names associated with them, we will likely only flag their IP ranges using the is_hosting_provider flag.",
            "type": ["boolean", "null"]
        },
        "is_hosting_provider": {
            "description": "True if the IP address belongs to a hosting or VPN provider (see description of is_anonymous_vpn).",
            "type": ["boolean", "null"]
        },
        "is_public_proxy": {
            "description": "True if the IP address belongs to a public prox.y",
            "type": ["boolean", "null"]
        },
        "is_tor_exit_node": {
            "description": "True if the IP address is a Tor exit node.",
            "type": ["boolean", "null"]
        }
    },
    "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.adjust/install/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for an Adjust install event",
  "self": {
          "vendor": "com.adjust",
          "name": "install",
          "format": "jsonschema",
          "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "app_id": {
          "description": "Store App ID or Google Play Store e.g 332193586; de.is24.android; C013FJP3WF",
          "type": "string",
          "maxLength": 1024
    },
    "app_name": {
          "description": "Name of the app e.g MyApp",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "app_name_dashboard": {
          "description": "Name of the app in the Adjust Dashboard e.g MyApp+Android",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "app_version": {
          "description": "App version number (Android); build-version-number for the bundle (iOS) e.g 5.13.1 (Android), 5131 (iOS)",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "store": {
          "description": "Target store of click e.g itunes; google, wstore, wphone",
          "type": ["string", "null"],
          "maxLength": 24
    },
    "adjust_tracker": {
          "description": "6-character Adjust tracker token e.g abc123",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adjust_tracker_name": {
          "description": "Current tracker name e.g Network1%3A%3AChristmas%3A%3AReindeers%3A%3A320x70_en",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "network_name": {
          "description": "Network name, as taken from the tracker e.g Network1",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "campaign_name": {
          "description": "Campaign name, as taken from the tracker e.g Christmas",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adgroup_name": {
          "description": "Adgroup name, as taken from the tracker e.g Reindeers",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "creative_name": {
          "description": "Creative name, as taken from the tracker e.g 320x70_en",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "is_impression_based": {
          "description": "1 if impression-based engagement, 0 if not e.g 1",
          "type": ["string", "null"],
          "maxLength": 1
    },
    "is_organic": {
          "description": "1 if organic traffic, 0 if non-organic e.g 0",
          "type": ["string", "null"],
          "maxLength": 1
    },
    "rejection_reason": {
          "description": "Reason for a rejected attribution e.g anonymous_traffic, distribution_outlier, too_many_engagements, engagement_injection, incorrect_signature",
          "type": ["string", "null"],
          "maxLength": 50
    },
    "click_referer": {
          "description": "Referrer header from click e.g http%3A%2F%2Fwww.example.com%2F%3Ffoo%3Dbar",
          "type": ["string", "null"],
          "maxLength": 65535
    },
    "event_name": {
          "description": "Type of user activity",
          "type": ["string", "null"],
          "enum": ["install"]
    },
    "click_time": {
          "description": "Attributed click timestamp e.g 1403568849",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "impression_time": {
          "description": "Attributed impression timestamp e.g 1403568830",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "conversion_duration": {
          "description": "Time between click and install or reattribution in seconds e.g 72",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "engagement_time": {
          "description": "Engagement timestamp e.g 1403566587",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "install_time": {
          "description": "Install (i.e., first app open) timestamp e.g 1404214634",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "install_complete_time": {
          "description": "App download completion timestamp (reported before Adjust install; Android and Google Play Store only) e.g 1441514522",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "install_begin_time": {
          "description": "App download began timestamp (Android and Google Play Store only) e.g 1502254761",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "referral_time": {
          "description": "User landed on app Play Store page timestamp (Android and Google Play Store only) e.g 1836167739",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "created_at_time": {
          "description": "Activity timestamp e.g 1404214665",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "connection_type": {
          "description": "Internet connection type e.g cellular, Cable%2FDSL, Corporate",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "click_attribution_window": {
          "description": "Attribution window settings for device matching (hours) e.g 168",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "impression_attribution_window": {
          "description": "Attribution window settings for impression matching (hours) e.g 24",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "fingerprint_attribution_window": {
          "description": "Attribution window settings for device fingerprinting (hours) e.g 18",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "adjust_device_id": {
          "description": "Adjust device ID (all platforms) e.g 18546f6171f67e29d1cb983322ad1329",
          "type": ["string", "null"],
          "maxLength": 32
    },
    "apple_idfa": {
          "description": "ID for advertisers (iOS only) e.g 8C6CBCOD-5F43-4765-A6E6-84DFF3D24707",
          "type": ["string", "null"],
          "maxLength": 36
    },
    "android_id": {
          "description": "Android ID (Android only) e.g 3accef2d7286d0de",
          "type": ["string", "null"],
          "maxLength": 16
    },
    "mac_sha1": {
          "description": "Uppercase MAC SHA-1 hash e.g 282f2e4d6324ed731ee1ca4179deb6603f2bc5bc",
          "type": ["string", "null"],
          "maxLength": 40
    },
    "mac_md5": {
          "description": "Uppercase MAC MD5 hash e.g 098f6bcd4621d373cade4e832627b4f6",
          "type": ["string", "null"],
          "maxLength": 32
    },
    "apple_idfv": {
          "description": "Uppercase iOS ID for vendors e.g CCB300A0-DE1B-4D48-BC7E-599E453B8DD4",
          "type": ["string", "null"],
          "maxLength": 36
    },
    "gplay_ad_id": {
          "description": "Google Play Store advertising ID e.g 38400000-8cf0-11bd-b23e-10b96e40000d",
          "type": ["string", "null"],
          "maxLength": 36
    },
    "windows_phone_udid": {
          "description": "Windows Phone unique device ID e.g e81644f1-46b6-4994-2903-1d1f1440c130",
          "type": ["string", "null"],
          "maxLength": 36
    },
    "windows_store_hwid": {
          "description": "Windows Store hardware ID e.g JKJbFwIArpGAGDmcBTAvlAUMKJkHAMoSCADlJQkDHWG",
          "type": ["string", "null"],
          "maxLength": 43
    },
    "windows_store_naid": {
          "description": "Windows Store network adapter ID e.g 5978aed4-82e5-28cf-8364-dfc64cb1fb84",
          "type": ["string", "null"],
          "maxLength": 36
    },
    "windows_ad_id": {
          "description": "Windows advertising identifier e.g 107e8ea14329d4a2194ebbb6dc0c0fd7",
          "type": ["string", "null"],
          "maxLength": 32
    },
    "fire_os_ad_id": {
          "description": "Fire OS advertising identifier e.g 63c5519b-7e66-7ee6-aa5d-3b290743811f",
          "type": ["string", "null"],
          "maxLength": 36
    },
    "attribution_type": {
          "description": "Attribution method e.g fingerprint, device_tag, reftag, google, facebook",
          "type": ["string", "null"],
          "maxLength": 24
    },
    "gplay_referer": {
          "description": "Google Play Store referrer (Android only) e.g APPIA142157299513371854693246846",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "ip_address": {
          "description": "Device IP address e.g 8.8.8.8",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "isp": {
          "description": "Device internet service provider e.g Verizon Internet",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "country": {
          "description": "Device two-character country code e.g us",
          "type": ["string", "null"],
          "maxLength": 2
    },
    "country_subdivision": {
          "description": "Device subdivision of country, e.g., state e.g Calfornia",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "city": {
          "description": "Device city e.g Berlin",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "postal_code": {
          "description": "Device postal code of IP address e.g 12101",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "language_code": {
          "description": "Device two-character language code e.g en",
          "type": ["string", "null"],
          "maxLength": 2
    },
    "device_name": {
          "description": "Device model number e.g SM-G313HZ",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "device_type": {
          "description": "Device type e.g phone, tablet",
          "type": ["string", "null"],
          "maxLength": 20
    },
    "os_name": {
          "description": "Device operating system e.g ios",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "api_level": {
          "description": "API level (Android only) e.g 13",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "sdk_version": {
          "description": "Adjust SDK version (per app) e.g ios4.1.4",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "os_version": {
          "description": "Operating system version number e.g 7.1.3",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "environment": {
          "description": "Current Adjust SDK environment setting e.g production, sandbox",
          "type": ["string", "null"],
          "maxLength": 24
    },
    "tracking_enabled": {
          "description": "1 if tracking is enabled, 0 if not e.g 1",
          "type": ["string", "null"],
          "maxLength": 1
    },
    "tracking_limited": {
          "description": "1 if tracking is limited, 0 if not e.g 0",
          "type": ["string", "null"],
          "maxLength": 1
    },
    "device_timezone": {
          "description": "Device time zone e.g UTC+0400",
          "type": ["string", "null"],
          "maxLength": 10
    },
    "deeplink": {
          "description": "Deeplink URL appended to click URL e.g myapp://product?id=650",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "partner_parameters": {
          "description": "Custom partner parameters collected by the Adjust SDK and transmitted to third party providers via postbacks e.g client_id",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "cost_type": {
          "description": "Type of ad spend being tracked (available for ad spend tracking only)* e.g CPI",
          "type": ["string", "null"],
          "maxLength": 8
    },
    "cost_amount": {
          "description": "Cost of the user engagement (available for ad spend tracking only)* e.g 4.99 ($4.99)",
          "type": ["string", "null"],
          "maxLength": 500
    },
    "cost_currency": {
          "description": "ISO 4217 currency code of the cost data (available for ad spend tracking only)* e.g USD",
          "type": ["string", "null"],
          "maxLength": 3
    },
    "google_click_id": {
          "description": "Google click ID e.g undefined",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_campaign_type": {
          "description": "Google AdWords campaign type e.g UAC; Search; Display; Video",
          "type": ["string", "null"],
          "maxLength": 24
    },
    "adwords_campaign_name": {
          "description": "Google AdWords campaign name e.g iOS+UAC+US+re-engagement",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_campaign_id": {
          "description": "Google AdWords campaign ID e.g 12345678",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_adgroup_id": {
          "description": "Google AdWords adgroup ID e.g 123456",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_creative_id": {
          "description": "Google AdWords creative ID e.g 174021879258",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_network_type": {
          "description": "Google AdWords network type e.g Display; Search",
          "type": ["string", "null"],
          "maxLength": 24
    },
    "adwords_network_subtype": {
          "description": "Google AdWords network subtype e.g GoogleSearch; AdMob",
          "type": ["string", "null"],
          "maxLength": 24
    },
    "adwords_keyword": {
          "description": "Google AdWords search keyword e.g hotel",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_matchtype": {
          "description": "Google AdWords search keyword and match type e.g hotel_Broad",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_placement": {
          "description": "Google AdWords ad placement e.g mobile_app - 1",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_video_id": {
          "description": "Google AdWords video ID e.g 98765456784",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "adwords_search_term": {
          "description": "Google organic search term e.g sisyphos",
          "type": ["string", "null"],
          "maxLength": 2000
    },
    "fb_campaign_group_name": {
          "description": "Facebook campaign name e.g DPA-PPM_SKU_PPM",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_campaign_group_id": {
          "description": "Facebook campaign ID e.g 23842588848920296",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_campaign_name": {
          "description": "Facebook ad set name e.g MyApp Promos",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_campaign_id": {
          "description": "Facebook ad set ID e.g 23842594106430661",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_adgroup_name": {
          "description": "Facebook ad name e.g MyApp Summer Promo",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_adgroup_id": {
          "description": "Facebook ad ID e.g 23842594106590661",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_ad_objective_name": {
          "description": "Facebook advertising objective e.g Post engagement",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_account_id": {
          "description": "Facebook ad account ID that created the ad e.g 123456789",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "fb_platform_position": {
          "description": "Facebook platform position e.g rewarded_video",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "tweet_id": {
          "description": "Unique tweet ID e.g 852130056168247296",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "twitter_line_item_id": {
          "description": "Twitter line item ID e.g 7zpix",
          "type": ["string", "null"],
          "maxLength": 1024
    },
    "apple_ad_conversion_type": {
          "description": "Download status: first or subsequent app download e.g Download; Redownload",
          "type": ["string", "null"],
          "maxLength": 24
    },
    "apple_ad_keyword_matchtype": {
          "description": "Apple Search keyword matchtype e.g Broad; Exact",
          "type": ["string", "null"],
          "maxLength": 24
    }
  },
  "minProperties": 1,
  "required": ["app_id"],
  "additionalProperties": true
  }
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/elastic_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Elasticsearch storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "elastic_config",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "index": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "type": {
            "type": "string"
        },
        "nodesWanOnly": {
            "type": "boolean"
        },
        "purpose": {
            "type": "string",
            "enum": ["FAILED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "index", "port", "type", "nodesWanOnly", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/elastic_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Elasticsearch storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "elastic_config",
        "format": "jsonschema",
        "version": "1-0-1"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "index": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "type": {
            "type": "string"
        },
        "nodesWanOnly": {
            "type": "boolean"
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["FAILED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "index", "port", "type", "nodesWanOnly", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/bigquery_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Google BigQuery storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "bigquery_config",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "description": "Human-readable storage target name, used only for logging",
            "type": "string"
        },
        "id": {
            "description": "Machine-readable unique identifier",
            "type": "string",
            "format": "uuid"
        },
        "projectId": {
            "description": "GCP project id",
            "type": "string"
        },
        "input": {
            "description": "Google PubSub subscription name with enriched TSV data",
            "type": "string",
            "minLength": 3,
            "maxLength": 255
        },
        "datasetId": {
            "description": "BigQuery dataset id",
            "type": "string"
        },
        "tableId": {
            "description": "BigQuery table id",
            "type": "string"
        },
        "load": {
            "description": "Loading mode and associated settings",
            "type": "object",
            "required": ["mode"],
            "oneOf": [
                {
                    "required": ["retry"],
                    "properties": {
                        "mode": {
                            "enum": ["STREAMING_INSERTS"]
                        },
                        "retry": {
                            "description": "Whether transient failures should be retried or sent straight to failedInserts topic",
                            "type": "boolean"
                        }
                    }
                },
                {
                    "required": ["frequency"],
                    "properties": {
                        "mode": {
                            "enum": ["FILE_LOADS"]
                        },
                        "frequency": {
                            "description": "Frequency of load jobs, in seconds",
                            "type": "integer",
                            "minimum": 100,
                            "maximum": 86400
                        }
                    }
                }
            ]
        },
        "typesTopic": {
            "description": "Google PubSub topic name for sending observed types",
            "type": "string"
        },
        "typesSubscription": {
            "description": "Google PubSub subscription name where Mutator gets observed types",
            "type": "string",
            "minLength": 3,
            "maxLength": 255
        },
        "badRows": {
            "description": "Google PubSub topic name to sink rows that were couldn't be transformed to TableRow",
            "type": "string",
            "minLength": 3,
            "maxLength": 255
        },
        "failedInserts": {
            "description": "Google PubSub topic name to sink rows that were couldn't be inserted into BigQuery (due not existing column or service outage)",
            "type": "string",
            "minLength": 3,
            "maxLength": 255
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "id", "projectId", "input", "datasetId", "tableId", "load", "typesTopic", "badRows", "failedInserts", "typesSubscription", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/amazon_dynamodb_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Amazon DynamoDB storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "amazon_dynamodb_config",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "accessKeyId": {
            "type": "string"
        },
        "secretAccessKey": {
            "type": "string"
        },
        "awsRegion": {
            "type": "string"
        },
        "dynamodbTable": {
            "type": "string"
        },
        "purpose": {
            "type": "string",
            "enum": ["DUPLICATE_TRACKING"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "accessKeyId", "secretAccessKey", "awsRegion", "dynamodbTable", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/amazon_dynamodb_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Amazon DynamoDB storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "amazon_dynamodb_config",
        "format": "jsonschema",
        "version": "1-0-1"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "accessKeyId": {
            "type": "string"
        },
        "secretAccessKey": {
            "type": "string"
        },
        "awsRegion": {
            "type": "string"
        },
        "dynamodbTable": {
            "type": "string"
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["DUPLICATE_TRACKING"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "accessKeyId", "secretAccessKey", "awsRegion", "dynamodbTable", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/amazon_dynamodb_config/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Amazon DynamoDB storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "amazon_dynamodb_config",
        "format": "jsonschema",
        "version": "2-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "auth": {
            "description": "Authentication method for Events Manifest",
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "accessKeyId": {
                            "type": "string"
                        },
                        "secretAccessKey": {
                            "type": "string"
                        }
                    },
                    "required": ["accessKeyId", "secretAccessKey"]
                },
                {
                    "type": "null"
                }
            ]
        },
        "awsRegion": {
            "type": "string"
        },
        "dynamodbTable": {
            "type": "string"
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["EVENTS_MANIFEST"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "auth", "awsRegion", "dynamodbTable", "id", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/postgresql_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow PostgreSQL storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "postgresql_config",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "sslMode": {
            "type": "string",
            "enum": ["DISABLE", "REQUIRE", "VERIFY_CA", "VERIFY_FULL"]
        },
        "schema": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": "string"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "database", "port", "sslMode", "schema", "username", "password", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/postgresql_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow PostgreSQL storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "postgresql_config",
        "format": "jsonschema",
        "version": "1-0-1"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "sslMode": {
            "type": "string",
            "enum": ["DISABLE", "REQUIRE", "VERIFY_CA", "VERIFY_FULL"]
        },
        "schema": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": "string"
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "database", "port", "sslMode", "schema", "username", "password", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/postgresql_config/jsonschema/1-1-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow PostgreSQL storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "postgresql_config",
        "format": "jsonschema",
        "version": "1-1-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "sslMode": {
            "type": "string",
            "enum": ["DISABLE", "REQUIRE", "VERIFY_CA", "VERIFY_FULL"]
        },
        "schema": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": ["string", "object"],
            "properties": {
                "ec2ParameterStore": {
                    "type": "object",
                    "properties": {
                        "parameterName": {
                            "type": "string"
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "sshTunnel": {
            "type": ["object", "null"],
            "properties": {
                "bastion": {
                    "type": "object",
                    "properties": {
                        "host": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        },
                        "user": {
                            "type": "string"
                        },
                        "passphrase": {
                            "type": "string"
                        },
                        "key": {
                            "type": "object",
                            "properties": {
                                "ec2ParameterStore": {
                                    "type": "object",
                                    "properties": {
                                        "parameterName": {
                                            "type": "string"
                                        }
                                    },
                                    "required": ["parameterName"]
                                }
                            },
                            "required": ["ec2ParameterStore"]
                        }
                    },
                    "required": ["host", "port", "user"]
                },
                "destination": {
                    "type": "object",
                    "properties": {
                        "host": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        }
                    },
                    "required": ["host", "port"]
                },
                "localPort": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535
                }
            },
            "required": ["bastion", "destination", "localPort"]
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "database", "port", "sslMode", "schema", "username", "password", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/postgresql_config/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow PostgreSQL storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "postgresql_config",
        "format": "jsonschema",
        "version": "2-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "description": "Human-readable storage target name, used only for logging",
            "type": "string",
            "maxLength": 255
        },
        "id": {
            "description": "Machine-readable unique identificator",
            "type": "string",
            "format": "uuid"
        },
        "host": {
            "description": "PostgreSQL host ('localhost' for enabled SSH Tunnel)",
            "type": "string",
            "anyOf": [
                { "format": "hostname" },
                { "format": "ipv4" },
                { "format": "ipv6" }
            ]
        },
        "database": {
            "description": "PostgreSQL database name",
            "type": "string",
            "minLength": 1,
            "maxLength": 64
        },
        "port": {
            "description": "PostgreSQL database port",
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "username": {
            "description": "PostgreSQL user used to load data",
            "type": "string",
            "maxLength": 64
        },
        "password": {
            "description": "PostgreSQL password, either plain-text or encrypted key for EC2 Parameter Storage",
            "type": ["string", "object"],
            "properties": {
                "ec2ParameterStore": {
                    "description": "EC2 Parameter Storage configuration",
                    "type": "object",
                    "properties": {
                        "parameterName": {
                            "description": "EC2 Parameter with encrypted password",
                            "type": "string"
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "schema": {
            "description": "PostgreSQL database schema (e.g. 'atomic')",
            "type": "string",
            "maxLength": 64
        },
        "sshTunnel": {
            "description": "Optional SSH Tunnel configuration",
            "type": ["object", "null"],
            "properties": {
                "bastion": {
                    "description": "Bastion host configuration",
                    "type": "object",
                    "properties": {
                        "host": {
                            "description": "Bastion SSH host",
                            "type": "string",
                            "anyOf": [
                                { "format": "hostname" },
                                { "format": "ipv4" },
                                { "format": "ipv6" }
                            ]
                        },
                        "port": {
                            "description": "Bastion SSH port",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        },
                        "user": {
                            "description": "SSH user",
                            "type": "string"
                        },
                        "passphrase": {
                            "description": "Plain-text SSH user's passphrase",
                            "type": ["string", "null"],
                            "maxLength": 2048
                        },
                        "key": {
                            "description": "SSH-key stored in EC2 Parameter Storage",
                            "type": ["object", "null"],
                            "properties": {
                                "ec2ParameterStore": {
                                    "type": "object",
                                    "properties": {
                                        "parameterName": {
                                            "type": "string",
                                            "maxLength": 2048
                                        }
                                    },
                                    "required": ["parameterName"]
                                }
                            },
                            "required": ["ec2ParameterStore"]
                        }
                    },
                    "required": ["host", "port", "user", "passphrase", "key"]
                },
                "destination": {
                    "description": "Database socket inside private network",
                    "type": "object",
                    "properties": {
                        "host": {
                            "description": "PostgreSQL host inside private network (root-level host should be changed to 'localhost')",
                            "type": "string",
                            "anyOf": [
                                { "format": "hostname" },
                                { "format": "ipv4" },
                                { "format": "ipv6" }
                            ]
                        },
                        "port": {
                            "description": "PostgreSQL port inside private network (root-level port should be changed to be indentical to 'localPort')",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        }
                    },
                    "required": ["host", "port"]
                },
                "localPort": {
                    "description": "Arbitrary port on node, running Loader (shoul be identical to root-level 'port')",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535
                }
            },
            "required": ["bastion", "destination", "localPort"]
        },
        "processingManifest": {
            "description": "Optional processing manifest to maintain pipeline state",
            "type": ["object", "null"],
            "properties": {
                "amazonDynamoDb": {
                    "description": "Configuration for processing manifest on top of DynamoDB - single available implementation",
                    "type": "object",
                    "properties": {
                        "tableName": {
                            "description": "DynamoDB table name",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 255
                        }
                    },
                    "required": ["tableName"]
                }
            },
            "required": ["amazonDynamoDb"]
        },
        "sslMode": {
            "description": "JDBC sslMode",
            "type": "string",
            "enum": ["DISABLE", "REQUIRE", "VERIFY_CA", "VERIFY_FULL"]
        },
        "purpose": {
            "description": "Kind of data stored in this instance",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "id", "host", "database", "port", "username", "password", "schema", "sshTunnel", "processingManifest", "sslMode", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/shredding_complete/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Message with batch metadata, passed from Shredder to Loader",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.storage",
    "name": "shredding_complete",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "base": {
      "description": "Blob storage path to the root of the batch",
      "type": "string",
      "format": "uri",
      "maxLength": 1024
    },
    "compression": {
      "description": "File compression type",
      "enum": ["GZIP", "NONE"]
    },
    "types": {
      "description": "Set of Iglu URIs and the format they were shredded into",
      "type": "array",
      "items": {
        "properties": {
          "schemaKey": {
            "description": "Iglu URI",
            "type": "string",
            "maxLength": 256
          },
          "format": {
            "description": "File format in which the entities were shredded to",
            "enum": ["TSV", "JSON"]
          }
        },
        "required": ["schemaKey", "format"]
      }
    },
    "timestamps": {
      "description": "Set of timestampts associated with the batch",
      "type": "object",
      "properties": {
        "jobStarted": {
          "description": "Time when the batch started being shredded",
          "type": "string",
          "format": "date-time"
        },
        "jobCompleted": {
          "description": "Time when the batch shredding has been finished (and the message being prepared)",
          "type": "string",
          "format": "date-time"
        },
        "min": {
          "description": "The earliest collector_stamp available in the batch",
          "type": ["string", "null"],
          "format": "date-time"
        },
        "max": {
          "description": "The latest collector_tstamp available in the batch",
          "type": ["string", "null"],
          "format": "date-time"
        }
      },
      "required": ["jobStarted", "jobCompleted", "min", "max"]
    },
    "processor": {
      "description": "Identificator of a shredder sent the message",
      "type": "object",
      "properties": {
        "artifact": {
          "description": "Name of the artifact",
          "type": "string",
          "maxLength": 64
        },
        "version": {
          "description": "Semantic Version of the artifact",
          "type": "string",
          "maxLength": 16
        }
      },
      "required": ["artifact", "version"]
    }
  },
  "required": ["base", "compression", "types", "timestamps", "processor"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/shredding_complete/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Message with batch metadata, passed from Shredder to Loader",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.storage",
    "name": "shredding_complete",
    "format": "jsonschema",
    "version": "1-0-1"
  },
  "type": "object",
  "properties": {
    "base": {
      "description": "Blob storage path to the root of the batch",
      "type": "string",
      "format": "uri",
      "maxLength": 1024
    },
    "compression": {
      "description": "File compression type",
      "enum": ["GZIP", "NONE"]
    },
    "types": {
      "description": "Set of Iglu URIs and the format they were shredded into",
      "type": "array",
      "items": {
        "properties": {
          "schemaKey": {
            "description": "Iglu URI",
            "type": "string",
            "maxLength": 256
          },
          "format": {
            "description": "File format in which the entities were shredded to",
            "enum": ["TSV", "JSON"]
          }
        },
        "required": ["schemaKey", "format"]
      }
    },
    "timestamps": {
      "description": "Set of timestampts associated with the batch",
      "type": "object",
      "properties": {
        "jobStarted": {
          "description": "Time when the batch started being shredded",
          "type": "string",
          "format": "date-time"
        },
        "jobCompleted": {
          "description": "Time when the batch shredding has been finished (and the message being prepared)",
          "type": "string",
          "format": "date-time"
        },
        "min": {
          "description": "The earliest collector_stamp available in the batch",
          "type": ["string", "null"],
          "format": "date-time"
        },
        "max": {
          "description": "The latest collector_tstamp available in the batch",
          "type": ["string", "null"],
          "format": "date-time"
        }
      },
      "required": ["jobStarted", "jobCompleted", "min", "max"]
    },
    "processor": {
      "description": "Identificator of a shredder sent the message",
      "type": "object",
      "properties": {
        "artifact": {
          "description": "Name of the artifact",
          "type": "string",
          "maxLength": 64
        },
        "version": {
          "description": "Semantic Version of the artifact",
          "type": "string",
          "maxLength": 16
        }
      },
      "required": ["artifact", "version"]
    },
    "count": {
      "description": "Count of events in the batch, null means the count could not be calculated",
      "type": ["object", "null"],
      "properties": {
        "good": {
          "description": "Amount of good events in the batch",
          "type": "integer",
          "minimum": 0
        }
      }
    }
  },
  "required": ["base", "compression", "types", "timestamps", "processor"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/shredding_complete/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Message with batch metadata, passed from Shredder to Loader",
  "self": {
    "vendor": "com.snowplowanalytics.snowplow.storage",
    "name": "shredding_complete",
    "format": "jsonschema",
    "version": "2-0-0"
  },
  "type": "object",
  "properties": {
    "base": {
      "description": "Blob storage path to the root of the batch",
      "type": "string",
      "format": "uri",
      "maxLength": 1024
    },
    "compression": {
      "description": "File compression type",
      "enum": ["GZIP", "NONE"]
    },
    "typesInfo": {
      "description": "Info about schemas used in events and output formats in the respective batch",
      "type": "object",
      "oneOf": [
        {
          "properties": {
            "transformation": {
              "description": "Type of the transformation",
              "enum": ["SHREDDED"]
            },
            "types": {
              "description": "Set of Iglu URIs and the format they were shredded into",
              "type": "array",
              "items": {
                "properties": {
                  "schemaKey": {
                    "description": "Iglu URI",
                    "type": "string",
                    "maxLength": 256
                  },
                  "format": {
                    "description": "File format into which the entities were shredded",
                    "enum": ["TSV", "JSON"]
                  },
                  "snowplowEntity": {
                    "description": "Type of the self-describing JSONs in the event",
                    "enum": ["SELF_DESCRIBING_EVENT", "CONTEXT"]
                  }
                },
                "required": ["schemaKey", "format", "snowplowEntity"],
                "additionalProperties": false
              }
            }
          },
          "required": ["transformation", "types"],
          "additionalProperties": false
        },
        {
          "properties": {
            "transformation": {
              "description": "Type of the transformation",
              "enum": ["WIDEROW"]
            },
            "fileFormat": {
              "description": "Output file format",
              "enum": ["JSON", "PARQUET"]
            },
            "types": {
              "description": "Set of Iglu URIs and the format they were shredded into",
              "type": "array",
              "items": {
                "properties": {
                  "schemaKey": {
                    "description": "Iglu URI",
                    "type": "string",
                    "maxLength": 256
                  },
                  "snowplowEntity": {
                    "description": "Type of the self-describing JSONs in the event",
                    "enum": ["SELF_DESCRIBING_EVENT", "CONTEXT"]
                  }
                },
                "required": ["schemaKey", "snowplowEntity"],
                "additionalProperties": false
              }
            }
          },
          "required": ["transformation", "fileFormat", "types"],
          "additionalProperties": false
        }
      ]
    },
    "timestamps": {
      "description": "Set of timestampts associated with the batch",
      "type": "object",
      "properties": {
        "jobStarted": {
          "description": "Time when the batch started being shredded",
          "type": "string",
          "format": "date-time"
        },
        "jobCompleted": {
          "description": "Time when the batch shredding has been finished (and the message being prepared)",
          "type": "string",
          "format": "date-time"
        },
        "min": {
          "description": "The earliest collector_stamp available in the batch",
          "type": ["string", "null"],
          "format": "date-time"
        },
        "max": {
          "description": "The latest collector_tstamp available in the batch",
          "type": ["string", "null"],
          "format": "date-time"
        }
      },
      "required": ["jobStarted", "jobCompleted", "min", "max"]
    },
    "processor": {
      "description": "Identificator of a shredder sent the message",
      "type": "object",
      "properties": {
        "artifact": {
          "description": "Name of the artifact",
          "type": "string",
          "maxLength": 64
        },
        "version": {
          "description": "Semantic Version of the artifact",
          "type": "string",
          "maxLength": 16
        }
      },
      "required": ["artifact", "version"]
    },
    "count": {
      "description": "Count of events in the batch, null means the count could not be calculated",
      "type": ["object", "null"],
      "properties": {
        "good": {
          "description": "Amount of good events in the batch",
          "type": "integer",
          "minimum": 0
        }
      }
    }
  },
  "required": ["base", "compression", "typesInfo", "timestamps", "processor"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/snowflake_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Snowflake storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "snowflake_config",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "auth": {
            "description": "Authentication method for Snowflake Load",
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "accessKeyId": {
                            "type": "string"
                        },
                        "secretAccessKey": {
                            "type": "string"
                        }
                    },
                    "required": ["accessKeyId", "secretAccessKey"]
                },
                {
                    "type": "object",
                    "properties": {
                        "roleArn": {
                            "type": ["string", "null"],
                            "minLength": 20
                        },
                        "sessionDuration": {
                            "type": "integer",
                            "minimum": 900
                        }
                    },
                    "required": ["roleArn", "sessionDuration"]
                },
                {
                    "type": "null"
                }
            ]
        },
        "awsRegion": {
            "type": "string"
        },
        "manifest": {
            "type": "string"
        },
        "snowflakeRegion": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "account": {
            "type": "string"
        },
        "warehouse": {
            "type": "string"
        },
        "schema": {
            "type": "string"
        },
        "input": {
            "type": "string",
            "format": "uri"
        },
        "stage": {
            "type": "string"
        },
        "stageUrl": {
            "type": "string",
            "format": "uri"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": ["string", "object"],
            "properties": {
                "ec2ParameterStore": {
                    "type": "object",
                    "properties": {
                        "parameterName": {
                            "type": "string"
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "auth", "awsRegion", "manifest", "snowflakeRegion", "database", "account", "warehouse", "input", "stage", "stageUrl", "username", "password", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/snowflake_config/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Snowflake storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "snowflake_config",
        "format": "jsonschema",
        "version": "1-0-1"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "auth": {
            "description": "Authentication method for Snowflake Load",
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "accessKeyId": {
                            "type": "string"
                        },
                        "secretAccessKey": {
                            "type": "string"
                        }
                    },
                    "required": ["accessKeyId", "secretAccessKey"]
                },
                {
                    "type": "object",
                    "properties": {
                        "roleArn": {
                            "type": ["string", "null"],
                            "minLength": 20
                        },
                        "sessionDuration": {
                            "type": "integer",
                            "minimum": 900
                        }
                    },
                    "required": ["roleArn", "sessionDuration"]
                },
                {
                    "type": "null"
                }
            ]
        },
        "awsRegion": {
            "type": "string"
        },
        "manifest": {
            "type": "string"
        },
        "snowflakeRegion": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "account": {
            "type": "string"
        },
        "warehouse": {
            "type": "string"
        },
        "schema": {
            "type": "string"
        },
        "input": {
            "type": "string",
            "format": "uri"
        },
        "stage": {
            "type": "string"
        },
        "stageUrl": {
            "type": "string",
            "format": "uri"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": ["string", "object"],
            "properties": {
                "ec2ParameterStore": {
                    "type": "object",
                    "properties": {
                        "parameterName": {
                            "type": "string"
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "maxError": {
            "type": "integer"
        },
        "jdbcHost": {
            "type": "string"
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "auth", "awsRegion", "manifest", "snowflakeRegion", "database", "account", "warehouse", "input", "stage", "stageUrl", "username", "password", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/snowflake_config/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Snowflake storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "snowflake_config",
        "format": "jsonschema",
        "version": "1-0-2"
    },
    "type": "object",
    "properties": {
        "name": {
            "description": "Human-readable configuration name",
            "type": "string"
        },
        "auth": {
            "description": "Authentication method for Snowflake Load",
            "oneOf": [
                {
                    "type": "object",
                    "description": "Static AWS credentials",
                    "properties": {
                        "accessKeyId": {
                            "description": "accessKeyId of static AWS credentials",
                            "type": "string"
                        },
                        "secretAccessKey": {
                            "description": "secretAccessKey of static AWS credentials",
                            "type": "string"
                        }
                    },
                    "required": ["accessKeyId", "secretAccessKey"]
                },
                {
                    "type": "object",
                    "description": "Temporary credentials",
                    "properties": {
                        "roleArn": {
                            "description": "roleArn of temporary credentials",
                            "type": ["string", "null"],
                            "minLength": 20
                        },
                        "sessionDuration": {
                            "description": "sessionDuration of temporary credentials",
                            "type": "integer",
                            "minimum": 900
                        }
                    },
                    "required": ["roleArn", "sessionDuration"]
                },
                {
                    "type": "null"
                }
            ]
        },
        "awsRegion": {
            "description": "AWS Region used by Transformer to access S3 and DynamoDB",
            "type": "string"
        },
        "manifest": {
            "description": "AWS DynamoDB table name with processing manifest. Needs to be created manually e.g. snowflake-event-manifest",
            "type": "string"
        },
        "snowflakeRegion": {
            "description": "AWS Region used by Snowflake to access its endpoint. Recommended to use same as $AWS_REGION if possible",
            "type": "string"
        },
        "database": {
            "description": "Snowflake Database name. Database must be created manually e.g. acme-snowplow",
            "type": "string"
        },
        "account": {
            "description": "Snowflake account name. Must be obtained from Snowflake",
            "type": "string"
        },
        "warehouse": {
            "description": "Snowflake Warehouse. Warehouse automatically created during setup step e.g. snowplow_wh",
            "type": "string"
        },
        "schema": {
            "description": "Snowflake DB schema. Schema automatically created during setup step e.g. atomic",
            "type": "string"
        },
        "input": {
            "description": "S3 URL to Snowplow enriched events archive e.g. s3://com-acme-snowplow/archive/enriched/",
            "type": "string",
            "format": "uri"
        },
        "stage": {
            "description": "Arbitrary name for Snowflake Stage. Stage created automatically during setup step e.g. snowplow_stage",
            "type": "string"
        },
        "stageUrl": {
            "description": "URL for Transformer-processed data e.g. s3://com-acme-snowplow/snowflake/stage/",
            "type": "string",
            "format": "uri"
        },
        "badOutputUrl": {
            "description": "URL for bad rows e.g. s3://com-acme-snowplow/snowflake/badrow",
            "type": "string",
            "format": "uri"
        },
        "username": {
            "description": "Snowflake username. Must be obtained from Snowflake",
            "type": "string"
        },
        "password": {
            "type": ["string", "object"],
            "description": "Password which can be passed in two forms: plain string or ec2ParameterStore",
            "properties": {
                "ec2ParameterStore": {
                    "type": "object",
                    "description": "ec2ParameterStore object as password. Password will be safely stored in EC2 Parameter store and not exposed",
                    "properties": {
                        "parameterName": {
                            "type": "string"
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "maxError": {
            "description": "Optional Snowflake setting - a table copy statement will skip an input file when the number of errors in it exceeds the specified number",
            "type": "integer"
        },
        "jdbcHost": {
            "description": "An optional host for the JDBC driver that has priority over automatically derived hosts",
            "type": "string"
        },
        "id": {
            "description": "Optional machine-readable configuration id",
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "auth", "awsRegion", "manifest", "snowflakeRegion", "database", "account", "warehouse", "input", "stage", "stageUrl", "username", "password", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/snowflake_config/jsonschema/1-0-3', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Snowflake storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "snowflake_config",
        "format": "jsonschema",
        "version": "1-0-3"
    },
    "type": "object",
    "properties": {
        "name": {
            "description": "Human-readable configuration name",
            "type": "string"
        },
        "auth": {
            "description": "Authentication method for Snowflake Load",
            "oneOf": [
                {
                    "type": "object",
                    "description": "Static AWS credentials",
                    "properties": {
                        "accessKeyId": {
                            "description": "accessKeyId of static AWS credentials",
                            "type": "string"
                        },
                        "secretAccessKey": {
                            "description": "secretAccessKey of static AWS credentials",
                            "type": "string"
                        }
                    },
                    "required": ["accessKeyId", "secretAccessKey"]
                },
                {
                    "type": "object",
                    "description": "Temporary credentials",
                    "properties": {
                        "roleArn": {
                            "description": "roleArn of temporary credentials",
                            "type": ["string", "null"],
                            "minLength": 20
                        },
                        "sessionDuration": {
                            "description": "sessionDuration of temporary credentials",
                            "type": "integer",
                            "minimum": 900
                        }
                    },
                    "required": ["roleArn", "sessionDuration"]
                },
                {
                    "type": "null"
                },
                {
                    "type": "object",
                    "description": "Snowflake Storage Integration",
                    "properties": {
                        "integrationName": {
                            "description": "Name of the storage integration",
                            "type": "string"
                        }
                    },
                    "required": ["integrationName"]
                }
            ]
        },
        "awsRegion": {
            "description": "AWS Region used by Transformer to access S3 and DynamoDB",
            "type": "string"
        },
        "manifest": {
            "description": "AWS DynamoDB table name with processing manifest. Needs to be created manually e.g. snowflake-event-manifest",
            "type": "string"
        },
        "snowflakeRegion": {
            "description": "AWS Region used by Snowflake to access its endpoint. Recommended to use same as $AWS_REGION if possible",
            "type": "string"
        },
        "database": {
            "description": "Snowflake Database name. Database must be created manually e.g. acme-snowplow",
            "type": "string"
        },
        "account": {
            "description": "Snowflake account name. Must be obtained from Snowflake",
            "type": "string"
        },
        "warehouse": {
            "description": "Snowflake Warehouse. Warehouse automatically created during setup step e.g. snowplow_wh",
            "type": "string"
        },
        "schema": {
            "description": "Snowflake DB schema. Schema automatically created during setup step e.g. atomic",
            "type": "string"
        },
        "input": {
            "description": "S3 URL to Snowplow enriched events archive e.g. s3://com-acme-snowplow/archive/enriched/",
            "type": "string",
            "format": "uri"
        },
        "stage": {
            "description": "Arbitrary name for Snowflake Stage. Stage created automatically during setup step e.g. snowplow_stage",
            "type": "string"
        },
        "stageUrl": {
            "description": "URL for Transformer-processed data e.g. s3://com-acme-snowplow/snowflake/stage/",
            "type": "string",
            "format": "uri"
        },
        "badOutputUrl": {
            "description": "URL for bad rows e.g. s3://com-acme-snowplow/snowflake/badrow",
            "type": "string",
            "format": "uri"
        },
        "username": {
            "description": "Snowflake username. Must be obtained from Snowflake",
            "type": "string"
        },
        "password": {
            "type": ["string", "object"],
            "description": "Password which can be passed in two forms: plain string or ec2ParameterStore",
            "properties": {
                "ec2ParameterStore": {
                    "type": "object",
                    "description": "ec2ParameterStore object as password. Password will be safely stored in EC2 Parameter store and not exposed",
                    "properties": {
                        "parameterName": {
                            "type": "string"
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "maxError": {
            "description": "Optional Snowflake setting - a table copy statement will skip an input file when the number of errors in it exceeds the specified number",
            "type": "integer"
        },
        "jdbcHost": {
            "description": "An optional host for the JDBC driver that has priority over automatically derived hosts",
            "type": "string"
        },
        "id": {
            "description": "Optional machine-readable configuration id",
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "auth", "awsRegion", "manifest", "snowflakeRegion", "database", "account", "warehouse", "input", "stage", "stageUrl", "username", "password", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/redshift_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Redshift storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "redshift_config",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "sslMode": {
            "type": "string",
            "enum": ["DISABLE", "REQUIRE", "VERIFY_CA", "VERIFY_FULL"]
        },
        "schema": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": "string"
        },
        "maxError": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000
        },
        "compRows": {
            "type": "integer",
            "minimum": 1000,
            "maximum": 1000000000
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "database", "port", "sslMode", "schema", "username", "password", "maxError", "compRows", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/redshift_config/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Redshift storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "redshift_config",
        "format": "jsonschema",
        "version": "2-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "sslMode": {
            "type": "string",
            "enum": ["DISABLE", "REQUIRE", "VERIFY_CA", "VERIFY_FULL"]
        },
        "schema": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": "string"
        },
        "maxError": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000
        },
        "compRows": {
            "type": "integer",
            "minimum": 1000,
            "maximum": 1000000000
        },
        "roleArn": {
            "type": "string",
            "minLength": 20
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "database", "port", "sslMode", "schema", "username", "password", "maxError", "compRows", "roleArn", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/redshift_config/jsonschema/2-1-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Redshift storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "redshift_config",
        "format": "jsonschema",
        "version": "2-1-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "type": "string"
        },
        "host": {
            "type": "string"
        },
        "database": {
            "type": "string"
        },
        "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "sslMode": {
            "type": "string",
            "enum": ["DISABLE", "REQUIRE", "VERIFY_CA", "VERIFY_FULL"]
        },
        "schema": {
            "type": "string"
        },
        "username": {
            "type": "string"
        },
        "password": {
            "type": ["string", "object"],
            "properties": {
                "ec2ParameterStore": {
                    "type": "object",
                    "properties": {
                        "parameterName": {
                            "type": "string"
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "maxError": {
            "type": "integer",
            "minimum": 0,
            "maximum": 10000
        },
        "compRows": {
            "type": "integer",
            "minimum": 1000,
            "maximum": 1000000000
        },
        "roleArn": {
            "type": "string",
            "minLength": 20
        },
        "sshTunnel": {
            "type": ["object", "null"],
            "properties": {
                "bastion": {
                    "type": "object",
                    "properties": {
                        "host": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        },
                        "user": {
                            "type": "string"
                        },
                        "passphrase": {
                            "type": "string"
                        },
                        "key": {
                            "type": "object",
                            "properties": {
                                "ec2ParameterStore": {
                                    "type": "object",
                                    "properties": {
                                        "parameterName": {
                                            "type": "string"
                                        }
                                    },
                                    "required": ["parameterName"]
                                }
                            },
                            "required": ["ec2ParameterStore"]
                        }
                    },
                    "required": ["host", "port", "user"]
                },
                "destination": {
                    "type": "object",
                    "properties": {
                        "host": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        }
                    },
                    "required": ["host", "port"]
                },
                "localPort": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535
                }
            },
            "required": ["bastion", "destination", "localPort"]
        },
        "id": {
            "type": "string",
            "format": "uuid"
        },
        "purpose": {
            "type": "string",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "host", "database", "port", "sslMode", "schema", "username", "password", "maxError", "compRows", "roleArn", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/redshift_config/jsonschema/3-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Redshift storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "redshift_config",
        "format": "jsonschema",
        "version": "3-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "description": "Human-readable storage target name, used only for logging",
            "type": "string",
            "maxLength": 255
        },
        "id": {
            "description": "Machine-readable unique identificator",
            "type": "string",
            "format": "uuid"
        },
        "host": {
            "description": "Redshift cluster host ('localhost' for enabled SSH Tunnel)",
            "type": "string",
            "anyOf": [
                { "format": "hostname" },
                { "format": "ipv4" },
                { "format": "ipv6" }
            ]
        },
        "database": {
            "description": "Redshift database name",
            "type": "string",
            "minLength": 1,
            "maxLength": 64
        },
        "port": {
            "description": "Redshift database port",
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "username": {
            "description": "Redshift user",
            "type": "string",
            "maxLength": 128
        },
        "password": {
            "description": "Redshift password, either plain-text or encrypted key for EC2 Parameter Storage",
            "type": ["string", "object"],
            "properties": {
                "ec2ParameterStore": {
                    "description": "EC2 Parameter Storage configuration",
                    "type": "object",
                    "properties": {
                        "parameterName": {
                            "description": "EC2 Parameter with encrypted password",
                            "type": "string",
                            "maxLength": 2048
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "schema": {
            "description": "Redshift database schema (e.g. 'atomic')",
            "type": "string",
            "maxLength": 128
        },
        "sshTunnel": {
            "description": "Optional SSH Tunnel configuration",
            "type": ["object", "null"],
            "properties": {
                "bastion": {
                    "description": "Bastion host configuration",
                    "type": "object",
                    "properties": {
                        "host": {
                            "description": "Bastion SSH host",
                            "type": "string",
                            "anyOf": [
                                { "format": "hostname" },
                                { "format": "ipv4" },
                                { "format": "ipv6" }
                            ]
                        },
                        "port": {
                            "description": "Bastion SSH port",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        },
                        "user": {
                            "description": "SSH user",
                            "type": "string",
                            "maxLength": 32
                        },
                        "passphrase": {
                            "description": "Plain-text SSH user's passphrase",
                            "type": ["string", "null"],
                            "maxLength": 2048
                        },
                        "key": {
                            "description": "SSH-key stored in EC2 Parameter Storage",
                            "type": ["object", "null"],
                            "properties": {
                                "ec2ParameterStore": {
                                    "type": "object",
                                    "properties": {
                                        "parameterName": {
                                            "type": "string",
                                            "maxLength": 2048
                                        }
                                    },
                                    "required": ["parameterName"]
                                }
                            },
                            "required": ["ec2ParameterStore"]
                        }
                    },
                    "required": ["host", "port", "user", "passphrase", "key"]
                },
                "destination": {
                    "description": "Database socket inside private network",
                    "type": "object",
                    "properties": {
                        "host": {
                            "description": "Redshift host inside private network (root-level host should be changed to 'localhost')",
                            "type": "string",
                            "anyOf": [
                                { "format": "hostname" },
                                { "format": "ipv4" },
                                { "format": "ipv6" }
                            ]
                        },
                        "port": {
                            "description": "Redshift port inside private network (root-level 'port' should be changed to be identical to 'localPort')",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        }
                    },
                    "required": ["host", "port"]
                },
                "localPort": {
                    "description": "Arbitrary port on node, running Loader (shoul be identical to root-level 'port')",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535
                }
            },
            "required": ["bastion", "destination", "localPort"]
        },
        "processingManifest": {
            "description": "Optional processing manifest to maintain pipeline state",
            "type": ["object", "null"],
            "properties": {
                "amazonDynamoDb": {
                    "description": "Configuration for processing manifest on top of DynamoDB - single available implementation",
                    "type": "object",
                    "properties": {
                        "tableName": {
                            "description": "DynamoDB table name",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 255
                        }
                    },
                    "required": ["tableName"]
                }
            },
            "required": ["amazonDynamoDb"]
        },
        "roleArn": {
            "description": "IAM Role ARN used to load data from S3",
            "type": "string",
            "minLength": 20
        },
        "maxError": {
            "description": "Amount of allowed errors before aborting load",
            "type": "integer",
            "minimum": 0,
            "maximum": 100000
        },
        "compRows": {
            "description": "Number of rows to be used as the sample size for compression analysis",
            "type": "integer",
            "minimum": 1000,
            "maximum": 1000000000
        },
        "jdbc": {
            "type": "object",
            "properties": {
                "BlockingRowsMode": {
                    "description": "The number of rows to hold in memory",
                    "type": "integer",
                    "minimum": 0
                },
                "DisableIsValidQuery": {
                    "description": "Disable detection JDBC driver no longer holding a valid database connection",
                    "type": "boolean"
                },
                "DSILogLevel": {
                    "description": "Amount of detail included in log file",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 6
                },
                "FilterLevel": {
                    "description": "The minimum severity level of a message that the client processes",
                    "enum": ["DEBUG", "INFO", "NOTICE", "WARNING", "LOG", "ERROR"]
                },
                "loginTimeout": {
                    "description": "The number of seconds to wait before timing out when connecting to the server",
                    "type": "integer",
                    "minimum": 0
                },
                "loglevel": {
                    "description": "The amount of logging information output by the driver",
                    "type": ["integer", "null"],
                    "minimum": 0,
                    "maximum": 2
                },
                "socketTimeout": {
                    "description": "The number of seconds to wait during socket read operations before timing out",
                    "type": "integer",
                    "minimum": 0
                },
                "ssl": {
                    "description": "Whether to use an SSL connection",
                    "type": "boolean"
                },
                "sslMode": {
                    "description": "Determines how to handle server certificate verification",
                    "type": ["string", "null"],
                    "enum": ["verify-ca", "verify-full"]
                },
                "sslRootCert": {
                    "description": "The full path of a .pem or .crt file containing the trust root Certificate Authority",
                    "type": ["string", "null"],
                    "maxLength": 1024
                },
                "tcpKeepAlive": {
                    "description": "A value that determines whether TCP keepalives are enabled",
                    "type": "boolean"
                },
                "TCPKeepAliveMinutes": {
                    "description": "The threshold for minutes of inactivity before initiating a TCP keepalive transmission",
                    "type": "integer",
                    "minimum": 0
                }
            },
            "additionalProperties": false
        },
        "purpose": {
            "description": "Kind of data stored in this instance",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "id", "host", "database", "port", "username", "password", "schema", "sshTunnel", "processingManifest", "roleArn", "maxError", "compRows", "jdbc", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage/redshift_config/jsonschema/4-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "Snowplow Redshift storage configuration",
    "self": {
        "vendor": "com.snowplowanalytics.snowplow.storage",
        "name": "redshift_config",
        "format": "jsonschema",
        "version": "4-0-0"
    },
    "type": "object",
    "properties": {
        "name": {
            "description": "Human-readable storage target name, used only for logging",
            "type": "string",
            "maxLength": 255
        },
        "id": {
            "description": "Machine-readable unique identificator",
            "type": "string",
            "format": "uuid"
        },
        "host": {
            "description": "Redshift cluster host ('localhost' for enabled SSH Tunnel)",
            "type": "string",
            "anyOf": [
                { "format": "hostname" },
                { "format": "ipv4" },
                { "format": "ipv6" }
            ]
        },
        "database": {
            "description": "Redshift database name",
            "type": "string",
            "minLength": 1,
            "maxLength": 64
        },
        "port": {
            "description": "Redshift database port",
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
        },
        "username": {
            "description": "Redshift user",
            "type": "string",
            "maxLength": 128
        },
        "password": {
            "description": "Redshift password, either plain-text or encrypted key for EC2 Parameter Storage",
            "type": ["string", "object"],
            "properties": {
                "ec2ParameterStore": {
                    "description": "EC2 Parameter Storage configuration",
                    "type": "object",
                    "properties": {
                        "parameterName": {
                            "description": "EC2 Parameter with encrypted password",
                            "type": "string",
                            "maxLength": 2048
                        }
                    },
                    "required": ["parameterName"]
                }
            },
            "required": ["ec2ParameterStore"]
        },
        "schema": {
            "description": "Redshift database schema (e.g. 'atomic')",
            "type": "string",
            "maxLength": 128
        },
        "sshTunnel": {
            "description": "Optional SSH Tunnel configuration",
            "type": ["object", "null"],
            "properties": {
                "bastion": {
                    "description": "Bastion host configuration",
                    "type": "object",
                    "properties": {
                        "host": {
                            "description": "Bastion SSH host",
                            "type": "string",
                            "anyOf": [
                                { "format": "hostname" },
                                { "format": "ipv4" },
                                { "format": "ipv6" }
                            ]
                        },
                        "port": {
                            "description": "Bastion SSH port",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        },
                        "user": {
                            "description": "SSH user",
                            "type": "string",
                            "maxLength": 32
                        },
                        "passphrase": {
                            "description": "Plain-text SSH user's passphrase",
                            "type": ["string", "null"],
                            "maxLength": 2048
                        },
                        "key": {
                            "description": "SSH-key stored in EC2 Parameter Storage",
                            "type": ["object", "null"],
                            "properties": {
                                "ec2ParameterStore": {
                                    "type": "object",
                                    "properties": {
                                        "parameterName": {
                                            "type": "string",
                                            "maxLength": 2048
                                        }
                                    },
                                    "required": ["parameterName"]
                                }
                            },
                            "required": ["ec2ParameterStore"]
                        }
                    },
                    "required": ["host", "port", "user", "passphrase", "key"]
                },
                "destination": {
                    "description": "Database socket inside private network",
                    "type": "object",
                    "properties": {
                        "host": {
                            "description": "Redshift host inside private network (root-level host should be changed to 'localhost')",
                            "type": "string",
                            "anyOf": [
                                { "format": "hostname" },
                                { "format": "ipv4" },
                                { "format": "ipv6" }
                            ]
                        },
                        "port": {
                            "description": "Redshift port inside private network (root-level 'port' should be changed to be identical to 'localPort')",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                        }
                    },
                    "required": ["host", "port"]
                },
                "localPort": {
                    "description": "Arbitrary port on node, running Loader (shoul be identical to root-level 'port')",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535
                }
            },
            "required": ["bastion", "destination", "localPort"]
        },
        "processingManifest": {
            "description": "Optional processing manifest to maintain pipeline state",
            "type": ["object", "null"],
            "properties": {
                "amazonDynamoDb": {
                    "description": "Configuration for processing manifest on top of DynamoDB - single available implementation",
                    "type": "object",
                    "properties": {
                        "tableName": {
                            "description": "DynamoDB table name",
                            "type": "string",
                            "minLength": 3,
                            "maxLength": 255
                        }
                    },
                    "required": ["tableName"]
                }
            },
            "required": ["amazonDynamoDb"]
        },
        "roleArn": {
            "description": "IAM Role ARN used to load data from S3",
            "type": "string",
            "minLength": 20
        },
        "maxError": {
            "description": "Amount of allowed errors before aborting load",
            "type": "integer",
            "minimum": 0,
            "maximum": 100000
        },
        "compRows": {
            "description": "Number of rows to be used as the sample size for compression analysis",
            "type": "integer",
            "minimum": 1000,
            "maximum": 1000000000
        },
        "jdbc": {
            "type": "object",
            "properties": {
                "BlockingRowsMode": {
                    "description": "The number of rows to hold in memory",
                    "type": "integer",
                    "minimum": 0
                },
                "DisableIsValidQuery": {
                    "description": "Disable detection JDBC driver no longer holding a valid database connection",
                    "type": "boolean"
                },
                "DSILogLevel": {
                    "description": "Amount of detail included in log file",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 6
                },
                "FilterLevel": {
                    "description": "The minimum severity level of a message that the client processes",
                    "enum": ["DEBUG", "INFO", "NOTICE", "WARNING", "LOG", "ERROR"]
                },
                "loginTimeout": {
                    "description": "The number of seconds to wait before timing out when connecting to the server",
                    "type": "integer",
                    "minimum": 0
                },
                "loglevel": {
                    "description": "The amount of logging information output by the driver",
                    "type": ["integer", "null"],
                    "minimum": 0,
                    "maximum": 2
                },
                "socketTimeout": {
                    "description": "The number of seconds to wait during socket read operations before timing out",
                    "type": "integer",
                    "minimum": 0
                },
                "ssl": {
                    "description": "Whether to use an SSL connection",
                    "type": "boolean"
                },
                "sslMode": {
                    "description": "Determines how to handle server certificate verification",
                    "type": ["string", "null"],
                    "enum": ["verify-ca", "verify-full"]
                },
                "sslRootCert": {
                    "description": "The full path of a .pem or .crt file containing the trust root Certificate Authority",
                    "type": ["string", "null"],
                    "maxLength": 1024
                },
                "tcpKeepAlive": {
                    "description": "A value that determines whether TCP keepalives are enabled",
                    "type": "boolean"
                },
                "TCPKeepAliveMinutes": {
                    "description": "The threshold for minutes of inactivity before initiating a TCP keepalive transmission",
                    "type": "integer",
                    "minimum": 0
                }
            },
            "additionalProperties": false
        },
        "blacklistTabular": {
            "description": "List of iglu schemas for entities that should not be shredded into TSV format",
            "type": ["array", "null"],
            "items": {
                "type": "string"
            }
        },
        "purpose": {
            "description": "Kind of data stored in this instance",
            "enum": ["ENRICHED_EVENTS"]
        }
    },
    "additionalProperties": false,
    "required": ["name", "id", "host", "database", "port", "username", "password", "schema", "sshTunnel", "processingManifest", "roleArn", "maxError", "compRows", "jdbc", "purpose"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.callrail/call_complete/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a CallRail call completion event",
	"self": {
		"vendor": "com.callrail",
		"name": "call_complete",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"answered": {
			"type": ["boolean", "null"]
		},
		"callercity": {
			"type": ["string", "null"]
		},
		"callercountry": {
			"type": ["string", "null"]
		},
		"callername": {
			"type": ["string", "null"]
		},
		"callernum": {
			"type": ["string", "null"]
		},
		"callerstate": {
			"type": ["string", "null"]
		},
		"callerzip": {
			"type": ["string", "null"]
		},
		"callsource": {
			"type": ["string", "null"]
		},
		"datetime": {
			"type": "string",
			"format": "date-time"
		},
		"destinationnum": {
			"type": ["string", "null"]
		},
		"duration": {
			"type": ["number", "null"]
		},
		"first_call": {
			"type": ["boolean", "null"]
		},
		"ga": {
			"type": ["string", "null"]
		},
		"gclid": {
			"type": ["string", "null"]
		},
		"id": {
			"type": "string"
		},
		"ip": {
			"type": ["string", "null"]
		},
		"keywords": {
			"type": ["string", "null"]
		},
		"kissmetrics_id": {
			"type": ["string", "null"]
		},
		"landingpage": {
			"type": ["string", "null"]
		},
		"recording": {
			"type": ["string", "null"]
		},
		"referrer": {
			"type": ["string", "null"]
		},
		"referrermedium": {
			"type": ["string", "null"]
		},
		"trackingnum": {
			"type": ["string", "null"]
		},
		"transcription": {
			"type": ["string", "null"]
		},
		"utm_campaign": {
			"type": ["string", "null"]
		},
		"utm_content": {
			"type": ["string", "null"]
		},
		"utm_medium": {
			"type": ["string", "null"]
		},
		"utm_source": {
			"type": ["string", "null"]
		},
		"utm_term": {
			"type": ["string", "null"]
		},
		"utma": {
			"type": ["string", "null"]
		},
		"utmb": {
			"type": ["string", "null"]
		},
		"utmc": {
			"type": ["string", "null"]
		},
		"utmv": {
			"type": ["string", "null"]
		},
		"utmx": {
			"type": ["string", "null"]
		},
		"utmz": {
			"type": ["string", "null"]
		}
	},
	"required": ["datetime", "id"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.callrail/call_complete/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a CallRail call completion event",
	"self": {
		"vendor": "com.callrail",
		"name": "call_complete",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"answered": {
			"type": ["boolean", "null"]
		},
		"callercity": {
			"type": ["string", "null"]
		},
		"callercountry": {
			"type": ["string", "null"]
		},
		"callername": {
			"type": ["string", "null"]
		},
		"callernum": {
			"type": ["string", "null"]
		},
		"callerstate": {
			"type": ["string", "null"]
		},
		"callerzip": {
			"type": ["string", "null"]
		},
		"callsource": {
			"type": ["string", "null"]
		},
		"datetime": {
			"type": "string",
			"format": "date-time"
		},
		"destinationnum": {
			"type": ["string", "null"]
		},
		"duration": {
			"type": ["number", "null"]
		},
		"first_call": {
			"type": ["boolean", "null"]
		},
		"device_type": {
			"type": ["string", "null"]
		},
		"ga": {
			"type": ["string", "null"]
		},
		"gclid": {
			"type": ["string", "null"]
		},
		"id": {
			"type": "string"
		},
		"ip": {
			"type": ["string", "null"]
		},
		"keywords": {
			"type": ["string", "null"]
		},
		"kissmetrics_id": {
			"type": ["string", "null"]
		},
		"landingpage": {
			"type": ["string", "null"]
		},
		"recording": {
			"type": ["string", "null"]
		},
		"referrer": {
			"type": ["string", "null"]
		},
		"referrermedium": {
			"type": ["string", "null"]
		},
		"trackingnum": {
			"type": ["string", "null"]
		},
		"transcription": {
			"type": ["string", "null"]
		},
		"utm_campaign": {
			"type": ["string", "null"]
		},
		"utm_content": {
			"type": ["string", "null"]
		},
		"utm_medium": {
			"type": ["string", "null"]
		},
		"utm_source": {
			"type": ["string", "null"]
		},
		"utm_term": {
			"type": ["string", "null"]
		},
		"utma": {
			"type": ["string", "null"]
		},
		"utmb": {
			"type": ["string", "null"]
		},
		"utmc": {
			"type": ["string", "null"]
		},
		"utmv": {
			"type": ["string", "null"]
		},
		"utmx": {
			"type": ["string", "null"]
		},
		"utmz": {
			"type": ["string", "null"]
		}
	},
	"required": ["datetime", "id"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.callrail/call_complete/jsonschema/1-0-2', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a CallRail call completion event",
	"self": {
		"vendor": "com.callrail",
		"name": "call_complete",
		"format": "jsonschema",
		"version": "1-0-2"
	},

	"type": "object",
	"properties": {
		"answered": {
			"type": ["boolean", "null"]
		},
		"customer_city": {
			"type": ["string", "null"]
		},
		"customer_country": {
			"type": ["string", "null"]
		},
		"customer_name": {
			"type": ["string", "null"]
		},
		"customer_phone_number": {
			"type": ["string", "null"]
		},
		"customer_state": {
			"type": ["string", "null"]
		},
		"customer_zip": {
			"type": ["string", "null"]
		},
		"callercity": {
			"type": ["string", "null"]
		},
		"callercountry": {
			"type": ["string", "null"]
		},
		"callername": {
			"type": ["string", "null"]
		},
		"callernum": {
			"type": ["string", "null"]
		},
		"callerstate": {
			"type": ["string", "null"]
		},
		"callerzip": {
			"type": ["string", "null"]
		},
		"callsource": {
			"type": ["string", "null"]
		},
		"datetime": {
			"type": "string",
			"format": "date-time"
		},
		"destinationnum": {
			"type": ["string", "null"]
		},
		"duration": {
			"type": ["number", "null"]
		},
		"first_call": {
			"type": ["boolean", "null"]
		},
		"device_type": {
			"type": ["string", "null"]
		},
		"ga": {
			"type": ["string", "null"]
		},
		"gclid": {
			"type": ["string", "null"]
		},
		"id": {
			"type": "string"
		},
		"ip": {
			"type": ["string", "null"]
		},
		"keywords": {
			"type": ["string", "null"]
		},
		"kissmetrics_id": {
			"type": ["string", "null"]
		},
		"landingpage": {
			"type": ["string", "null"]
		},
		"recording": {
			"type": ["string", "null"]
		},
		"referrer": {
			"type": ["string", "null"]
		},
		"referrermedium": {
			"type": ["string", "null"]
		},
		"trackingnum": {
			"type": ["string", "null"]
		},
		"transcription": {
			"type": ["string", "null"]
		},
		"utm_campaign": {
			"type": ["string", "null"]
		},
		"utm_content": {
			"type": ["string", "null"]
		},
		"utm_medium": {
			"type": ["string", "null"]
		},
		"utm_source": {
			"type": ["string", "null"]
		},
		"utm_term": {
			"type": ["string", "null"]
		},
		"utma": {
			"type": ["string", "null"]
		},
		"utmb": {
			"type": ["string", "null"]
		},
		"utmc": {
			"type": ["string", "null"]
		},
		"utmv": {
			"type": ["string", "null"]
		},
		"utmx": {
			"type": ["string", "null"]
		},
		"utmz": {
			"type": ["string", "null"]
		}
	},
	"required": ["datetime", "id"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.insights/data_structures_dependencies/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
    "description": "For validating the schema dependency manifest used in the Data Structures CI/CD tool",
    "self": {
        "vendor": "com.snowplowanalytics.insights",
        "name": "data_structures_dependencies",
        "format": "jsonschema",
        "version": "1-0-0"
    },
    "type": "object",
    "properties": {
        "schemas": {
            "type": "array",
            "description": "An array of schema dependencies",
            "items": {
                "type": "object",
                "properties": {
                    "vendor": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9-_.]+$"
                    },
                    "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9-_]+$"
                    },
                    "format": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9-_]+$"
                    },
                    "version": {
                        "type": "string",
                        "pattern": "^[0-9]+-[0-9]+-[0-9]+$"
                    }
                },
                "required": [
                    "vendor",
                    "name",
                    "format",
                    "version"
                ],
                "additionalProperties": false
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "schemas"
    ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.clearbit.enrichment/person/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "com.clearbit.enrichment",
    "name" : "person",
    "version" : "1-0-0",
    "format" : "jsonschema"
  },
  "type" : "object",
  "properties" : {
    "github" : {
      "type" : "object",
      "properties" : {
        "avatar" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "followers" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "following" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "company" : {
          "type" : ["string", "null"]
        },
        "blog" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "name" : {
      "type" : "object",
      "properties" : {
        "fullName" : {
          "type" : ["string", "null"]
        },
        "givenName" : {
          "type" : ["string", "null"]
        },
        "familyName" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "avatar" : {
      "type" : ["string", "null"],
      "format" : "uri"
    },
    "location" : {
      "type" : ["string", "null"]
    },
    "email" : {
      "type" : ["string", "null"]
    },
    "linkedin" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "geo" : {
      "type" : "object",
      "properties" : {
        "city" : {
          "type" : ["string", "null"]
        },
        "stateCode" : {
          "type" : ["string", "null"]
        },
        "lng" : {
          "type" : ["number", "null"],
          "minimum" : -180,
          "maximum" : 180
        },
        "state" : {
          "type" : ["string", "null"]
        },
        "country" : {
          "type" : ["string", "null"]
        },
        "countryCode" : {
          "type" : ["string", "null"]
        },
        "lat" : {
          "type" : ["number", "null"],
          "minimum" : -90,
          "maximum" : 90
        }
      },
      "additionalProperties" : true
    },
    "angellist" : {
      "type" : "object",
      "properties" : {
        "avatar" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "followers" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "site" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "bio" : {
          "type" : ["string", "null"]
        },
        "blog" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "site" : {
      "type" : ["string", "null"],
      "format" : "uri"
    },
    "gravatar" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        },
        "urls" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "value" : {
                "type" : ["string", "null"],
                "format" : "uri"
              },
              "title" : {
                "type" : ["string", "null"]
              }
            },
            "additionalProperties" : true
          }
        },
        "avatar" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "avatars" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "url" : {
                "type" : ["string", "null"],
                "format" : "uri"
              },
              "type" : {
                "type" : ["string", "null"]
              }
            },
            "additionalProperties" : true
          }
        }
      },
      "additionalProperties" : true
    },
    "fuzzy" : {
      "type" : "boolean"
    },
    "aboutme" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        },
        "bio" : {
          "type" : ["string", "null"]
        },
        "avatar" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "bio" : {
      "type" : ["string", "null"]
    },
    "id" : {
      "type" : ["string", "null"],
      "format" : "uuid"
    },
    "facebook" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "googleplus" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "employment" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : ["string", "null"]
        },
        "role" : {
          "type" : ["string", "null"]
        },
        "domain" : {
          "type" : ["string", "null"]
        },
        "seniority" : {
          "type" : ["string", "null"]
        },
        "title" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "utcOffset" : {
      "type" : ["integer", "null"],
      "maximum" : 32767,
      "minimum" : -32768
    },
    "twitter" : {
      "type" : "object",
      "properties" : {
        "avatar" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "location" : {
          "type" : ["string", "null"]
        },
        "followers" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "site" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "following" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "bio" : {
          "type" : ["string", "null"]
        },
        "id" : {
          "type" : ["string", "integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        },
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "timeZone" : {
      "type" : ["string", "null"]
    },
    "gender" : {
      "type" : ["string", "null"]
    }
  },
  "additionalProperties" : true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.clearbit.enrichment/company/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "com.clearbit.enrichment",
    "name" : "company",
    "version" : "1-0-0",
    "format" : "jsonschema"
  },
  "type" : "object",
  "properties" : {
    "name" : {
      "type" : ["string", "null"]
    },
    "crunchbase" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "location" : {
      "type" : ["string", "null"]
    },
    "url" : {
      "type" : ["string", "null"],
      "format" : "uri"
    },
    "description" : {
      "type" : ["string", "null"]
    },
    "foundedDate" : {
      "type" : ["string", "null"]
    },
    "tags" : {
      "type" : "array",
      "items" : {
        "type" : ["string", "null"]
      }
    },
    "linkedin" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "geo" : {
      "type" : "object",
      "properties" : {
        "city" : {
          "type" : ["string", "null"]
        },
        "stateCode" : {
          "type" : ["string", "null"]
        },
        "lng" : {
          "type" : ["number", "null"],
          "minimum" : -180,
          "maximum" : 180
        },
        "state" : {
          "type" : ["string", "null"]
        },
        "country" : {
          "type" : ["string", "null"]
        },
        "streetName" : {
          "type" : ["string", "null"]
        },
        "postalCode" : {
          "type" : ["string", "null"]
        },
        "subPremise" : {
          "type" : ["string", "null"]
        },
        "countryCode" : {
          "type" : ["string", "null"]
        },
        "streetNumber" : {
          "type" : ["string", "null"]
        },
        "lat" : {
          "type" : ["number", "null"],
          "minimum" : -90,
          "maximum" : 90
        }
      },
      "additionalProperties" : true
    },
    "domain" : {
      "type" : ["string", "null"]
    },
    "angellist" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : ["string", "null"]
        },
        "followers" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "blogUrl" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "id" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "site" : {
      "type" : "object",
      "properties" : {
        "metaDescription" : {
          "type" : ["string", "null"]
        },
        "url" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "emailAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "phoneNumbers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "h1" : {
          "type" : ["string", "null"]
        },
        "title" : {
          "type" : ["string", "null"]
        },
        "metaAuthor" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "domainAliases" : {
      "type" : "array",
      "items" : { }
    },
    "emailProvider" : {
      "type" : "boolean"
    },
    "logo" : {
      "type" : ["string", "null"],
      "format" : "uri"
    },
    "id" : {
      "type" : ["string", "null"],
      "format" : "uuid"
    },
    "legalName" : {
      "type" : ["string", "null"]
    },
    "facebook" : {
      "type" : "object",
      "properties" : {
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "tech" : {
      "type" : "array",
      "items" : {
        "type" : ["string", "null"]
      }
    },
    "metrics" : {
      "type" : "object",
      "properties" : {
        "employees" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "marketCap" : {
          "type" : ["integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        },
        "googleRank" : {
          "type" : ["integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        },
        "raised" : {
          "type" : ["integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        },
        "alexaUsRank" : {
          "type" : ["integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        },
        "alexaGlobalRank" : {
          "type" : ["integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        },
        "annualRevenue" : {
          "type" : ["integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        }
      },
      "additionalProperties" : true
    },
    "utcOffset" : {
      "type" : ["integer", "null"],
      "maximum" : 32767,
      "minimum" : -32768
    },
    "twitter" : {
      "type" : "object",
      "properties" : {
        "avatar" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "location" : {
          "type" : ["string", "null"]
        },
        "followers" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "site" : {
          "type" : ["string", "null"],
          "format" : "uri"
        },
        "following" : {
          "type" : ["integer", "null"],
          "maximum" : 2147483647,
          "minimum" : 0
        },
        "bio" : {
          "type" : ["string", "null"]
        },
        "id" : {
          "type" : ["string", "integer", "null"],
          "maximum" : 9223372036854775807,
          "minimum" : 0
        },
        "handle" : {
          "type" : ["string", "null"]
        }
      },
      "additionalProperties" : true
    },
    "type" : {
      "type" : ["string", "null"]
    },
    "timeZone" : {
      "type" : ["string", "null"]
    },
    "phone" : {
      "type" : ["string", "null"]
    }
  },
  "additionalProperties" : true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/load_succeeded/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a data load succeeding",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "load_succeeded",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/load_succeeded/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a data load succeeding",
  "self": {
    "vendor": "com.snowplowanalytics.monitoring.batch",
    "name": "load_succeeded",
    "format": "jsonschema",
    "version": "2-0-0"
  },

  "type": "object",
  "properties": {
    "shredding": {
      "description": "Information about the batch taken from transformation step, isomorphic to shredding_complete schema",
      "type": "object",
      "properties": {
        "base": {
          "description": "Blob storage path to the root of the batch",
          "type": "string",
          "format": "uri",
          "maxLength": 1024
        },
        "compression": {
          "description": "File compression type",
          "enum": ["GZIP", "NONE"]
        },
        "types": {
          "description": "Set of Iglu URIs and the format they were shredded into",
          "type": "array",
          "items": {
            "properties": {
              "schemaKey": {
                "description": "Iglu URI",
                "type": "string",
                "maxLength": 256
              },
              "format": {
                "description": "File format in which the entities were shredded to",
                "enum": ["TSV", "JSON"]
              }
            },
            "required": ["schemaKey", "format"]
          }
        },
        "timestamps": {
          "description": "Set of timestamps associated with the batch",
          "type": "object",
          "properties": {
            "jobStarted": {
              "description": "Time when the batch started being shredded",
              "type": "string",
              "format": "date-time"
            },
            "jobCompleted": {
              "description": "Time when the batch shredding has been finished (and the message being prepared)",
              "type": "string",
              "format": "date-time"
            },
            "min": {
              "description": "The earliest collector_stamp available in the batch",
              "type": ["string", "null"],
              "format": "date-time"
            },
            "max": {
              "description": "The latest collector_tstamp available in the batch",
              "type": ["string", "null"],
              "format": "date-time"
            }
          },
          "required": ["jobStarted", "jobCompleted", "min", "max"]
        },
        "processor": {
          "description": "Identificator of a shredder sent the message",
          "type": "object",
          "properties": {
            "artifact": {
              "description": "Name of the artifact",
              "type": "string",
              "maxLength": 64
            },
            "version": {
              "description": "Semantic Version of the artifact",
              "type": "string",
              "maxLength": 16
            }
          },
          "required": ["artifact", "version"]
        },
        "count": {
          "description": "Count of events in the batch, null means the count could not be calculated",
          "type": ["object", "null"],
          "properties": {
            "good": {
              "description": "Amount of good events in the batch",
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "required": ["base", "compression", "types", "timestamps", "processor"],
      "additionalProperties": false
    },
    "application": {
      "description": "Loader's name and version",
      "type": "string",
      "maxLength": 128
    },
    "attempt": {
      "description": "How many attempts were taken to load the batch",
      "type": "integer",
      "minimum": 0
    },
    "loadingStarted": {
      "description": "Time when loader started loading (first attempt)",
      "type": "string",
      "format": "date-time"
    },
    "loadingCompleted": {
      "description": "Time when loader finished loading (should match the ingestion timestamp in manifest)",
      "type": "string",
      "format": "date-time"
    },
    "tags": {
      "description": "Set of key value pairs providing additional information",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "required": ["shredding", "application", "attempt", "loadingStarted", "loadingCompleted", "tags"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/load_succeeded/jsonschema/3-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a data load succeeding",
  "self": {
    "vendor": "com.snowplowanalytics.monitoring.batch",
    "name": "load_succeeded",
    "format": "jsonschema",
    "version": "3-0-0"
  },

  "type": "object",
  "properties": {
    "shredding": {
      "description": "Information about the batch taken from transformation step, isomorphic to shredding_complete schema",
      "type": "object",
      "properties": {
        "base": {
          "description": "Blob storage path to the root of the batch",
          "type": "string",
          "format": "uri",
          "maxLength": 1024
        },
        "compression": {
          "description": "File compression type",
          "enum": ["GZIP", "NONE"]
        },
        "typesInfo": {
          "description": "Info about schemas used in events and output formats in the respective batch",
          "type": "object",
          "oneOf": [
            {
              "properties": {
                "transformation": {
                  "description": "Type of the transformation",
                  "enum": ["SHREDDED"]
                },
                "types": {
                  "description": "Set of Iglu URIs and the format they were shredded into",
                  "type": "array",
                  "items": {
                    "properties": {
                      "schemaKey": {
                        "description": "Iglu URI",
                        "type": "string",
                        "maxLength": 256
                      },
                      "format": {
                        "description": "File format into which the entities were shredded",
                        "enum": ["TSV", "JSON"]
                      },
                      "snowplowEntity": {
                        "description": "Type of the self-describing JSON in the event",
                        "enum": ["SELF_DESCRIBING_EVENT", "CONTEXT"]
                      }
                    },
                    "required": ["schemaKey", "format", "snowplowEntity"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["transformation", "types"],
              "additionalProperties": false
            },
            {
              "properties": {
                "transformation": {
                  "description": "Type of the transformation",
                  "enum": ["WIDEROW"]
                },
                "fileFormat": {
                  "description": "Output file format",
                  "enum": ["JSON", "PARQUET"]
                },
                "types": {
                  "description": "Set of Iglu URIs and the format they were shredded into",
                  "type": "array",
                  "items": {
                    "properties": {
                      "schemaKey": {
                        "description": "Iglu URI",
                        "type": "string",
                        "maxLength": 256
                      },
                      "snowplowEntity": {
                        "description": "Type of the self-describing JSON in the event",
                        "enum": ["SELF_DESCRIBING_EVENT", "CONTEXT"]
                      }
                    },
                    "required": ["schemaKey", "snowplowEntity"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["transformation", "fileFormat", "types"],
              "additionalProperties": false
            }
          ]
        },
        "timestamps": {
          "description": "Set of timestamps associated with the batch",
          "type": "object",
          "properties": {
            "jobStarted": {
              "description": "Time when the batch started being shredded",
              "type": "string",
              "format": "date-time"
            },
            "jobCompleted": {
              "description": "Time when the batch shredding has been finished (and the message being prepared)",
              "type": "string",
              "format": "date-time"
            },
            "min": {
              "description": "The earliest collector_stamp available in the batch",
              "type": ["string", "null"],
              "format": "date-time"
            },
            "max": {
              "description": "The latest collector_tstamp available in the batch",
              "type": ["string", "null"],
              "format": "date-time"
            }
          },
          "required": ["jobStarted", "jobCompleted", "min", "max"]
        },
        "processor": {
          "description": "Identificator of a shredder sent the message",
          "type": "object",
          "properties": {
            "artifact": {
              "description": "Name of the artifact",
              "type": "string",
              "maxLength": 64
            },
            "version": {
              "description": "Semantic Version of the artifact",
              "type": "string",
              "maxLength": 16
            }
          },
          "required": ["artifact", "version"]
        },
        "count": {
          "description": "Count of events in the batch, null means the count could not be calculated",
          "type": ["object", "null"],
          "properties": {
            "good": {
              "description": "Amount of good events in the batch",
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "required": ["base", "compression", "typesInfo", "timestamps", "processor"],
      "additionalProperties": false
    },
    "application": {
      "description": "Loader's name and version",
      "type": "string",
      "maxLength": 128
    },
    "attempt": {
      "description": "How many attempts were taken to load the batch",
      "type": "integer",
      "minimum": 0
    },
    "loadingStarted": {
      "description": "Time when loader started loading (first attempt)",
      "type": "string",
      "format": "date-time"
    },
    "loadingCompleted": {
      "description": "Time when loader finished loading (should match the ingestion timestamp in manifest)",
      "type": "string",
      "format": "date-time"
    },
    "tags": {
      "description": "Set of key value pairs providing additional information",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "required": ["shredding", "application", "attempt", "loadingStarted", "loadingCompleted", "tags"]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/emr_job_succeeded/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an EMR job succeeding",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "emr_job_succeeded",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/alert/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Webhook payload describing an alert coming from RDB Loader",
  "self": {
    "vendor": "com.snowplowanalytics.monitoring.batch",
    "name": "alert",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "base": {
      "description": "A folder that caused an alert",
      "type": ["string", "null"],
      "format": "uri",
      "maxLength": 1024
    },
    "application": {
      "type": "string",
      "maxLength": 64,
      "description": "Application's name and version"
    },
    "message": {
      "description": "Free-form message describing the problem",
      "maxLength": 4096,
      "type": "string"
    },
    "severity": {
      "description": "Severity level of the alarm",
      "enum": ["INFO", "WARNING", "ERROR"]
    },
    "group": {
      "description": "Arbitrary string representing an entity several alerts can be grouped by",
      "type": ["string", "null"],
      "maxLength": 1024
    },
    "tags": {
      "description": "Set of key value pairs providing additional information",
      "type": "object"
    }
  },
  "required": ["application", "message", "severity", "tags"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/emr_job_status/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an EMR job status context",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "emr_job_status",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"name": {
			"type": "string",
			"maxLength": 255
		},
		"jobflow_id": {
			"type": "string",
			"maxLength": 32
		},
		"state": {
			"type": "string",
			"enum": ["STARTING", "BOOTSTRAPPING", "RUNNING", "WAITING", "TERMINATING", "TERMINATED", "TERMINATED_WITH_ERRORS"]
		},
		"created_at": {
			"type": "string",
			"format": "date-time"
		},
		"ended_at": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"last_state_change_reason": {
			"type": ["string", "null"],
			"maxLength": 255
		}
	},
	"required": ["name", "jobflow_id", "state", "created_at"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/load_failed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a data load succeeding",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "load_failed",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"error": {
			"type": "string",
			"maxLength": 255
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/application_context/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for application context",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "application_context",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"name": {
			"type": "string",
			"maxLength": 64
		},
		"version": {
			"type": "string",
			"maxLength": 64
		},
		"logLevel": {
			"type": "string",
			"maxLength": 64
		},
		"tags": {
			"type": "object",
			"patternProperties": {
				".*": {
					"type": "string"
				}
			}
		}
	},
	"required": ["name", "version"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/emr_job_started/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an EMR job starting",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "emr_job_started",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/jobflow_step_status/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an EMR job step status context",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "jobflow_step_status",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"name": {
			"type": "string",
			"maxLength": 255
		},
		"state": {
			"type": "string",
			"enum": ["NOT_READY", "RUNNING", "COMPLETED", "CANCELLED", "FAILED"]
		},
		"created_at": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"started_at": {
			"type": ["string", "null"],
			"format": "date-time"
		},
		"ended_at": {
			"type": ["string", "null"],
			"format": "date-time"
		}
	},
	"required": ["name", "state"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.monitoring.batch/emr_job_failed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for an EMR job failing",
	"self": {
		"vendor": "com.snowplowanalytics.monitoring.batch",
		"name": "emr_job_failed",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.input-adapters/segment_webhook_config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema to configure the Segment webhook adapter",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow.input-adapters",
		"name": "segment_webhook_config",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"vendor": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"parameters": {
			"type": "object",
			"properties": {
				"mappings": {
					"type": "object",
					"patternProperties": {
						".*": {
							"type": "string"
						}
					}
				}
			},
			"required": ["mappings"],
			"additionalProperties": false
		}
	},
	"required": ["name", "vendor", "parameters"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.unbounce/form_post/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for Unbounce (https://documentation.unbounce.com/hc/en-us/articles/203510044-Using-a-Webhook#content6)",
  "self": {
    "vendor": "com.unbounce",
    "name": "form_post",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "pageId": {
      "description": "The identifier Unbounce uses to uniquely identify your page. Eventually you’ll be able to use this with our API to manipulate and get information about your page. This is a 36-character UUID, for example, 'a2838d98-4cf4-11df-a3fd-00163e372d58'.",
      "type": "string",
      "maxLength": 36
    },
    "pageName": {
      "description": "The name you gave your page, for example 'My Guaranteed to Convert Landing Page'.",
      "type": "string"
    },
    "variant": {
      "description": "This identifies the page variant that the visitor saw when they visited your page, and will be a lower-case letter. The first variant is 'a', the next, 'b', and so on. If you have more than 26 variants the sequence will continue with 'aa', 'ab', etc.",
      "type": "string",
      "maxLength": 8
    },
    "pageUrl": {
      "description": "The URL of the page that contains your form.",
      "type": "string",
      "format": "uri",
      "maxLength": 8192
    },
    "data.json": {
      "type": "object",
      "additionalProperties": true
    }
  },
  "additionalProperties": false
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.snowplow.storage.rdbshredder/processed_payload/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for processing manifest payload added by RDB Shredder after job has finished",
	"self": {
		"vendor": "com.snowplowanalytics.snowplow.storage.rdbshredder",
		"name": "processed_payload",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"shreddedTypes": {
			"description": "List of shredded types encountered within a single batch",
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	},
	"required": ["shreddedTypes"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('io.snowplow.foundation/funnel_interaction/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a funnel interaction event",
  "self": {
    "vendor": "io.snowplow.foundation",
    "name": "funnel_interaction",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "properties": {
    "funnel_name": {
      "type": "string",
      "maxLength": 255,
      "description": "The name of the funnel"
    },
    "step_name": {
      "type": "string",
      "maxLength": 255,
      "description": "The funnel step"
    },
    "step_position": {
      "type": "integer",
      "minimum": 1,
      "maximum": 100,
      "description": "The position of this step in the funnel"
    }
  },
  "additionalProperties": false,
  "type": "object",
  "required": [
    "funnel_name",
    "step_name"
  ]
}

''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('io.snowplow.foundation/conversion/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a conversion event",
  "self": {
    "vendor": "io.snowplow.foundation",
    "name": "conversion",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "properties": {
    "name": {
      "type": "string",
      "maxLength": 255
    },
    "value": {
      "type": "integer",
      "minimum": 0,
      "maximum": 100000
    }
  },
  "additionalProperties": false,
  "type": "object"
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('io.snowplow.foundation/content/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a content entity",
  "self": {
    "vendor": "io.snowplow.foundation",
    "name": "content",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "properties": {
    "name": {
      "type": "string",
      "maxLength": 255
    },
    "id": {
      "type": "string",
      "maxLength": 255
    },
    "category": {
      "type": "string",
      "maxLength": 255
    },
    "date_published": {
      "type": "string",
      "maxLength": 255
    },
    "author": {
      "type": "string",
      "maxLength": 255
    }
  },
  "additionalProperties": false,
  "type": "object",
  "required": [
    "name"
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/view_item_list/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "view_item_list",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A view_item_list GTM server-side event.",
        "type": "object",
        "properties": {
                "item_list_id": {
                        "description": "The ID of the list in which the item was presented to the user.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "item_list_name": {
                        "description": "The name of the list in which the item was presented to the user.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "items": {
                        "description": "The items for the event.",
                        "type": "array",
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": ["items"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/add_to_cart/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "add_to_cart",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "An add_to_cart GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "items": {
                        "description": "The items for the event.",
                        "type": "array",
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": ["items"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/add_to_wishlist/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "add_to_wishlist",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "An add_to_wishlist GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "items": {
                        "description": "The items for the event.",
                        "type": "array",
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": ["items"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/add_payment_info/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "add_payment_info",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "An add_payment_info GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "coupon": {
                        "description": "The coupon name or code associated with the event.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "payment_type": {
                        "description": "The chosen method of payment.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "items": {
                        "description": "The items for the event.",
                        "type": "array",
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": ["items"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/login/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "login",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A login GTM server-side event.",
        "type": "object",
        "properties": {
                "method": {
                        "description": "The method used to login.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/sign_up/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "sign_up",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "An sign_up GTM server-side event.",
        "type": "object",
        "properties": {
                "method": {
                        "description": "The method used for sign up.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/view_search_results/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "view_search_results",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A view_search_results GTM server-side event.",
        "type": "object",
        "properties": {
                "search_term": {
                        "description": "The term that was searched for.",
                        "type": "string",
                        "maxLength": 4096
                },
                "items": {
                        "description": "The items for the event.",
                        "type": ["array", "null"],
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/exception/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "exception",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "An exception GTM server-side event.",
        "type": "object",
        "properties": {
                "description": {
                        "description": "The description of the exception that occurred.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "fatal": {
                        "description": "Whether or not the exception was a fatal one.",
                        "type": ["boolean", "null"]
                }

        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/select_content/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "select_content",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A select_content GTM server-side event.",
        "type": "object",
        "properties": {
                "content_type": {
                        "description": "The type of selected content.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "item_id": {
                        "description": "An identifier for the item that was selected.",
                        "type": ["string", "null"],
                        "maxLength": 500
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/refund/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "refund",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A refund GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "transaction_id": {
                        "description": "The unique identifier of a transaction.",
                        "type": "string",
                        "maxLength": 500
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "affiliation": {
                        "description": "A product affiliation to designate a supplying company or brick and mortar store location.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "coupon": {
                        "description": "The coupon name or code associated with the event.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "shipping": {
                        "description": "Shipping cost associated with a transaction.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "tax": {
                        "description": "Tax cost associated with a transaction.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "items": {
                        "description": "The items for the event.",
                        "type": ["array", "null"],
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": ["transaction_id"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/share/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "share",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A share GTM server-side event.",
        "type": "object",
        "properties": {
                "method": {
                        "description": "The method in which the content is shared.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "content_type": {
                        "description": "The type of selected content.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "item_id": {
                        "description": "An identifier for the item that was selected.",
                        "type": ["string", "null"],
                        "maxLength": 500
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/generate_lead/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "generate_lead",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A generate_lead GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/begin_checkout/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "begin_checkout",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A begin_checkout GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "coupon": {
                        "description": "The coupon name or code associated with the event.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "items": {
                        "description": "The items for the event.",
                        "type": "array",
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": ["items"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/join_group/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "join_group",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A join_group GTM server-side event.",
        "type": "object",
        "properties": {
                "group_id": {
                        "description": "The ID of the group.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/view_item/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "view_item",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A view_item GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "items": {
                        "description": "The items for the event.",
                        "type": "array",
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": ["items"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/purchase/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "purchase",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A purchase GTM server-side event.",
        "type": "object",
        "properties": {
                "currency": {
                        "description": "Currency of the items associated with the event, in 3-letter ISO 4217 format. Is required, if value is set.",
                        "type": ["string", "null"],
                        "minLength": 3,
                        "maxLength": 3
                },
                "transaction_id": {
                        "description": "The unique identifier of a transaction.",
                        "type": "string",
                        "maxLength": 500
                },
                "value": {
                        "description": "The monetary value of the event.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "affiliation": {
                        "description": "A product affiliation to designate a supplying company or brick and mortar store location.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "coupon": {
                        "description": "The coupon name or code associated with the event.",
                        "type": ["string", "null"],
                        "maxLength": 4096
                },
                "shipping": {
                        "description": "Shipping cost associated with a transaction.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "tax": {
                        "description": "Tax cost associated with a transaction.",
                        "type": ["number", "null"],
                        "minimum": 0
                },
                "items": {
                        "description": "The items for the event.",
                        "type": "array",
                        "items": {
                                "description": "An item object.",
                                "type": "object",
                                "properties": {
                                        "item_id": {
                                                "description": "The ID of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "item_name": {
                                                "description": "The name of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 500
                                        },
                                        "affiliation": {
                                                "description": "A product affiliation to designate a supplying company or brick and mortar store location",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "coupon": {
                                                "description": "The coupon name or code associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "currency": {
                                                "description": "The currency, in 3-letter ISO 4217 format.",
                                                "type": ["string", "null"],
                                                "minLength": 3,
                                                "maxLength": 3
                                        },
                                        "discount": {
                                                "description": "The monetary discount value associated with the item.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "index": {
                                                "description": "The index of the item in a list.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        },
                                        "item_brand": {
                                                "description": "The brand of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category": {
                                                "description": "The category of the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category2": {
                                                "description": "The second category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category3": {
                                                "description": "The third category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category4": {
                                                "description": "The fourth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_category5": {
                                                "description": "The fifth category hierarchy or additional taxonomy for the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_id": {
                                                "description": "The ID of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_list_name": {
                                                "description": "The name of the list in which the item was presented to the user.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "item_variant": {
                                                "description": "The item variant or unique code or description for additional item details or options.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "location_id": {
                                                "description": "The location associated with the item.",
                                                "type": ["string", "null"],
                                                "maxLength": 4096
                                        },
                                        "price": {
                                                "description": "The monetary price of the item, in units of the specified currency parameter.",
                                                "type": ["number", "null"],
                                                "minimum": 0
                                        },
                                        "quantity": {
                                                "description": "Item quantity.",
                                                "type": ["integer", "null"],
                                                "minimum": 0
                                        }
                                },
                                "additionalProperties": false
                        }
                }
        },
        "required": [
                "transaction_id",
                "items"
        ],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/search/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "search",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "A search GTM server-side event.",
        "type": "object",
        "properties": {
                "search_term": {
                        "description": "The term that was searched for.",
                        "type": "string",
                        "maxLength": 4096
                }
        },
        "required": ["search_term"],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.tag-manager.server-side/user_data/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.google.tag-manager.server-side",
                "name": "user_data",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "description": "The user_data GTM server-side context.",
        "type": "object",
        "properties": {
                "email_address": {
                        "description": "Email address of the user.",
                        "type": ["string", "null"],
                        "maxLength": 256
                },
                "phone_number": {
                        "description": "Phone number of the user.",
                        "type": ["string", "null"],
                        "maxLength": 64
                },
                "address": {
                        "description": "Address of the user.",
                        "type": ["object", "null"],
                        "properties": {
                                "first_name": {
                                        "description": "First name of the user.",
                                        "type": ["string", "null"],
                                        "maxLength": 4096
                                },
                                "last_name": {
                                        "description": "Last name of the user.",
                                        "type": ["string", "null"],
                                        "maxLength": 4096
                                },
                                "street": {
                                        "description": "Street and number for the address of the user.",
                                        "type": ["string", "null"],
                                        "maxLength": 4096
                                },
                                "city": {
                                        "description": "City for the address of the user.",
                                        "type": ["string", "null"],
                                        "maxLength": 4096
                                },
                                "region": {
                                        "description": "State or territory for the address of the user.",
                                        "type": ["string", "null"],
                                        "maxLength": 4096
                                },
                                "postal_code": {
                                        "description": "Postal code for the address of the user.",
                                        "type": ["string", "null"],
                                        "maxLength": 4096
                                },
                                "country": {
                                        "description": "Country code for the address of the user.",
                                        "type": ["string", "null"],
                                        "maxLength": 4096
                                }
                        },
                        "additionalProperties": false
                }
        },
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailgun/message_bounced/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Mailgun message bounced event",
  "self": {
    "vendor": "com.mailgun",
    "name": "message_bounced",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "attachmentCount": {
      "description": "Number of attachments in attachment-x (where x is a number) fields.",
      "type": "integer",
      "maximum": 65535
    },
    "recipient": {
      "description": "Recipient who could not be reached.",
      "type": "string",
      "format": "email",
      "maxLength": 256
    },
    "domain": {
      "description": "Domain that sent the original message.",
      "type": "string",
      "format": "hostname",
      "maxLength": 256
    },
    "messageHeaders": {
      "description": "String list of all MIME headers of the original message dumped to a JSON string (order of headers preserved).",
      "type": "string"
    },
    "code": {
      "description": "SMTP bounce error code in form (X.X.X).",
      "type": "string",
      "maxLength": 8
    },
    "error": {
      "description": "SMTP bounce error string.",
      "type": "string"
    },
    "notification": {
      "description": "Detailed reason for bouncing (optional).",
      "type": "string"
    },
    "campaignId": {
      "description": "The id of campaign triggering the event.",
      "type": "string"
    },
    "campaignName": {
      "description": "The name of campaign triggering the event.",
      "type": "string"
    },
    "tag": {
      "description": "Message tag, if it was tagged. See Tagging.",
      "type": "string"
    },
    "mailingList": {
      "description": "The address of mailing list the original message was sent to.",
      "type": "string"
    },
    "messageId": {
      "description": "The Id of the message that bounced.",
      "type": "string",
      "maxLength": 1024
    },
    "timestamp": {
      "description": "Timestamp in ISO8601 format.",
      "type": "string",
      "format": "date-time"
    },
    "token": {
      "description": "Randomly generated string with length 50 (see securing webhooks).",
      "type": "string",
      "maxLength": 50,
      "minLength": 50
    },
    "signature": {
      "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
      "type": "string",
      "maxLength": 128
    },
    "xMailgunSid": {
      "description": "Mailgun identifying header.",
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailgun/message_opened/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Mailgun message opened event",
  "self": {
    "vendor": "com.mailgun",
    "name": "message_opened",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "campaignId": {
      "description": "id of campaign triggering the event.",
      "type": "string"
    },
    "campaignName": {
      "description": "The name of campaign triggering the event.",
      "type": "string"
    },
    "city": {
      "description": "Name of the city the event came from or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 64
    },
    "clientName": {
      "description": "Name of the client software, e.g. ‘Thunderbird’, ‘Chrome’, ‘Firefox’.",
      "type": "string",
      "maxLength": 64
    },
    "clientOs": {
      "description": "OS family running the client software, e.g. ‘Linux’, ‘Windows’, ‘OSX’.",
      "type": "string",
      "maxLength": 64
    },
    "clientType": {
      "description": "Type of software the link was opened in, e.g. ‘browser’, ‘mobile browser’, ‘email client’.",
      "type": "string",
      "maxLength": 64
    },
    "country": {
      "description": "Two-letter country code (as specified by ISO3166) the event came from or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 8
    },
    "deviceType": {
      "description": "Device type the message was opened on. Can be ‘desktop’, ‘mobile’, ‘tablet’, ‘other’ or ‘unknown’.",
      "type": "string",
      "maxLength": 64
    },
    "domain": {
      "description": "Domain that sent the original message.",
      "type": "string",
      "format": "hostname",
      "maxLength": 256
    },
    "ip": {
      "description": "IP address the event originated from (currently only seems to support ipv4).",
      "type": "string",
      "format": "ipv4"
    },
    "mailingList": {
      "description": "The address of mailing list the original message was sent to.",
      "type": "string"
    },
    "messageId": {
      "description": "The Id of the message that bounced.",
      "type": "string",
      "maxLength": 1024
    },
    "recipient": {
      "description": "Recipient who opened the message.",
      "type": "string",
      "format": "email",
      "maxLength": 256
    },
    "region": {
      "description": "Two-letter or two-digit region code or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 8
    },
    "signature": {
      "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
      "type": "string",
      "maxLength": 128
    },
    "tag": {
      "description": "Message tag, if it was tagged. See Tagging.",
      "type": "string"
    },
    "timestamp": {
      "description": "Timestamp in ISO8601 format.",
      "type": "string",
      "format": "date-time"
    },
    "token": {
      "description": "Randomly generated string with length 50 (see securing webhooks).",
      "type": "string",
      "maxLength": 50,
      "minLength": 50
    },
    "userAgent": {
      "description": "User agent string of the client triggered the event.",
      "type": "string",
      "maxLength": 1024
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailgun/message_delivered/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Mailgun message delivered event",
  "self": {
    "vendor": "com.mailgun",
    "name": "message_delivered",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "event": {
      "description": "Event name ('delivered').",
      "type": "string",
      "maxLength": 16
    },
    "recipient": {
      "description": "Intended recipient.",
      "type": "string",
      "format": "email",
      "maxLength": 256
    },
    "domain": {
      "description": "Domain that sent the original message.",
      "type": "string",
      "format": "hostname",
      "maxLength": 256
    },
    "messageHeaders": {
      "description": "String list of all MIME headers of the original message dumped to a JSON string (order of headers preserved).",
      "type": "string"
    },
    "messageId": {
      "description": "The Id of the message that delivered.",
      "type": "string",
      "maxLength": 1024
    },
    "timestamp": {
      "description": "Timestamp in ISO8601 format.",
      "type": "string",
      "format": "date-time"
    },
    "token": {
      "description": "Randomly generated string with length 50 (see securing webhooks).",
      "type": "string",
      "maxLength": 50,
      "minLength": 50
    },
    "signature": {
      "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailgun/message_clicked/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Mailgun message clicked event",
  "self": {
    "vendor": "com.mailgun",
    "name": "message_clicked",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "campaignId": {
      "description": "id of campaign triggering the event.",
      "type": "string"
    },
    "campaignName": {
      "description": "The name of campaign triggering the event.",
      "type": "string"
    },
    "city": {
      "description": "Name of the city the event came from or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 64
    },
    "clientName": {
      "description": "Name of the client software, e.g. ‘Thunderbird’, ‘Chrome’, ‘Firefox’.",
      "type": "string",
      "maxLength": 64
    },
    "clientOs": {
      "description": "OS family running the client software, e.g. ‘Linux’, ‘Windows’, ‘OSX’.",
      "type": "string",
      "maxLength": 64
    },
    "clientType": {
      "description": "Type of software the link was opened in, e.g. ‘browser’, ‘mobile browser’, ‘email client’.",
      "type": "string",
      "maxLength": 64
    },
    "country": {
      "description": "Two-letter country code (as specified by ISO3166) the event came from or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 2
    },
    "deviceType": {
      "description": "Device type the link was clicked on. Can be ‘desktop’, ‘mobile’, ‘tablet’, ‘other’ or ‘unknown’.",
      "type": "string",
      "maxLength": 64
    },
    "domain": {
      "description": "Domain that sent the original message.",
      "type": "string",
      "format": "hostname",
      "maxLength": 256
    },
    "ip": {
      "description": "IP address the event originated from (currently only seems to support ipv4).",
      "type": "string",
      "format": "ipv4"
    },
    "mailingList": {
      "description": "The address of mailing list the original message was sent to.",
      "type": "string"
    },
    "messageId": {
      "description": "The Id of the message that bounced.",
      "type": "string",
      "maxLength": 1024
    },
    "recipient": {
      "description": "Recipient who clicked.",
      "type": "string",
      "format": "email",
      "maxLength": 256
    },
    "region": {
      "description": "Two-letter or two-digit region code or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 8
    },
    "signature": {
      "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
      "type": "string",
      "maxLength": 128
    },
    "tag": {
      "description": "Message tag, if it was tagged. See Tagging.",
      "type": "string"
    },
    "token": {
      "description": "Randomly generated string with length 50 (see securing webhooks).",
      "type": "string",
      "maxLength": 64
    },
    "url": {
      "description": "The URL that was clicked (size from rfc7230#section-3.1.1).",
      "type": "string",
      "format": "uri",
      "maxLength": 8192
    },
    "userAgent": {
      "description": "User agent string of the client triggered the event.",
      "type": "string",
      "maxLength": 1024
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailgun/message_complained/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Mailgun message complained event",
  "self": {
    "vendor": "com.mailgun",
    "name": "message_complained",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "attachmentCount": {
      "description": "Number of attachments in attachment-x (where x is a number) fields.",
      "type": "integer",
      "maximum": 65535
    },
    "recipient": {
      "description": "Recipient that complained.",
      "type": "string",
      "format": "email",
      "maxLength": 256
    },
    "domain": {
      "description": "Domain that sent the original message.",
      "type": "string",
      "format": "hostname",
      "maxLength": 256
    },
    "messageHeaders": {
      "description": "String list of all MIME headers of the original message dumped to a JSON string (order of headers preserved).",
      "type": "string"
    },
    "campaignId": {
      "description": "The id of campaign triggering the event.",
      "type": "string"
    },
    "campaignName": {
      "description": "The name of campaign triggering the event.",
      "type": "string"
    },
    "tag": {
      "description": "Message tag, if it was tagged. See Tagging.",
      "type": "string"
    },
    "mailingList": {
      "description": "The address of mailing list the original message was sent to.",
      "type": "string"
    },
    "messageId": {
      "description": "The Id of the message that complained.",
      "type": "string",
      "maxLength": 1024
    },
    "timestamp": {
      "description": "Timestamp in ISO8601 format.",
      "type": "string",
      "format": "date-time"
    },
    "token": {
      "description": "Randomly generated string with length 50 (see securing webhooks).",
      "type": "string",
      "maxLength": 50,
      "minLength": 50
    },
    "signature": {
      "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
      "type": "string",
      "maxLength": 128
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailgun/recipient_unsubscribed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Mailgun recipient unsubscribed event",
  "self": {
    "vendor": "com.mailgun",
    "name": "recipient_unsubscribed",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "campaignId": {
      "description": "id of campaign triggering the event.",
      "type": "string"
    },
    "campaignName": {
      "description": "The name of campaign triggering the event.",
      "type": "string"
    },
    "city": {
      "description": "Name of the city the event came from or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 64
    },
    "clientName": {
      "description": "Name of the client software, e.g. ‘Thunderbird’, ‘Chrome’, ‘Firefox’.",
      "type": "string",
      "maxLength": 64
    },
    "clientOs": {
      "description": "OS family running the client software, e.g. ‘Linux’, ‘Windows’, ‘OSX’.",
      "type": "string",
      "maxLength": 64
    },
    "clientType": {
      "description": "Type of software the link was opened in, e.g. ‘browser’, ‘mobile browser’, ‘email client’.",
      "type": "string",
      "maxLength": 64
    },
    "country": {
      "description": "Two-letter country code (as specified by ISO3166) the event came from or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 2
    },
    "deviceType": {
      "description": "Device type the link was clicked on. Can be ‘desktop’, ‘mobile’, ‘tablet’, ‘other’ or ‘unknown’.",
      "type": "string",
      "maxLength": 64
    },
    "domain": {
      "description": "Domain that sent the original message.",
      "type": "string",
      "format": "hostname",
      "maxLength": 256
    },
    "ip": {
      "description": "IP address the event originated from (currently only seems to support ipv4).",
      "type": "string",
      "format": "ipv4"
    },
    "mailingList": {
      "description": "The address of mailing list the original message was sent to.",
      "type": "string"
    },
    "messageId": {
      "description": "The Id of the message that unsubscribed.",
      "type": "string",
      "maxLength": 1024
    },
    "recipient": {
      "description": "Recipient who unsubscribed.",
      "type": "string",
      "format": "email",
      "maxLength": 256
    },
    "region": {
      "description": "Two-letter or two-digit region code or ‘unknown’ if it couldn’t be determined.",
      "type": "string",
      "maxLength": 8
    },
    "signature": {
      "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
      "type": "string",
      "maxLength": 128
    },
    "tag": {
      "description": "Message tag, if it was tagged. See Tagging.",
      "type": "string"
    },
    "timestamp": {
      "description": "Timestamp in ISO8601 format.",
      "type": "string",
      "format": "date-time"
    },
    "token": {
      "description": "Randomly generated string with length 50 (see securing webhooks).",
      "type": "string",
      "maxLength": 50,
      "minLength": 50
    },
    "userAgent": {
      "description": "User agent string of the client triggered the event.",
      "type": "string",
      "maxLength": 1024
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mailgun/message_dropped/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Mailgun message dropped event",
  "self": {
    "vendor": "com.mailgun",
    "name": "message_dropped",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "attachmentCount": {
      "description": "Number of attachments in attachment-x (where x is a number) fields.",
      "type": "integer",
      "maximum": 65535
    },
    "code": {
      "description": "SMTP bounce error code in form (X.X.X).",
      "type": "string",
      "maxLength": 8
    },
    "description": {
      "description": "Detailed explanation for why the message was dropped.",
      "type": "string"
    },
    "domain": {
      "description": "Domain that sent the original message.",
      "type": "string",
      "format": "hostname",
      "maxLength": 256
    },
    "event": {
      "description": "Event name ('dropped').",
      "type": "string",
      "maxLength": 16
    },
    "messageHeaders": {
      "description": "String list of all MIME headers of the original message dumped to a JSON string (order of headers preserved).",
      "type": "string"
    },
    "reason": {
      "description": "Reason for failure. Can be one either 'hardfail' or 'old'.",
      "type": "string",
      "maxLength": 8
    },
    "recipient": {
      "description": "Recipient who could not be reached.",
      "type": "string",
      "format": "email",
      "maxLength": 256
    },
    "signature": {
      "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
      "type": "string",
      "maxLength": 128
    },
    "token": {
      "description": "Randomly generated string with length 50 (see securing webhooks).",
      "type": "string",
      "maxLength": 50,
      "minLength": 50
    },
    "xMailgunSid": {
      "description": "Mailgun identifying header.",
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_marked_as_spam/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message marked as spam event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_marked_as_spam",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_marked_as_spam/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message marked as spam event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_marked_as_spam",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_bounced/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill hard bounce event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_bounced",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"bgtools_code": {
					"type": "number"
				},
				"bounce_description": {
					"type": "string"
				},
				"diag": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"resends": {
					"type": "array"
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_bounced/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill hard bounce event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_bounced",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"bgtools_code": {
					"type": "number"
				},
				"bounce_description": {
					"type": "string"
				},
				"diag": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"resends": {
					"type": "array"
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_opened/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message opened event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_opened",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"ip": {
			"type": "string"
		},
		"location": {
			"type": "object",
			"properties": {
				"city": {
					"type": "string"
				},
				"country_short": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"latitude": {
					"type": "number"
				},
				"longitude": {
					"type": "number"
				},
				"postal_code": {
					"type": "string"
				},
				"region": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"ua": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": ["string", "null"]
							},
							"ua": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		},
		"user_agent_parsed": {
			"type": "object",
			"properties": {
				"mobile": {
					"type": "boolean"
				},
				"os_company_url": {
					"type": ["string", "null"]
				},
				"os_company": {
					"type": ["string", "null"]
				},
				"os_family": {
					"type": ["string", "null"]
				},
				"os_icon": {
					"type": ["string", "null"]
				},
				"os_name": {
					"type": ["string", "null"]
				},
				"os_url": {
					"type": ["string", "null"]
				},
				"type": {
					"type": ["string", "null"]
				},
				"ua_company_url": {
					"type": ["string", "null"]
				},
				"ua_company": {
					"type": ["string", "null"]
				},
				"ua_family": {
					"type": ["string", "null"]
				},
				"ua_icon": {
					"type": ["string", "null"]
				},
				"ua_name": {
					"type": ["string", "null"]
				},
				"ua_url": {
					"type": ["string", "null"]
				},
				"ua_version": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"user_agent": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_opened/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message opened event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_opened",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"ip": {
			"type": "string"
		},
		"location": {
			"type": ["object", "null"],
			"properties": {
				"city": {
					"type": "string"
				},
				"country_short": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"latitude": {
					"type": "number"
				},
				"longitude": {
					"type": "number"
				},
				"postal_code": {
					"type": "string"
				},
				"region": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": ["string", "null"]
							},
							"ua": {
								"type": ["string", "null"]
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": ["string", "null"]
							},
							"ua": {
								"type": ["string", "null"]
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		},
		"user_agent_parsed": {
			"type": ["object", "null"],
			"properties": {
				"mobile": {
					"type": "boolean"
				},
				"os_company_url": {
					"type": ["string", "null"]
				},
				"os_company": {
					"type": ["string", "null"]
				},
				"os_family": {
					"type": ["string", "null"]
				},
				"os_icon": {
					"type": ["string", "null"]
				},
				"os_name": {
					"type": ["string", "null"]
				},
				"os_url": {
					"type": ["string", "null"]
				},
				"type": {
					"type": ["string", "null"]
				},
				"ua_company_url": {
					"type": ["string", "null"]
				},
				"ua_company": {
					"type": ["string", "null"]
				},
				"ua_family": {
					"type": ["string", "null"]
				},
				"ua_icon": {
					"type": ["string", "null"]
				},
				"ua_name": {
					"type": ["string", "null"]
				},
				"ua_url": {
					"type": ["string", "null"]
				},
				"ua_version": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"user_agent": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_sent/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message sent event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_sent",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array"
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"reject": {
					"type": ["string", "null"]
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_clicked/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message clicked event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_clicked",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"ip": {
			"type": "string"
		},
		"location": {
			"type": "object",
			"properties": {
				"city": {
					"type": "string"
				},
				"country_short": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"latitude": {
					"type": "number"
				},
				"longitude": {
					"type": "number"
				},
				"postal_code": {
					"type": "string"
				},
				"region": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": ["string", "null"]
							},
							"ua": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": ["string", "null"]
							},
							"ua": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		},
		"url": {
			"type": "string"
		},
		"user_agent_parsed": {
			"type": "object",
			"properties": {
				"mobile": {
					"type": "boolean"
				},
				"os_company_url": {
					"type": "string"
				},
				"os_company": {
					"type": "string"
				},
				"os_family": {
					"type": "string"
				},
				"os_icon": {
					"type": "string"
				},
				"os_name": {
					"type": "string"
				},
				"os_url": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"ua_company_url": {
					"type": "string"
				},
				"ua_company": {
					"type": "string"
				},
				"ua_family": {
					"type": "string"
				},
				"ua_icon": {
					"type": "string"
				},
				"ua_name": {
					"type": "string"
				},
				"ua_url": {
					"type": "string"
				},
				"ua_version": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"user_agent": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_clicked/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message clicked event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_clicked",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"ip": {
			"type": "string"
		},
		"location": {
			"type": ["object", "null"],
			"properties": {
				"city": {
					"type": "string"
				},
				"country_short": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"latitude": {
					"type": "number"
				},
				"longitude": {
					"type": "number"
				},
				"postal_code": {
					"type": "string"
				},
				"region": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": ["string", "null"]
							},
							"ua": {
								"type": ["string", "null"]
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"ip": {
								"type": "string"
							},
							"location": {
								"type": ["string", "null"]
							},
							"ua": {
								"type": ["string", "null"]
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		},
		"url": {
			"type": "string"
		},
		"user_agent_parsed": {
			"type": ["object", "null"],
			"properties": {
				"mobile": {
					"type": "boolean"
				},
				"os_company_url": {
					"type": "string"
				},
				"os_company": {
					"type": "string"
				},
				"os_family": {
					"type": "string"
				},
				"os_icon": {
					"type": "string"
				},
				"os_name": {
					"type": "string"
				},
				"os_url": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"ua_company_url": {
					"type": "string"
				},
				"ua_company": {
					"type": "string"
				},
				"ua_family": {
					"type": "string"
				},
				"ua_icon": {
					"type": "string"
				},
				"ua_name": {
					"type": "string"
				},
				"ua_url": {
					"type": "string"
				},
				"ua_version": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"user_agent": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_soft_bounced/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message soft bounced event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_soft_bounced",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"bgtools_code": {
					"type": "number"
				},
				"bounce_description": {
					"type": "string"
				},
				"diag": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_soft_bounced/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message soft bounced event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_soft_bounced",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"bgtools_code": {
					"type": "number"
				},
				"bounce_description": {
					"type": "string"
				},
				"diag": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_rejected/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message rejected event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_rejected",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array"
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"reject": {
					"type": ["string", "null", "object"]
				},
				"resends": {
					"type": "array"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"source_ip": {
								"type": "string"
							},
							"destination_ip": {
								"type": "string"
							},
							"size": {
								"type": "integer"
							}
						},
						"additionalProperties": true
					}
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/recipient_unsubscribed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill recipient unsubscribed event",
	"self": {
		"vendor": "com.mandrill",
		"name": "recipient_unsubscribed",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": false
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/recipient_unsubscribed/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill recipient unsubscribed event",
	"self": {
		"vendor": "com.mandrill",
		"name": "recipient_unsubscribed",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"url": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": false
				},
				"opens": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"ts": {
								"type": "string",
								"format": "date-time"
							}
						},
						"additionalProperties": true
					}
				},
				"sender": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_delayed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message delayed event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_delayed",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array"
				},
				"sender": {
					"type": "string"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"destination_ip": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"size": {
								"type": "number"
							},
							"source_ip": {
								"type": "string"
							},
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"state": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		},
		"diag": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.mandrill/message_delayed/jsonschema/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a Mandrill message delayed event",
	"self": {
		"vendor": "com.mandrill",
		"name": "message_delayed",
		"format": "jsonschema",
		"version": "1-0-1"
	},

	"type": "object",
	"properties": {
		"_id": {
			"type": "string"
		},
		"msg": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"_version": {
					"type": "string"
				},
				"clicks": {
					"type": "array"
				},
				"email": {
					"type": "string"
				},
				"metadata": {
					"type": "object",
					"properties": {
						"user_id": {
							"type": "number"
						}
					},
					"additionalProperties": true
				},
				"opens": {
					"type": "array"
				},
				"sender": {
					"type": "string"
				},
				"smtp_events": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"destination_ip": {
								"type": "string"
							},
							"diag": {
								"type": "string"
							},
							"size": {
								"type": "number"
							},
							"source_ip": {
								"type": "string"
							},
							"ts": {
								"type": "string",
								"format": "date-time"
							},
							"type": {
								"type": "string"
							}
						},
						"additionalProperties": true
					}
				},
				"state": {
					"type": "string"
				},
				"subaccount": {
					"type": ["string", "null"]
				},
				"subject": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ts": {
					"type": "string",
					"format": "date-time"
				},
				"resends": {
					"type": "array"
				},
				"template": {
					"type": ["string", "null"]
				}
			},
			"additionalProperties": false
		},
		"ts": {
			"type": "string",
			"format": "date-time"
		},
		"diag": {
			"type": "string"
		}
	},
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.redshift/jsonpaths_file/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a JSON Paths file for loading Redshift from JSON or Avro, http://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html#copy-json-jsonpaths",
	"self": {
		"vendor": "com.amazon.aws.redshift",
		"name": "jsonpaths_file",
		"format": "jsonschema",
		"version": "1-0-0"
	},
	"type": "object",
	"properties": {
		"jsonpaths": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"minItems": 1
		}
	},
	"required": [ "jsonpaths" ],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.datamodeling/config/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
        "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
        "self": {
                "vendor": "com.snowplowanalytics.datamodeling",
                "name": "config",
                "version": "1-0-0",
                "format": "jsonschema"
        },
        "type": "object",
        "properties": {
                "enabled": {
                        "type": "boolean"
                },
                "lockType": {
                        "type": "string",
                        "enum": [
                                "hard",
                                "soft"
                        ]
                },
                "storage": {
                        "type": "string",
                        "enum": [
                                "Default",
                                "BigQuery"
                        ]
                },
                "playbooks": {
                        "type": "array",
                        "items": {
                                "type": "object",
                                "properties": {
                                        "playbook": {
                                                "type": "string",
                                                "minLength": 1,
                                                "maxLength": 256
                                        },
                                        "dependsOn": {
                                                "type": "array",
                                                "items": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "maxLength": 256
                                                },
                                                "minItems": 0,
                                                "maxItems": 64
                                        }
                                },
                                "required": [
                                        "playbook",
                                        "dependsOn"
                                ],
                                "additionalProperties": false
                        },
                        "minItems": 1,
                        "maxItems": 64
                },
                "owners": {
                        "type": ["array", "null"],
                        "items": {
                                "type": "object",
                                "properties": {
                                        "name": {
                                                "type": "string",
                                                "minLength": 1,
                                                "maxLength": 256
                                        },
                                        "email": {
                                                "type": "string",
                                                "format": "email"
                                        }
                                },
                                "required": [
                                        "name",
                                        "email"
                                ],
                                "additionalProperties": false
                        },
                        "minItems": 0,
                        "maxItems": 64
                },
                "dagName": {
                        "type": ["string", "null"],
                        "minLength": 1,
                        "maxLength": 256
                },
                "sqlRunner": {
                        "type": ["string", "null"],
                        "pattern": "^(0|[1-9][0-9]{0,1})\\.(0|[1-9][0-9]{0,1})\\.(0|[1-9][0-9]{0,1})(-rc[0-9]{1,2}){0,1}$"
                },
                "metadata": {
                        "type": ["object", "null"]
                }
        },
        "required": [
                "enabled",
                "lockType",
                "storage",
                "playbooks"
        ],
        "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/processed/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "processed",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "newsletter": {
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    },
    "send_at": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/processed/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid processed event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "processed",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "newsletter": {
      "description": "Legacy Marketing Email tool fields",
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "send_at": {
      "description": "To schedule a send request for a large batch of emails, use the send_at parameter which will send all emails at approximately the same time. send_at is a UNIX timestamp.",
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/delivered/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "delivered",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "newsletter": {
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "tls": {
      "type": ["string", "integer"]
    },
    "response": {
      "type": "string"
    },
    "cert_error": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/delivered/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid delivered event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "delivered",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "description": "The IP address used to send the email",
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "newsletter": {
      "description": "Legacy Marketing Email tool fields",
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "tls": {
      "description": "Indicates whether TLS encription was used in sending this message. For more information about TLS, see the SendGrid TLS Glossary page.",
      "type": ["string", "integer"]
    },
    "response": {
      "description": "The full text of the HTTP response error returned from the receiving server",
      "type": "string"
    },
    "cert_error": {
      "description": "No longer found in the SendGrid documentation; possibly deprecated",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/bounce/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "bounce",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "newsletter": {
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "reason": {
      "type": "string"
    },
    "tls": {
      "type": ["string", "integer"]
    },
    "status": {
      "type": "string"
    },
    "cert_error": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "type": {
      "type": "string"
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/bounce/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid bounce event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "bounce",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "description": "The IP address used to send the email. For open and click events, it is the IP address of the recipient who engaged with the email.",
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "newsletter": {
      "description": "Legacy Marketing Email tool fields",
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "reason": {
      "description": "Any sort of error response returned by the receiving server that describes the reason this event type was triggered",
      "type": "string"
    },
    "tls": {
      "description": "Indicates whether TLS encription was used in sending this message. For more information about TLS, see the SendGrid TLS Glossary page.",
      "type": ["string", "integer"]
    },
    "status": {
      "description": "Status code string. Corresponds to HTTP status code - for example, a JSON response of 5.0.0 is the same as a 500 error response.",
      "type": "string"
    },
    "cert_error": {
      "description": "No longer found in the SendGrid documentation; possibly deprecated",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "type": {
      "description": "Type of bounce, eg Bounce/Blocked/Expired",
      "type": "string"
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/group_unsubscribe/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "group_unsubscribe",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "url": {
      "type": "string",
      "format": "uri"
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "useragent": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/group_unsubscribe/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid group unsubscribe event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "group_unsubscribe",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "description": "The IP address used to send the email. For open and click events, it is the IP address of the recipient who engaged with the email.",
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "url": {
      "description": "The URL where the event originates. For click events, this is the URL clicked on by the recipient.",
      "type": "string",
      "format": "uri"
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "useragent": {
      "description": "The user agent responsible for the event. This is usually a web browser. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36.",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/click/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "click",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "url": {
      "type": "string",
      "format": "uri"
    },
    "newsletter": {
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "useragent": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/click/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid clicked event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "click",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "description": "The IP address used to send the email. For open and click events, it is the IP address of the recipient who engaged with the email.",
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "url": {
      "description": "The URL where the event originates. For click events, this is the URL clicked on by the recipient.",
      "type": "string",
      "format": "uri"
    },
    "newsletter": {
      "description": "Legacy Marketing Email tool fields",
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "useragent": {
      "description": "The user agent responsible for the event. This is usually a web browser. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36.",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/open/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "open",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "newsletter": {
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "useragent": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/open/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid opened event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "open",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "description": "The IP address used to send the email",
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "newsletter": {
      "description": "Legacy Marketing Email tool fields",
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "useragent": {
      "description": "The user agent responsible for the event. This is usually a web browser. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36.",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/dropped/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "dropped",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "reason": {
      "type": "string"
    },
    "status": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/dropped/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid dropped event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "dropped",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "reason": {
      "description": "Any sort of error response returned by the receiving server that describes the reason this event type was triggered",
      "type": "string"
    },
    "status": {
      "description": "Status code string. Corresponds to HTTP status code - for example, a JSON response of 5.0.0 is the same as a 500 error response.",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/deferred/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "deferred",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "newsletter": {
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "tls": {
      "type": ["string", "integer"]
    },
    "response": {
      "type": "string"
    },
    "cert_error": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "attempt": {
      "type": "string"
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/deferred/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid deferred event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "deferred",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "description": "The IP address used to send the email",
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "newsletter": {
      "description": "Legacy Marketing Email tool fields",
      "type": "object",
      "properties": {
        "newsletter_user_list_id": {
          "type": "string"
        },
        "newsletter_id": {
          "type": "string"
        },
        "newsletter_send_id": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "tls": {
      "description": "Indicates whether TLS encription was used in sending this message. For more information about TLS, see the SendGrid TLS Glossary page.",
      "type": ["string", "integer"]
    },
    "response": {
      "description": "The full text of the HTTP response error returned from the receiving server",
      "type": "string"
    },
    "cert_error": {
      "description": "No longer found in the SendGrid documentation; possibly deprecated",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "attempt": {
      "description": "The number of times SendGrid has attempted to deliver this message",
      "type": "string"
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/spamreport/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "spamreport",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/spamreport/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid spam report event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "spamreport",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/unsubscribe/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "unsubscribe",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/unsubscribe/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid unsubscribe event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "unsubscribe",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/group_resubscribe/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self": {
    "vendor": "com.sendgrid",
    "name": "group_resubscribe",
    "version": "1-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "type": "string"
    },
    "url": {
      "type": "string",
      "format": "uri"
    },
    "sg_event_id": {
      "type": "string"
    },
    "smtp-id": {
      "type": "string"
    },
    "useragent": {
      "type": "string"
    },
    "category": {
      "type": [
        "array",
        "string"
      ],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "type": "string"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.sendgrid/group_resubscribe/jsonschema/2-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a SendGrid group resubscribe event. Property descriptions derived from the SendGrid documentation: https://sendgrid.com/docs/for-developers/tracking-events/event/",
  "self": {
    "vendor": "com.sendgrid",
    "name": "group_resubscribe",
    "version": "2-0-0",
    "format": "jsonschema"
  },
  "type": "object",
  "properties": {
    "ip": {
      "description": "The IP address used to send the email. For open and click events, it is the IP address of the recipient who engaged with the email.",
      "type": "string",
      "format": "ipv4"
    },
    "timestamp": {
      "description": "The timestamp of when the message was sent",
      "type": "string",
      "format": "date-time"
    },
    "email": {
      "description": "The email address of the recipient",
      "type": "string",
      "format": "email"
    },
    "url": {
      "description": "The URL where the event originates. For click events, this is the URL clicked on by the recipient.",
      "type": "string",
      "format": "uri"
    },
    "sg_event_id": {
      "description": "A unique ID to this event that you can use for deduplication purposes. These IDs are up to 100 characters long and are URL safe.",
      "type": "string",
      "minLength": 22,
      "maxLength": 4096
    },
    "smtp-id": {
      "description": "A unique ID attached to the message by the originating system",
      "type": "string"
    },
    "useragent": {
      "description": "The user agent responsible for the event. This is usually a web browser. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36.",
      "type": "string"
    },
    "category": {
      "description": "Categories are custom tags that you set for the purpose of organizing your emails. Categories can be set as an array or string, and they will be returned as such when posted in your event endpoint.",
      "type": ["array", "string"],
      "items": {
        "type": "string"
      }
    },
    "asm_group_id": {
      "description": "The ID of the unsubscribe group the recipient’s email address is included in. ASM IDs correspond to the ID that is returned when you create an unsubscribe group.",
      "type": "integer",
      "maximum": 32767,
      "minimum": 0
    },
    "sg_message_id": {
      "description": "A unique, internal SendGrid ID for the message. The first half of this is pulled from the smtp-id.",
      "type": "string"
    },
    "marketing_campaign_id": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "integer"
    },
    "marketing_campaign_name": {
      "description": "For emails sent through our Marketing Campaigns feature, we add Marketing Campaigns specific parameters to the Event Webhook. Both marketing_campaign_name and marketing_campaign_id are displayed as unique arguments in the event data.",
      "type": "string"
    },
    "marketing_campaign_version": {
      "description": "Displayed in the event data for emails sent as part of an A/B Test. The value for marketing_campaign_version are returned as A, B, C, etc.",
      "type": "string"
    },
    "marketing_campaign_split_id": {
      "description": "Marketing campaign split id",
      "type": "integer"
    }
  },
  "additionalProperties": true
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "index": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "sku": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "name": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "brand": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "category": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "variant": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "price": {
      "type": ["number", "null"],
      "multipleOf": 0.01
    },
    "quantity": {
      "type": ["integer", "null"]
    },
    "couponCode": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "position": {
      "type": ["integer", "null"]
    },
    "currencyCode": {
      "type": ["string", "null"],
      "maxLength": 10
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/custom_metric/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics custom metric entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "custom_metric",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "index": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "value": {
      "type": ["number", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/screen_view/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics screenview hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "screen_view",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "screenName": {
      "type": "string",
      "maxLength": 2048
    }
  },
  "required": ["screenName"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/event/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics event hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "event",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "category": {
      "type": "string",
      "maxLength": 150
    },
    "action": {
      "type": "string",
      "maxLength": 500
    },
    "label": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "value": {
      "type": ["integer", "null"],
      "minimum": 0
    }
  },
  "required": ["category", "action"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/promotion_action/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce promotion action entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "promotion_action",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "promotionAction": {
      "enum": [
        "view",
        "promo_click",
        "null"
      ]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product_impression_list/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product impression list entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product_impression_list",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "index":{
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "name": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product_impression_custom_metric/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product impression custom metric entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product_impression_custom_metric",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "listIndex":{
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "productIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "customMetricIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "value": {
      "type": ["integer", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/promotion/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce promotion entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "promotion",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "index": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "id": {
      "type": ["string", "null"]
    },
    "name": {
      "type": ["string", "null"]
    },
    "creative": {
      "type": ["string", "null"]
    },
    "position": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product_custom_dimension/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product custom dimension entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product_custom_dimension",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "productIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "dimensionIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "value": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/content_experiment/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics content experiment entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "content_experiment",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "id": {
      "type": ["string", "null"],
      "maxLength": 40
    },
    "variant": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/content_group/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics content group entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "content_group",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "index": {
      "type": "integer",
      "minimum": 1,
      "maximum": 10
    },
    "value": {
      "type": "string",
      "maxLength": 100
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/custom_dimension/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics custom dimension entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "custom_dimension",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "index": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "value": {
      "type": ["string", "null"],
      "maxLength": 150
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product_impression_custom_dimension/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product impression custom dimension entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product_impression_custom_dimension",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "listIndex":{
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "productIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "customDimensionIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "value": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/social/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics social hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "social",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "network": {
      "type": "string",
      "maxLength": 50
    },
    "action": {
      "type": "string",
      "maxLength": 50
    },
    "actionTarget": {
      "type": ["string", "null"],
      "maxLength": 2048
    }
  },
  "required": ["network", "action"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/exception/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics exception hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "exception",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "description": {
      "type": ["string", "null"],
      "maxLength": 150
    },
    "isFatal": {
      "type": ["boolean", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/timing/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics timing hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "timing",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "userTimingCategory": {
      "type": ["string", "null"],
      "maxLength": 150
    },
    "userTimingVariableName": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "userTimingTime": {
      "type": ["integer", "null"]
    },
    "userTimingLabel": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "pageLoadTime": {
      "type": ["integer", "null"]
    },
    "dnsTime": {
      "type": ["integer", "null"]
    },
    "pageDownloadTime": {
      "type": ["integer", "null"]
    },
    "redirectResponseTime": {
      "type": ["integer", "null"]
    },
    "tcpConnectTime": {
      "type": ["integer", "null"]
    },
    "serverResponseTime": {
      "type": ["integer", "null"]
    },
    "domInteractiveTime": {
      "type": ["integer", "null"]
    },
    "contentLoadTime": {
      "type": ["integer", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/page_view/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics pageview hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "page_view",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "documentLocationUrl": {
      "type": ["string", "null"],
      "maxLength": 2048
    },
    "documentHostName": {
      "type": ["string", "null"],
      "maxLength": 100
    },
    "documentPath": {
      "type": ["string", "null"],
      "maxLength": 2048
    },
    "documentTitle": {
      "type": ["string", "null"],
      "maxLength": 1500
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/app/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics app entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "app",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "name": {
      "type": ["string", "null"],
      "maxLength": 100
    },
    "id": {
      "type": ["string", "null"],
      "maxLength": 150
    },
    "version": {
      "type": ["string", "null"],
      "maxLength": 100
    },
    "installerId": {
      "type": ["string", "null"],
      "maxLength": 150
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/system_info/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics system info entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "system_info",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "screenResolution": {
      "type": ["string", "null"],
      "maxLength": 20
    },
    "viewportSize": {
      "type": ["string", "null"],
      "maxLength": 20
    },
    "documentEncoding": {
      "type": ["string", "null"],
      "maxLength": 20
    },
    "screenColors": {
      "type": ["string", "null"],
      "maxLength": 20
    },
    "userLanguage": {
      "type": ["string", "null"],
      "maxLength": 20
    },
    "javaEnabled": {
      "type": ["boolean", "null"]
    },
    "flashVersion": {
      "type": ["string", "null"],
      "maxLength": 20
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product_action/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product action entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product_action",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "productAction": {
      "enum": [
        "detail",
        "click",
        "add",
        "remove",
        "checkout",
        "checkout_option",
        "purchase",
        "refund",
        "null"
      ]
    },
    "productActionList": {
      "type": ["string", "null"]
    },
    "checkoutStep": {
      "type": "integer"
    },
    "checkoutStepOption": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/item/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics item hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "item",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "transactionId": {
      "type": "string",
      "maxLength": 500
    },
    "name": {
      "type": "string",
      "maxLength": 500
    },
    "price": {
      "type": ["number", "null"],
      "multipleOf": 0.01
    },
    "quantity": {
      "type": ["integer", "null"]
    },
    "code": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "category": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "currencyCode": {
      "type": ["string", "null"],
      "maxLength": 10
    }
  },
  "required": ["transactionId", "name"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/link/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics link entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "link",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "id": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/general/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics general entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "general",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "protocolVersion": {
      "type": "string"
    },
    "trackingId": {
      "type": "string"
    },
    "anonymizeIp": {
      "type": ["boolean", "null"]
    },
    "dataSource": {
      "type": ["string", "null"]
    },
    "queueTime": {
      "type": ["integer", "null"]
    },
    "cacheBuster": {
      "type": ["string", "null"]
    }
  },
  "required": ["protocolVersion", "trackingId"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/traffic_source/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics traffic source entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "traffic_source",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "documentReferrer": {
      "type": ["string", "null"],
      "maxLength": 2048
    },
    "campaignName": {
      "type": ["string", "null"],
      "maxLength": 100
    },
    "campaignSource": {
      "type": ["string", "null"],
      "maxLength": 100
    },
    "campaignMedium": {
      "type": ["string", "null"],
      "maxLength": 50
    },
    "campaignKeyword": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "campaignContent": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "campaignId": {
      "type": ["string", "null"],
      "maxLength": 100
    },
    "googleAdwordsId": {
      "type": ["string", "null"]
    },
    "googleDisplayAdsId": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/session/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics session entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "session",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "sessionControl": {
      "type": ["string", "null"]
    },
    "ipOverride": {
      "type": ["string", "null"]
    },
    "userAgentOverride": {
      "type": ["string", "null"]
    },
    "geographicalOverride": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/user/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics user entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "user",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "clientId": {
      "type": ["string", "null"]
    },
    "userId": {
      "type": ["string", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/hit/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics hit entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "hit",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "type": {
      "enum": [
        "event",
        "exception",
        "item",
        "pageview",
        "screenview",
        "social",
        "timing",
        "transaction"
      ]
    },
    "nonInteractionHit": {
      "type": ["boolean", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product_impression/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product impression entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product_impression",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "listIndex":{
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "productIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "sku": {
      "type": ["string", "null"]
    },
    "name": {
      "type": ["string", "null"]
    },
    "brand": {
      "type": ["string", "null"]
    },
    "category": {
      "type": ["string", "null"]
    },
    "variant": {
      "type": ["string", "null"]
    },
    "position": {
      "type": ["integer", "null"]
    },
    "price": {
      "type": ["number", "null"],
      "multipleOf": 0.01
    },
    "currencyCode": {
      "type": ["string", "null"],
      "maxLength": 10
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/product_custom_metric/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics enhanced e-commerce product custom metric entity",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "product_custom_metric",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "productIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "metricIndex": {
      "type": "integer",
      "minimum": 1,
      "maximum": 200
    },
    "value": {
      "type": ["integer", "null"]
    }
  },
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.google.analytics.measurement-protocol/transaction/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a Google Analytics transaction hit",
  "self": {
    "vendor": "com.google.analytics.measurement-protocol",
    "name": "transaction",
    "format": "jsonschema",
    "version": "1-0-0"
  },

  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "maxLength": 500
    },
    "affiliation": {
      "type": ["string", "null"],
      "maxLength": 500
    },
    "revenue": {
      "type": ["number", "null"],
      "multipleOf": 0.01
    },
    "shipping": {
      "type": ["number", "null"],
      "multipleOf": 0.01
    },
    "tax": {
      "type": ["number", "null"],
      "multipleOf": 0.01
    },
    "currencyCode": {
      "type": ["string", "null"],
      "maxLength": 10
    },
    "couponCode": {
      "type": ["string", "null"]
    }
  },
  "required": ["id"],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.ietf/http_client_hints/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description" : "Values based upon the user agents characteristics, typically requested via the ACCEPT-CH HTTP header, as defined in the HTTP Client Hint specification",
  "self" : {
    "vendor" : "org.ietf",
    "name" : "http_client_hints",
    "version" : "1-0-0",
    "format" : "jsonschema"
  },
  "type" : "object",
  "properties" : {
    "isMobile" : {
      "description" : "A boolean indicating if the user agent's device is a mobile device. (for example: false or true)",
      "type" : "boolean"
    },
    "brands" : {
      "description" : "The collection of brands a user agent identifies as",
      "type" : "array",
      "items" : {
        "type" : "object",
        "properties" : {
          "brand" : {
            "description" : "The user agent's commercial name (for example: 'cURL', 'Edge', 'The World’s Best Web Browser')",
            "type" : "string",
            "maxLength" : 4096
          },
          "version" : {
            "description" : "The user agent's marketing version, which includes distinguishable web-exposed features (for example: '72', '3', or '12.1')",
            "type" : "string",
            "maxLength" : 128
          }
        },
        "required": ["brand", "version"],
        "additionalProperties" : false
      }
    },
    "architecture" : {
      "description" : "The user agent's underlying CPU architecture (for example: 'ARM64', or 'ia32')",
      "type": ["string", "null"],
      "maxLength" : 4096
    },
    "model" : {
      "description" : "The user agent's device model (for example: '', or 'Pixel 2 XL')",
      "type": ["string", "null"],
      "maxLength" : 4096
    },
    "platform" : {
      "description" : "The user agent's operating system’s commercial name. (for example: 'Windows', 'iOS', or 'AmazingOS')",
      "type": ["string", "null"],
      "maxLength" : 4096
    },
    "platformVersion" : {
      "description" : "The user agent's operating system’s version. (for example: 'NT 6.0', '15', or '17G')",
      "type": ["string", "null"],
      "maxLength" : 4096
    },
    "uaFullVersion" : {
      "description" : "The user agent's build version (for example: '72.0.3245.12', '3.14159', or '297.70E04154A')",
      "type": ["string", "null"],
      "maxLength" : 4096
    }
  },
  "required": ["isMobile", "brands"],
  "additionalProperties" : false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.ietf/http_header/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a single HTTP header",
	"self": {
		"vendor": "org.ietf",
		"name": "http_header",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"name": {
			"type": "string",
			"maxLength" : 4096
		},
		"value": {
			"type": "string",
			"maxLength" : 4096
		}
	},
	"required": ["name", "value"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.ietf/http_cookie/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Schema for a single HTTP cookie, as defined in RFC 6265",
	"self": {
		"vendor": "org.ietf",
		"name": "http_cookie",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",
	"properties": {
		"name": {
			"type": "string",
			"maxLength" : 4096
		},
		"value": {
			"type": ["string", "null"],
			"maxLength" : 4096
		}
	},
	"required": ["name", "value"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.self-desc/instance-iglu-only/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
	"$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
	"description": "Top-level schema for the validation process (Iglu-only)",
	"self": {
		"vendor": "com.snowplowanalytics.self-desc",
		"name": "instance-iglu-only",
		"format": "jsonschema",
		"version": "1-0-0"
	},

	"type": "object",

	"properties": {

		"schema": {
			"type": "string",
			"pattern": "^iglu:[a-zA-Z0-9-_.]+/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+/[0-9]+-[0-9]+-[0-9]+$"
		},

		"data": {}
	},

	"required": ["schema", "data"],
	"additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.statusgator/status_change/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Schema for a StatusGator status change event",
  "self": {
    "vendor": "com.statusgator",
    "name": "status_change",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "serviceName": {
      "type": "string",
      "maxLength": 128
    },
    "faviconUrl": {
      "type": "string",
      "format": "uri",
      "maxLength": 8192
    },
    "statusPageUrl": {
      "type": "string",
      "format": "uri",
      "maxLength": 8192
    },
    "homePageUrl": {
      "type": "string",
      "format": "uri",
      "maxLength": 8192
    },
    "currentStatus": {
      "type": "string",
      "maxLength": 128
    },
    "lastStatus": {
      "type": "string",
      "maxLength": 128
    },
    "occurredAt": {
      "type": "string",
      "format": "date-time"
    }
  },
  "additionalProperties": true
}''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.whatwg/media_element/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Context Schema for a media player event",
  "self": {
    "format": "jsonschema",
    "name": "media_element",
    "vendor": "org.whatwg",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "autoPlay": {
      "type": "boolean",
      "description": "If playback should automatically begin as soon as enough media is available to do so without interruption"
    },
    "buffered": {
      "description": "An array of time ranges that have been buffered",
      "items": {
        "type": "object",
        "description": "A time range object",
        "properties": {
          "start": {
            "description": "The beginning of the time range",
            "maximum": 9007199254740991,
            "minimum": 0,
            "type": "number"
          },
          "end": {
            "description": "The end of the time range",
            "maximum": 9007199254740991,
            "minimum": 0,
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "type": "array"
    },
    "controls": {
      "type": "boolean",
      "description": "If the user agent should provide it's own set of controls"
    },
    "crossOrigin": {
      "type": [
        "string",
        "null"
      ],
      "description": "CORS settings value of the media player",
      "maxLength": 255
    },
    "currentSrc": {
      "type": "string",
      "description": "The absolute URL of the media resource",
      "maxLength": 65535,
      "format": "uri"
    },
    "defaultMuted": {
      "type": "boolean",
      "description": "If audio is muted by default"
    },
    "defaultPlaybackRate": {
      "type": "number",
      "description": "The default media playback rate of the player",
      "minimum": -9007199254740991,
      "maximum": 9007199254740991
    },
    "disableRemotePlayback": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "If the media element is allowed to have a remote playback UI"
    },
    "error": {
      "type": [
        "object",
        "null"
      ],
      "description": "An object of the latest error to occur, or null if no errors"
    },
    "fileExtension": {
      "type": [
        "string",
        "null"
      ],
      "description": "The media file format",
      "maxLength": 255,
      "minLength": 1
    },
    "fullscreen": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "If the video element is fullscreen"
    },
    "mediaType": {
      "type": "string",
      "description": "If the media is a video element, or audio",
      "enum": [
        "AUDIO",
        "VIDEO"
      ],
      "maxLength": 5
    },
    "networkState": {
      "description": "The current state of the fetching of media over the network",
      "enum": [
        "NETWORK_EMPTY",
        "NETWORK_IDLE",
        "NETWORK_LOADING",
        "NETWORK_NO_SOURCE"
      ],
      "type": "string"
    },
    "pictureInPicture": {
      "description": "If the video element is showing Picture-In-Picture",
      "type": [
        "boolean",
        "null"
      ]
    },
    "played": {
      "type": [
        "array",
        "null"
      ],
      "description": "An array of time ranges played",
      "items": {
        "type": "object",
        "description": "A time range",
        "properties": {
          "start": {
            "type": "number",
            "description": "The beginning of the time range",
            "minimum": 0,
            "maximum": 9007199254740991
          },
          "end": {
            "type": "number",
            "description": "The end of the time range",
            "minimum": 0,
            "maximum": 9007199254740991
          }
        },
        "additionalProperties": false
      }
    },
    "htmlId": {
      "type": "string",
      "description": "The HTML id of the element",
      "maxLength": 65535
    },
    "preload": {
      "type": "string",
      "description": "The 'preload' HTML attribute of the media",
      "maxLength": 65535
    },
    "readyState": {
      "type": "string",
      "description": "The readiness of the media",
      "enum": [
        "HAVE_NOTHING",
        "HAVE_METADATA",
        "HAVE_CURRENT_DATA",
        "HAVE_FUTURE_DATA",
        "HAVE_ENOUGH_DATA"
      ]
    },
    "seekable": {
      "type": "array",
      "description": "Seekable time range(s)",
      "items": {
        "type": "object",
        "description": "A time range",
        "properties": {
          "end": {
            "description": "The end of the time range",
            "maximum": 9007199254740991,
            "minimum": 0,
            "type": "number"
          },
          "start": {
            "description": "The beginning of the time range",
            "maximum": 9007199254740991,
            "minimum": 0,
            "type": "number"
          }
        },
        "additionalProperties": false
      }
    },
    "seeking": {
      "type": "boolean",
      "description": "If the media is in the process of seeking to a new position"
    },
    "src": {
      "type": "string",
      "description": "The 'src' HTML attribute of the media element",
      "maxLength": 65535,
      "format": "uri"
    },
    "textTracks": {
      "type": [
        "array",
        "null"
      ],
      "description": "An array of TextTrack objects on the media element",
      "items": {
        "type": "object",
        "description": "A Text Track object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of text track this object represents",
            "enum": [
              "subtitles",
              "captions",
              "descriptions",
              "chapters",
              "metadata"
            ]
          },
          "label": {
            "type": "string",
            "description": "The given label for the text track",
            "maxLength": 65535
          },
          "language": {
            "type": "string",
            "description": "The locale of the text track, matching BCP-47 (https://www.rfc-editor.org/info/bcp47)",
            "maxLength": 35
          },
          "mode": {
            "type": "string",
            "description": "The mode the text track is in",
            "enum": [
              "disabled",
              "hidden",
              "showing"
            ]
          }
        }
      }
    }
  },
  "required": [
    "autoPlay",
    "buffered",
    "controls",
    "currentSrc",
    "defaultMuted",
    "defaultPlaybackRate",
    "error",
    "htmlId",
    "mediaType",
    "networkState",
    "preload",
    "readyState",
    "seekable",
    "seeking"
  ],
  "additionalProperties": false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.whatwg/video_element/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema": "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "description": "Context Schema for a video player event",
  "self": {
    "vendor": "org.whatwg",
    "name": "video_element",
    "format": "jsonschema",
    "version": "1-0-0"
  },
  "type": "object",
  "properties": {
    "autoPictureInPicture": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "A boolean value that is true if the video should enter or leave picture-in-picture mode automatically when changing tab and/or application"
    },
    "disablePictureInPicture": {
      "type": [
        "boolean",
        "null"
      ],
      "description": "The disablePictureInPicture property will hint the user agent to not suggest the picture-in-picture to users or to request it automatically"
    },
    "poster": {
      "type": [
        "string",
        "null"
      ],
      "description": "'poster' HTML attribute, which specifies an image to show while no video data is available",
      "maxLength": 65535
    },
    "videoHeight": {
      "type": "integer",
      "description": "A value indicating the intrinsic height of the resource in CSS pixels, or 0 if no media is available yet",
      "minimum": 0,
      "maximum": 65535
    },
    "videoWidth": {
      "type": "integer",
      "description": "A value indicating the intrinsic width of the resource in CSS pixels, or 0 if no media is available yet",
      "minimum": 0,
      "maximum": 65535
    }
  },
  "additionalProperties": false,
  "required": [
    "videoHeight",
    "videoWidth"
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.amazon.aws.ec2/instance_identity_document/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "com.amazon.aws.ec2",
    "name" : "instance_identity_document",
    "version" : "1-0-0",
    "format" : "jsonschema"
  },
  "type" : "object",
  "properties" : {
    "instanceId" : {
      "type" : "string",
      "minLength" : 10,
      "maxLength" : 21
    },
    "devpayProductCodes" : {
      "type" : [ "array", "null" ],
      "items" : {
        "type" : "string"
      }
    },
    "billingProducts" : {
      "type" : [ "array", "null" ],
      "items" : {
        "type" : "string"
      }
    },
    "availabilityZone" : {
      "type" : "string"
    },
    "accountId" : {
      "type" : "string"
    },
    "ramdiskId" : {
      "type" : [ "string", "null" ],
      "minLength" : 12,
      "maxLength" : 21
    },
    "architecture" : {
      "type" : "string"
    },
    "instanceType" : {
      "type" : "string"
    },
    "version" : {
      "type" : "string"
    },
    "NOT_READYTime" : {
      "type" : "string",
      "format" : "date-time"
    },
    "imageId" : {
      "type" : "string",
      "minLength" : 12,
      "maxLength" : 21
    },
    "privateIp" : {
      "type" : "string",
      "format" : "ipv4",
      "minLength" : 7,
      "maxLength" : 15
    },
    "region" : {
      "type" : "string"
    },
    "kernelId" : {
      "type" : [ "string", "null" ],
      "minLength" : 12,
      "maxLength" : 21
    }
  },
  "additionalProperties" : false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('org.openweathermap/weather/jsonschema/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "$schema" : "http://iglucentral.com/schemas/com.snowplowanalytics.self-desc/schema/jsonschema/1-0-0#",
  "self" : {
    "vendor" : "org.openweathermap",
    "name" : "weather",
    "version" : "1-0-0",
    "format" : "jsonschema"
  },
  "type" : "object",
  "properties" : {
    "dt" : {
      "type" : "string",
      "format" : "date-time"
    },
    "main" : {
      "type" : "object",
      "properties" : {
        "temp_min" : {
          "type" : "number",
          "minimum" : 0
        },
        "pressure" : {
          "type" : "number",
          "minimum" : 0
        },
        "sea_level" : {
          "type" : "number",
          "minimum" : 0
        },
        "grnd_level" : {
          "type" : "number",
          "minimum" : 0
        },
        "humidity" : {
          "type" : "number",
          "minimum" : 0
        },
        "temp" : {
          "type" : "number",
          "minimum" : 0
        },
        "temp_max" : {
          "type" : "number",
          "minimum" : 0
        }
      },
      "required": ["temp", "temp_min", "temp_max", "pressure", "humidity"],
      "additionalProperties" : false
    },
    "rain" : {
      "type" : "object",
      "properties" : {
        "1h" : {
          "type" : "number",
          "minimum" : 0
        },
        "3h" : {
          "type" : "number",
          "minimum" : 0
        }
      },
      "additionalProperties" : false
    },
    "snow" : {
      "type" : "object",
      "properties" : {
        "1h" : {
          "type" : "number",
          "minimum" : 0
        },
        "3h" : {
          "type" : "number",
          "minimum" : 0
        }
      },
      "additionalProperties" : false
    },
    "wind" : {
      "type" : "object",
      "properties" : {
        "speed" : {
          "type" : "number",
          "minimum" : 0
        },
        "deg" : {
          "type" : "number",
          "minimum" : 0
        },
        "gust" : {
            "type" : "number",
            "minimum" : 0
        },
        "var_end" : {
            "type" : "integer",
            "maximum" : 32767,
            "minimum" : 0
        },
        "var_beg" : {
            "type" : "integer",
            "maximum" : 32767,
            "minimum" : 0
        }
      },
      "required": ["speed", "deg"],
      "additionalProperties" : false
    },
    "clouds" : {
      "type" : "object",
      "properties" : {
        "all" : {
          "type" : "integer",
          "maximum" : 32767,
          "minimum" : 0
        }
      },
      "required": ["all"],
      "additionalProperties" : false
    },
    "weather" : {
      "type" : "array",
      "items" : {
        "type" : "object",
        "properties" : {
          "main" : {
            "type" : "string",
            "maxLength" : 32
          },
          "description" : {
            "type" : "string",
            "maxLength" : 128
          },
          "id": {
              "type": "integer",
              "minimum": 0,
              "maximum": 32767
          },
          "icon": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
          }
        },
        "required": ["main", "description"],
        "additionalProperties" : false
      }
    }
  },
  "required": ["dt", "main", "clouds"],
  "additionalProperties" : false
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.responders/OptimizelyConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.responders",
  "name": "OptimizelyConfig_1_0_0",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    { "name": "parameters",
      "type": {
        "name": "OptimizelyConfigParameters_1_0_0",
        "type": "record",
        "fields": [
          {
            "name": "targetingListEnabled",
            "type": "boolean"
          },
          {
            "name": "dynamicClientProfilesEnabled",
            "type": "boolean"
          },
          {
            "name": "token",
            "type": "string"
          },
          {
            "name": "awsRegion",
            "type": "string"
          }
        ]
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.responders/SlackConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "namespace": "com.snowplowanalytics.sauna.responders",
    "name": "SlackConfig_1_0_0",
    "type": "record",
    "fields": [
        {
            "name": "enabled",
            "type": "boolean"
        },
        {
            "name": "id",
            "type": "string"
        },
        {
            "name": "parameters",
            "type": {
                "name": "SlackConfigParameters_1_0_0",
                "type": "record",
                "fields": [
                    {
                        "name": "sendMessageEnabled",
                        "type": "boolean"
                    },
                    {
                        "name": "webhookUrl",
                        "type": "string"
                    }
                ]
            }
        }
    ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.responders/SendgridConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.responders",
  "name": "SendgridConfig_1_0_0",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    { "name": "parameters",
      "type": {
        "name": "SendgridConfigParameters_1_0_0",
        "type": "record",
        "fields": [
          {
            "name": "recipientsEnabled",
            "type": "boolean"
          },
          {
            "name": "apiKeyId",
            "type": "string"
          }
        ]
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.responders/SendgridConfig/avro/1-0-1', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
  "namespace": "com.snowplowanalytics.sauna.responders",
  "name": "SendgridConfig_1_0_1",
  "type": "record",
  "fields": [
    {
      "name": "enabled",
      "type": "boolean"
    },
    {
      "name": "id",
      "type": "string"
    },
    { "name": "parameters",
      "type": {
        "name": "SendgridConfigParameters_1_0_1",
        "type": "record",
        "fields": [
          {
            "name": "recipientsEnabled",
            "type": "boolean"
          },
          {
            "name": "emailsEnabled",
            "type": "boolean"
          },
          {
            "name": "apiKeyId",
            "type": "string"
          }
        ]
      }
    }
  ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.responders/PagerDutyConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "namespace": "com.snowplowanalytics.sauna.responders",
    "name": "PagerDutyConfig_1_0_0",
    "type": "record",
    "fields": [
        {
            "name": "enabled",
            "type": "boolean"
        },
        {
            "name": "id",
            "type": "string"
        },
        {
            "name": "parameters",
            "type": {
                "name": "PagerDutyConfigParameters_1_0_0",
                "type": "record",
                "fields": [
                    {
                        "name": "createEventEnabled",
                        "type": "boolean"
                    }
                ]
            }
        }
    ]
}
''')
    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))


    stmt = sa.text('''INSERT INTO raw_schema (path, schema, created_at, status, status_updated_at) VALUES
    ('com.snowplowanalytics.sauna.responders/HipchatConfig/avro/1-0-0', :json, now(), 'NOT_READY', now())''')
    stmt = stmt.bindparams(json='''{
    "namespace": "com.snowplowanalytics.sauna.responders",
    "name": "HipchatConfig_1_0_0",
    "type": "record",
    "fields": [
        {
            "name": "enabled",
            "type": "boolean"
        },
        {
            "name": "id",
            "type": "string"
        },
        {
            "name": "parameters",
            "type": {
                "name": "HipchatConfigParameters_1_0_0",
                "type": "record",
                "fields": [
                    {
                        "name": "sendRoomNotificationEnabled",
                        "type": "boolean"
                    },
                    {
                        "name": "authToken",
                        "type": "string"
                    }
                ]
            }
        }
    ]
}
''')

    op.execute(stmt.compile(dialect=postgresql.dialect(), compile_kwargs={'literal_binds': True}))

    op.execute("UPDATE raw_schema SET schema = REPLACE(schema::text, '\\\\n', '\\n')::json")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
