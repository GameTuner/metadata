"""Insert common events

Revision ID: d34233af6279
Revises: 7dab3181a14a
Create Date: 2024-01-11 08:02:00.000000

"""
from alembic import op

# revision identifiers, used by Alembic.
revision = 'd34233af6279'
down_revision = '7dab3181a14a'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'currency_change', 'Tracked whenever player earns or spends an amount of in game currency', now())
  returning id
)

,schema_parameter AS (
  INSERT INTO schema_parameter (schema_id, name, description, type, introduced_at_version, is_gdpr, is_gdpr_updated_at, created_at)

  SELECT
    schema_insert.id,
    'group_id',
    'Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'currency',
    'Name of in game currency (depends on the game, boosters, gems, tokens, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'amount_change',
    'Negative if spent, positive if earned (-10 means player spent 10 currency)',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'stash_updated',
    'Amount of currency player will have after this currency change (Player had 10 currency, got 5, stash_updated will be 15)',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'currency_limit',
    'Some currencies have top limits (for example, energy could have a max of 100 for this player)',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'amount_wasted',
    'If currency_limit exists, lets say its 100, played had 90 currency and got 20. 10 currency will be wasted as its above the limit.',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'reason',
    'Descriptive context of the change. (DailyGift, Chest.Gold, Chest.Silver, Quest.WeeklyQuest.Grind)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'game_mode',
    'Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'screen',
    'Name of the screen, if applicable (LoginScreen, BattleScreen, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')


    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'login', 'Tracked when player starts a new session', now())
  returning id
)

,schema_parameter AS (
  INSERT INTO schema_parameter (schema_id, name, description, type, introduced_at_version, is_gdpr, is_gdpr_updated_at, created_at)

  SELECT
    schema_insert.id,
    'launch_mode',
    'FromBackground: App was resumed from background. ColdStart: started by clicking game icon. SessionTimeout: Session was inactive, reconnected. Reconnect: Recovered from network/backend error. PushNotification: clicked on push notification',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'previous_session_id',
    'Id of previous session, if applicable',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')


    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'ad_watched', 'Tracked when video ad is finished.', now())
  returning id
)

,schema_parameter AS (
  INSERT INTO schema_parameter (schema_id, name, description, type, introduced_at_version, is_gdpr, is_gdpr_updated_at, created_at)

  SELECT
    schema_insert.id,
    'group_id',
    'Unique value (GUID/UUID works very well) used to track source of the change. For example, if player got some currency as a reward after ad, currency_change event will be tracked with same group_id',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_placement',
    'Description of where ad appears',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_placement_group',
    'If ad_placemenets are organized hierarchially in groups.',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_provider',
    'Name of ad provider (google_ads, facebook_ads, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_type',
    'Type of video ad (interstitial, rewarded)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'reward_claimed',
    'False if ad can be skipped without collecting rewards and player skipped it.',
    'boolean',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'limit',
    'If there is a limit for this player on how many ads it can watch',
    'integer',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'limit_counter',
    'If limit exists, this represents how many ads player already watched, including this one.',
    'integer',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'duration_seconds',
    'Duration in seconds of this ad',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'seconds_watched',
    'How many seconds user actually watched the ad',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'crosspromo',
    'Name of the cross promoted game',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')


    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'first_open', 'Tracked when GameTuner Tracker sees installation_id for the first time', now())
  returning id
)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')


    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'purchase_initiated', 'Tracked when players pay for stuff inside the game using real world money, but before sending the request to payment provider', now())
  returning id
)

,schema_parameter AS (
  INSERT INTO schema_parameter (schema_id, name, description, type, introduced_at_version, is_gdpr, is_gdpr_updated_at, created_at)

  SELECT
    schema_insert.id,
    'payment_provider',
    'Payment provider of payment providers (google_pay, apple_pay, paypal, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'package_name',
    'Unique id of in game package that is bought',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'package_contents',
    'String serialized as json with the following format: {"gold": 10, "unique_item": 1, ...} for every item given',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'premium_currency',
    'Some currencies have top limits (for example, energy could have a max of 100 for this player)',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'price',
    'Price of the package as configured on payment provider.',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'price_currency',
    'Currency code of price using ISO 4217 standard (USD, EUR, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'price_usd',
    'price in USD using a custom exchange rate or leave empty for automatic conversion using today''s rate',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'game_mode',
    'Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'shop_placement',
    'Shop location (MainShop, EndOfLevelPopup, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'screen',
    'Name of the screen, if applicable (LoginScreen, BattleScreen, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'group_id',
    'Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'package_items',
    'Items of purchased package',
    'map<string,integer>',
    1,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')


    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'ad_started', 'Tracked when video ad is finished.', now())
  returning id
)

,schema_parameter AS (
  INSERT INTO schema_parameter (schema_id, name, description, type, introduced_at_version, is_gdpr, is_gdpr_updated_at, created_at)

  SELECT
    schema_insert.id,
    'group_id',
    'Unique value (GUID/UUID works very well) used to track source of the change. For example, if player got some currency as a reward after ad, currency_change event will be tracked with same group_id',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_placement',
    'Description of where ad appears',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_placement_group',
    'If ad_placemenets are organized hierarchially in groups.',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_provider',
    'Name of ad provider (google_ads, facebook_ads, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'ad_type',
    'Type of video ad (interstitial, rewarded)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'limit',
    'If there is a limit for this player on how many ads it can watch',
    'integer',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'limit_counter',
    'If limit exists, this represents how many ads player already watched, including this one.',
    'integer',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'duration_seconds',
    'Duration in seconds of this ad',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'crosspromo',
    'Name of the cross promoted game',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')


    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'purchase', 'Tracked when players pay for stuff inside the game using real world money', now())
  returning id
)

,schema_parameter AS (
  INSERT INTO schema_parameter (schema_id, name, description, type, introduced_at_version, is_gdpr, is_gdpr_updated_at, created_at)

  SELECT
    schema_insert.id,
    'transaction_id',
    'Unique id of the transaction, as provided by payment provider',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'payload',
    'Token used for validating transaction. Provider by payment provider',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'payment_provider',
    'Payment provider of payment providers (google_pay, apple_pay, paypal, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'package_name',
    'Unique id of in game package that is bought',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'package_contents',
    'String serialized as json with the following format: {"gold": 10, "unique_item": 1, ...} for every item given',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'premium_currency',
    'Some currencies have top limits (for example, energy could have a max of 100 for this player)',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'price',
    'Price of the package as configured on payment provider.',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'price_currency',
    'Currency code of price using ISO 4217 standard (USD, EUR, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'price_usd',
    'price in USD using a custom exchange rate or leave empty for automatic conversion using today''s rate',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'paid_amount',
    'Amount of money played actually paid.',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'paid_currency',
    'Currency code of paid_amount using ISO 4217 standard (USD, EUR, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'paid_usd',
    'paid_amount in USD using a custom exchange rate or leave empty for automatic conversion using today''s rate',
    'number',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'transaction_country_code',
    'Transaction country code using Alpha-2 code ISO 3166 standard, if applicable. For example, players may be location in Japan but paying through USA store, so transaction_country_code should be US. Some providers provide this information.',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'game_mode',
    'Applicable if game supports multiple similar game modes (SinglePlayer, MultiPlayer, LiveEvent, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'shop_placement',
    'Shop location (MainShop, EndOfLevelPopup, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'screen',
    'Name of the screen, if applicable (LoginScreen, BattleScreen, ...)',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'group_id',
    'Unique value (GUID/UUID works very well) used to track source of the change. For example, if player bought premium currency, purchase event will be tracked with same group_id',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

UNION ALL
  SELECT
    schema_insert.id,
    'package_items',
    'Items of purchased package',
    'map<string,integer>',
    1,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert

)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')


    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'new_user', 'Tracked when GameTuner sees an user and assigns it an unique id for the first time', now())
  returning id
)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')

    op.execute('''
WITH schema_insert AS (
  INSERT INTO schema (vendor, name, description, created_at) VALUES
  ('com.algebraai.gametuner.event', 'gdpr_delete_request', 'Tracked when the player wants to delete all gdpr personal data', now())
  returning id
)

,schema_parameter AS (
  INSERT INTO schema_parameter (schema_id, name, description, type, introduced_at_version, is_gdpr, is_gdpr_updated_at, created_at)

  SELECT
    schema_insert.id,
    'email',
    'Email to which confirmation status will be sent after data is deleted',
    'string',
    0,
    FALSE,
    NULL::timestamp with time zone,
    now()
  FROM schema_insert
)

INSERT INTO common_event (schema_id)
SELECT
 schema_insert.id
FROM schema_insert
''')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DELETE FROM event')
    op.execute('DELETE FROM common_event')
    op.execute('DELETE FROM schema_parameter')
    op.execute('DELETE FROM schema')
    # ### end Alembic commands ###
